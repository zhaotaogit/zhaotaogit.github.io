<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python报错</title>
      <link href="year/11/18/python-bao-cuo/"/>
      <url>year/11/18/python-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h1 id="Pythonq报错"><a href="#Pythonq报错" class="headerlink" title="Pythonq报错"></a>Pythonq报错</h1><h2 id="1-check-hostname-requires-server-hostname解决"><a href="#1-check-hostname-requires-server-hostname解决" class="headerlink" title="1.check_hostname requires server_hostname解决"></a>1.check_hostname requires server_hostname解决</h2><p><strong>报错的原因</strong>：<br>这个其实跟选用的python版本的关系不大，主要原因是因为每次使用 pip install 命令下载插件的时候，下载的都是最新的版本，比如下载requests插件，它会自动的将依赖的urllib3这个插件也安装，然后依赖的插件版本太高，就导致了这个报错的问题。<br>所以说，一般遇到这种莫名其妙的问题的时候，可以先去看一下是不是插件的问题导致的，解决措施就是 将urllib3插件的版本降低就可·以，当然，直接在安装requests插件的时候，选择用低版本也可以解决这个问题。比如用下面的命令指定版本进行安装：</p><pre class="line-numbers language-shell"><code class="language-shell">pip install requests==2.20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用下面的命令降低版本：</p><pre class="line-numbers language-shell"><code class="language-shell">pip install urllib3==1.25.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="year/11/18/docker/"/>
      <url>year/11/18/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-配置虚拟机IP"><a href="#1-配置虚拟机IP" class="headerlink" title="1.配置虚拟机IP"></a>1.配置虚拟机IP</h2><pre class="line-numbers language-shell"><code class="language-shell"># 编辑网络配置文件[root@localhost ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens33TYPE=Ethernet# 静态IPBOOTPROTO=staticNAME=ens33DEVICE=ens33# 开机自启ONBOOT=yes# IP地址IPADDR=192.168.1.202# 子网掩码NETMASK=255.255.255.0# 网关GATEWAY=192.168.1.1# DNSDNS1=114.114.114.114DNS2=1.2.4.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211023155716216.png" alt="image-20211023155716216"></p><pre class="line-numbers language-shell"><code class="language-shell"># 重启网卡[root@localhost ~]# systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-安装Docker引擎"><a href="#2-安装Docker引擎" class="headerlink" title="2.安装Docker引擎"></a>2.安装Docker引擎</h2><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# sudo yum install -y yum-utils    # 安装yum-utils包# 设置仓库地址-阿里云[root@localhost ~]# sudo yum-config-manager \    --add-repo \    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo# 安装docker引擎[root@localhost ~]# sudo yum install docker-ce docker-ce-cli containerd.io# 启动docker[root@localhost ~]# sudo systemctl start docker# 查看docker版本[root@localhost ~]# docker -vDocker version 20.10.9, build c2ea9bc# 通过run hello-world 验证 Docker Engine 是否已正确安装。[root@localhost ~]# sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211023163223998.png" alt="image-20211023163223998"></p><h2 id="3-Doker的启动与停止命令"><a href="#3-Doker的启动与停止命令" class="headerlink" title="3.Doker的启动与停止命令"></a>3.Doker的启动与停止命令</h2><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# sudo systemctl start docker    # 启动docker[root@localhost ~]# sudo systemctl stop docker    # 停止docker[root@localhost ~]# sudo systemctl restart docker    # 重启docker[root@localhost ~]# sudo systemctl enable docker    # 设置开机自启docker[root@localhost ~]# sudo systemctl status docker    # 查看docker状态[root@localhost ~]# sudo docker info    # 查看docker的概要信息[root@localhost ~]# sudo docker --help    # 查看docker的帮助信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-配置镜像加速"><a href="#4-配置镜像加速" class="headerlink" title="4.配置镜像加速"></a>4.配置镜像加速</h2><blockquote><p>Docker 从 Docker Hub 拉取镜像，因为是从国外获取，所以速度较慢<br>可以通过配置国内镜像源的方式，从国内获取镜像，提高拉取速度。</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell"># 编辑文件vim /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211023164554380.png" alt="image-20211023164554380"></p><p>设置163和中国科技大学的镜像</p><ul><li><p>重新加载配置信息及重启docker服务</p><pre class="line-numbers language-shell"><code class="language-shell"># 重新加载文件[root@localhost ~]# sudo systemctl daemon-reload# 重启docker[root@localhost ~]# sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-镜像相关命令"><a href="#5-镜像相关命令" class="headerlink" title="5.镜像相关命令"></a>5.镜像相关命令</h2><h3 id="1-查看镜像"><a href="#1-查看镜像" class="headerlink" title="1.查看镜像"></a>1.查看镜像</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>REPOSITORY</strong> : 镜像在仓库中的名称</p></li><li><p><strong>TAG</strong>：镜像标签，latest代表最新版本</p></li><li><p><strong>IMAGE ID</strong>：镜像ID</p></li><li><p><strong>CREATED</strong>：镜像创建的日期</p></li><li><p><strong>SIZE</strong>：镜像大小</p><p>这些镜像都是存储在宿主机**/etc/lib/docker**目录下的</p></li></ul><h3 id="3-搜索镜像"><a href="#3-搜索镜像" class="headerlink" title="3.搜索镜像"></a>3.搜索镜像</h3><p>语法:</p><pre class="line-numbers language-shell"><code class="language-shell">docker search 镜像名称    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实例：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker search redis    # 搜索名为redis的镜像NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDredis                            Redis is an open source key-value store that…   10076     [OK]       sameersbn/redis                                                                  83                   [OK]grokzen/redis-cluster            Redis cluster 3.0, 3.2, 4.0, 5.0, 6.0, 6.2      79                   rediscommander/redis-commander   Alpine image for redis-commander - Redis man…   66                   [OK]redislabs/redisearch             Redis With the RedisSearch module pre-loaded…   40                   redislabs/redisinsight           RedisInsight - The GUI for Redis                35                   oliver006/redis_exporter          Prometheus Exporter for Redis Metrics. Supp…   31                   redislabs/redis                  Clustered in-memory database engine compatib…   31                   redislabs/rejson                 RedisJSON - Enhanced JSON data type processi…   29                   arm32v7/redis                    Redis is an open source key-value store that…   25                   redislabs/redisgraph             A graph database module for Redis               16                   [OK]arm64v8/redis                    Redis is an open source key-value store that…   16                   redislabs/rebloom                A probablistic datatypes module for Redis       16                   [OK]redislabs/redismod               An automated build of redismod - latest Redi…   15                   [OK]webhippie/redis                  Docker image for redis                          11                   [OK]redislabs/redistimeseries        A time series database module for Redis         10                   s7anley/redis-sentinel-docker    Redis Sentinel                                  10                   [OK]insready/redis-stat              Docker image for the real-time Redis monitor…   10                   [OK]goodsmileduck/redis-cli          redis-cli on alpine                             9                    [OK]centos/redis-32-centos7          Redis in-memory data structure store, used a…   5                    clearlinux/redis                 Redis key-value data structure server with t…   3                    wodby/redis                      Redis container image with orchestration        1                    [OK]tiredofit/redis                  Redis Server w/ Zabbix monitoring and S6 Ove…   1                    [OK]xetamus/redis-resource           forked redis-resource                           0                    [OK]centos/redis-5-centos7           Redis in-memory data structure store, used a…   0                    [root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-拉取镜像"><a href="#4-拉取镜像" class="headerlink" title="4.拉取镜像"></a>4.拉取镜像</h3><p>​    语法：</p><pre class="line-numbers language-docker"><code class="language-docker">docker pull 镜像名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    假如我们要拉去centos镜像到本地，如果不声明镜像TAG标签信息则默认拉取latest版本，也可以通过hub.docker.com搜索该镜像，查看支持的TAG信息。</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker pull redisUsing default tag: latestlatest: Pulling from library/redis7d63c13d9b9b: Pull complete a2c3b174c5ad: Pull complete 283a10257b0f: Pull complete 7a08c63a873a: Pull complete 0531663a7f55: Pull complete 9bf50efb265c: Pull complete Digest: sha256:a89cb097693dd354de598d279c304a1c73ee550fbfff6d9ee515568e0c749cfeStatus: Downloaded newer image for redis:latestdocker.io/library/redis:latest[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEredis         latest    7faaec683238   12 days ago   113MBhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB[root@localhost ~]# docker pull redis:55: Pulling from library/redis7d63c13d9b9b: Already exists a2c3b174c5ad: Already exists 283a10257b0f: Already exists 54ac4e97e390: Pull complete 0d3ede1e63a5: Pull complete 878bf2d7168d: Pull complete Digest: sha256:8217ee751b6a72bc4b3ef757c18aa9619e939d5073d5a26ce2074905385000b0Status: Downloaded newer image for redis:5docker.io/library/redis:5[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEredis         5         02fee89f17ad   12 days ago   110MBredis         latest    7faaec683238   12 days ago   113MBhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除镜像"><a href="#5-删除镜像" class="headerlink" title="5.删除镜像"></a>5.删除镜像</h3><pre class="line-numbers language-shell"><code class="language-shell">docker rmi 镜像名/镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker rmi redisUntagged: redis:latestUntagged: redis@sha256:a89cb097693dd354de598d279c304a1c73ee550fbfff6d9ee515568e0c749cfeDeleted: sha256:7faaec68323851b2265bddb239bd9476c7d4e4335e9fd88cbfcc1df374dded2fDeleted: sha256:e6deb90762475cda72e21895911f830ed99fd1cc6d920d92873270be91235274Deleted: sha256:2649acad13241d9c8d81e49357bc66cce459b352ded7f423d70ede7bd3bb7b89Deleted: sha256:64007bba5fc220df4d3da33cecdc2d55dd6a73528c138b0fa1acd79fd6a9c217[root@localhost ~]# docker rmi redis:5Untagged: redis:5Untagged: redis@sha256:8217ee751b6a72bc4b3ef757c18aa9619e939d5073d5a26ce2074905385000b0Deleted: sha256:02fee89f17adc8213b560b929d5ac585137612651f8eeb26423aadfe39dc3847Deleted: sha256:f92e4de257018a916bd0715da7b1dd39a3540fa393799c2219a82f0ce99d57e2Deleted: sha256:b13f2ab83d74b48551107876f35dcdaa7197a557fd4769cd4bfeb56bc4f031b6Deleted: sha256:58ca4126d8128345fc58de904cb9029f2a1deb1f88b1fa0ac3f3f0e707f099b9Deleted: sha256:b2cc2f1bf8b1cca8ba7c19e1697f7b73755903ad8f880b83673fd6a697aca935Deleted: sha256:fbd1283ab782925be4d990bd4bebe9ad5e5cf9a525abfb6fa87465e072da9d31Deleted: sha256:e8b689711f21f9301c40bf2131ce1a1905c3aa09def1de5ec43cf0adf652576e[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   4 weeks ago   13.3kB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-容器相关命令"><a href="#6-容器相关命令" class="headerlink" title="6.容器相关命令"></a>6.容器相关命令</h2><h3 id="1-查看容器"><a href="#1-查看容器" class="headerlink" title="1.查看容器"></a>1.查看容器</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker psCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>CONTAINER</strong> ID：容器ID</li><li><strong>IMAGE</strong>：所属镜像</li><li><strong>COMMAND</strong>：</li><li><strong>CREATED</strong>：创建时间</li><li><strong>STATUS</strong>：状态</li><li><strong>PORTS</strong>：端口</li><li><strong>NAMES</strong>：容器名称</li></ul><p>​    查看所有容器(停止和运行)</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker ps -a    CONTAINER ID   IMAGE         COMMAND    CREATED        STATUS                    PORTS     NAMESa08d44d00165   hello-world   "/hello"   27 hours ago   Exited (0) 27 hours ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    查看停止运行的容器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker ps -f status=exitedCONTAINER ID   IMAGE         COMMAND    CREATED        STATUS                    PORTS     NAMESa08d44d00165   hello-world   "/hello"   27 hours ago   Exited (0) 27 hours ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    查看最后一次运行的容器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker ps -lCONTAINER ID   IMAGE         COMMAND    CREATED      STATUS                  PORTS     NAMESa08d44d00165   hello-world   "/hello"   2 days ago   Exited (0) 2 days ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    列出最近创建的n个容器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker ps -n 2CONTAINER ID   IMAGE         COMMAND    CREATED      STATUS                  PORTS     NAMESa08d44d00165   hello-world   "/hello"   2 days ago   Exited (0) 2 days ago             magical_buck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-创建与启动容器"><a href="#2-创建与启动容器" class="headerlink" title="2.创建与启动容器"></a>2.创建与启动容器</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-i：表示运行的容器</li><li>-t ：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登陆进去。即分配一个伪终端。</li><li>–name：为创建的容器命名。</li><li>-v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个-v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</li><li>-d：在run后面加上-d参数，则会创建一个守护式容器在后台运行（这样创建容器后就不会自动登录容器，如果只加-i -t两个参数，创建容器后就会自动进容器里）。</li><li>-p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射。</li><li>-P：随机使用宿主机的可用端口与容器暴露的端口映射。</li></ul><p>​    创建容器并进入</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker run --name mynginx -P nginx    # 创建一个nginx容器，自定义名称为mynginx,将nginx的端口随机映射到宿主机端口[root@localhost ~]# docker ps    # 查看正在运行的容器，发现nginx映射到了宿主机的49153端口CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                     NAMES12c76efcc8f7   nginx     "/docker-entrypoint.…"   48 seconds ago   Up 47 seconds   0.0.0.0:49153->80/tcp, :::49153->80/tcp   mynginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    守护方式创建容器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker run -di --name mynginx -p 80:80 nginxa0a190090a232b9d3ed1a0882d77088c198d710b129ec764d9b66cedc960f096[root@localhost ~]# [root@localhost ~]# docker psCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                               NAMESa0a190090a23   nginx     "/docker-entrypoint.…"   11 seconds ago   Up 11 seconds   0.0.0.0:80->80/tcp, :::80->80/tcp   mynginx[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    登录到守护方式创建的容器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker exec -it mynginx /bin/bashroot@a0a190090a23:/#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    启动与停止容器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker start mynginxmynginx[root@localhost ~]# docker stop mynginxmynginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>删除容器</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker rm 12c76efcc8f7    # 删除id为12c76efcc8f7的容器12c76efcc8f7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-文件拷贝"><a href="#3-文件拷贝" class="headerlink" title="3.文件拷贝"></a>3.文件拷贝</h3><p>​    宿主机拷贝到容器</p><pre class="line-numbers language-shell"><code class="language-shell">docker cp 需要拷贝的文件或目录 容器名称:容器目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    例：将宿主机中的test.py文件拷贝到mynginx容器中的/root目录下</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# vi test.py[root@localhost ~]# docker cp test.py mynginx:/rootCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS                               NAMESa0a190090a23   nginx     "/docker-entrypoint.…"   10 minutes ago   Up 3 minutes   0.0.0.0:80->80/tcp, :::80->80/tcp   mynginx[root@localhost ~]# docker exec -it mynginx /bin/bashroot@a0a190090a23:/# ls /root/test.pyroot@a0a190090a23:/# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    容器拷贝到宿主机</p><pre class="line-numbers language-shell"><code class="language-shell">docker cp 容器名称:容器目录 需要拷贝的文件或目录 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    例：</p><pre class="line-numbers language-shell"><code class="language-shell">root@a0a190090a23:~# touch test.txtroot@a0a190090a23:~# exitexit[root@localhost ~]# docker cp mynginx:/root/test.txt ./[root@localhost ~]# lsanaconda-ks.cfg  index.txt  test.py  test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-目录挂载"><a href="#7-目录挂载" class="headerlink" title="7.目录挂载"></a>7.目录挂载</h2><h3 id="1-指定目录挂载"><a href="#1-指定目录挂载" class="headerlink" title="1.指定目录挂载"></a>1.指定目录挂载</h3><pre class="line-numbers language-shell"><code class="language-shell"># 创建一个nginx容器，端口映射为81端口，宿主机的/root/mynginx_02映射到容器的/root/mynginx_02目录# 此时，修改宿主机的/root/mynginx_02同时会修改容器的/root/mynginx_02[root@localhost ~]# docker run -di --name nginx02 -p 81:80 -v /root/mynginx_02/:/root/mynginx_02 nginx64e80e6ff89ecefea568b317690baa8c9072c270a480db3c749d0ebc07202616<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    查看某个容器的详细信息</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost mynginx_02]# docker inspect nginx02    # 查看nginx02的详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-匿名挂载"><a href="#2-匿名挂载" class="headerlink" title="2.匿名挂载"></a>2.匿名挂载</h3><blockquote><p>匿名挂载就是在宿主机中生成的目录名称是随机命名的</p></blockquote><p>​    匿名挂载只需要写容器的目录即可，容器外对应的目录会在/var/lib/docker/volume中生成。</p><pre class="line-numbers language-shell"><code class="language-shell"># 匿名挂载docker run -di -v /usr/local/data --name centos7-02 centos:7 # 查看volume数据卷信息docker volume ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​    例:</p><pre class="line-numbers language-shell"><code class="language-shell"># 匿名挂载目录[root@localhost ~]# docker run -di -v /usr/local/data --name centos7-02 centos:7 59778edd9a81bc5c5dcd24799429c05fec27e8d6042c88735f23d301f78a80c1# 查看生成的数据卷信息[root@localhost ~]# ls /var/lib/docker/volumes/backingFsBlockDev  e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54  metadata.db# 进入容器的/usr/local/data目录随意创建一个文件[root@localhost ~]# docker exec -it centos7-02 /bin/bash[root@59778edd9a81 /]# cd /usr/local/data/[root@59778edd9a81 data]# ls[root@59778edd9a81 data]# touch test.txt      # 在宿主机中查看容器对应的目录[root@localhost ~]# cd /var/lib/docker/volumes/backingFsBlockDev                                                 metadata.dbe83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54/ [root@localhost ~]# cd /var/lib/docker/volumes/e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95[root@localhost e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54]# ls_data[root@localhost e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54]# cd _data/# 发现宿主机此目录下同容器一样，有刚创建的test.txt文件[root@localhost _data]# lstest.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-具名挂载"><a href="#3-具名挂载" class="headerlink" title="3.具名挂载"></a>3.具名挂载</h3><blockquote><p>具名挂载就是在宿主机中生成的目录名称是我们指定的名称</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell"># 创建一个nginx容器，指定宿主机目录为docker_nginx_data,容器中对应的目录为/usr/local/data,[root@localhost volumes]# docker run -di -v docker_nginx_data:/usr/local/data --name nginx06 nginxe832041a8a3804f68204b8740c8addb8865df7ae8bec9b477ab851d0b1671c83# 查看宿主机生成的新目录，发现有了docker_nginx_data[root@localhost volumes]# ls /var/lib/docker/volumes/backingFsBlockDev  docker_nginx_data  e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54  metadata.db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-数据卷只读"><a href="#4-数据卷只读" class="headerlink" title="4.数据卷只读"></a>4.数据卷只读</h3><blockquote><p>数据卷只读就是挂载到容器中目录，容器只有读取权限。</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost volumes]# docker run -di --name nginx07 -P -v /nginx07:/nginx07:ro nginx8ca4534cb21f57ff7d7a4fe2d6caa4caa25f604132982072c8664db1289c43d0# 发现在var/lib/docker/volumes/目录中不会有目录生成，新目录生成在宿主机的/nginx07[root@localhost volumes]# ls /var/lib/docker/volumes/backingFsBlockDev  docker_nginx_data  e83692d4dbc68d740a75f7761cec27738f120afae98be50948527665da95bf54  metadata.db# 此时想在容器中创建文件就会报错root@8ca4534cb21f:/nginx07# touch 123touch: cannot touch '123': Read-only file system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-volume-form继承"><a href="#5-volume-form继承" class="headerlink" title="5.volume-form继承"></a>5.volume-form继承</h3><blockquote><p>一个容器继承领另一个容器挂载的地址</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell"># 创建一个新的容器nginx09，继承nginx07挂载的地址[root@localhost _data]# docker run -di --name nginx09 --volumes-from nginx07 nginx0bc9b443996448b613df2841d229ec769418d1365737da16ed39ab1fc15df722# 此时进入容器中查看[root@localhost _data]# docker exec -it nginx09 /bin/bash# 发现有nginx07目录root@0bc9b4439964:/# lsbin  boot  dev    docker-entrypoint.d  docker-entrypoint.sh  etc    home  lib  lib64  media  mnt  nginx07  opt  proc  root    run  sbin  srv    sys  tmp  usr  var# 进入nginx07目录，发现有1.txt文件root@0bc9b4439964:/# cd nginx07/root@0bc9b4439964:/nginx07# ls 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-查看目录卷挂载关系"><a href="#6-查看目录卷挂载关系" class="headerlink" title="6.查看目录卷挂载关系"></a>6.查看目录卷挂载关系</h3><pre class="line-numbers language-shell"><code class="language-shell"># 查看目录卷的创建时间、名称、位置[root@localhost _data]# docker volume inspect docker_nginx_data[    {        "CreatedAt": "2021-10-31T04:41:05-04:00",        "Driver": "local",        "Labels": null,        "Mountpoint": "/var/lib/docker/volumes/docker_nginx_data/_data",        "Name": "docker_nginx_data",        "Options": null,        "Scope": "local"    }]# 查看某个容器的ip[root@localhost _data]# docker inspect --format='{{.NetworkSettings.IPAddress}}' nginx07172.17.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-docker镜像构建"><a href="#8-docker镜像构建" class="headerlink" title="8.docker镜像构建"></a>8.docker镜像构建</h2><ul><li>docker commit：从容器创建一个新镜像</li><li>docker bulid：配合dockerfile创建一个镜像</li></ul><h3 id="1-通过docker-commit来实现镜像的构建"><a href="#1-通过docker-commit来实现镜像的构建" class="headerlink" title="1.通过docker commit来实现镜像的构建"></a>1.通过<strong>docker commit</strong>来实现镜像的构建</h3><blockquote><p>我们通过基础镜像centos7，在容器中安装jdk和tomcat来创建一个新的镜像mycentos:<span class="github-emoji"><span>7⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0037-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></blockquote><ol><li><strong>创建容器</strong></li></ol><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost _data]# docker pull cnetos:7    # 拉取镜像[root@localhost _data]# docker run -di --name centos7 centos:7    # 基于centos:7镜像创建一个容器centosd38288c7a5bd5ee4edc1586d20b7e3b1900084f8267d6be977187793d898f00a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>拷贝资源</strong></li></ol><blockquote><p>先在宿主机中准备好tomcat和jdk的安装包，然后将安装包拷贝到容器中</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell"># 将安装包拷贝到容器[root@localhost ~]# docker cp /root/apache-tomcat-8.5.72.tar.gz centos7:/root[root@localhost ~]# docker cp /root/jdk-8u311-linux-x64.tar.gz centos7:/root# 进入容器中查看拷贝的东西[root@localhost ~]# docker exec -it centos7 /bin/bash[root@d38288c7a5bd /]# cd /root/[root@d38288c7a5bd ~]# lsanaconda-ks.cfg  apache-tomcat-8.5.72.tar.gz  jdk-8u311-linux-x64.tar.gz# 解压文件[root@d38288c7a5bd ~]# tar -zxvf apache-tomcat-8.5.72.tar.gz -C /usr/local/tomcat/[root@d38288c7a5bd ~]# tar -zxvf jdk-8u311-linux-x64.tar.gz -C /usr/local/java/# 配置环境变量[root@d38288c7a5bd ~]# vi /etc/profile# 添加以下配置，然后保存退出export JAVA_HOME=/usr/local/java/jdk1.8.0_311export PATH=$PATH:$JAVA_HOME/bin# 使配置生效[root@d38288c7a5bd ~]# source /etc/profile# 检查java环境是否配好[root@d38288c7a5bd ~]# java -versionjava version "1.8.0_311"Java(TM) SE Runtime Environment (build 1.8.0_311-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.311-b11, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211101180436025.png" alt="image-20211101180436025"></p><ol start="3"><li><strong>构建镜像</strong></li></ol><pre class="line-numbers language-shell"><code class="language-shell">docker commit [options] CONTAINER [REPOSITORY[:TAG]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>-a : 提交镜像的作者</li><li>-m：提交镜像时的说明文字</li><li>-c：使用Dockerfile指令来创建镜像</li><li>-p：在创建镜像时将容器暂停</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 将自己的centos7容器生成一个mycentos7:7的镜像，-a代表镜像作者，-m代表这次构建镜像提交的信息[root@localhost ~]# docker commit -a="myhelloworld" -m="java8 and tomcat9" centos7 mycentos:7sha256:4def58ba6be8479e46dc18af7189c0ae64db802fda4af16da3d33d37d3601d8b# 查看docker有哪些镜像，发现多了一个自己创建的mycentos[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED          SIZEmycentos      7         4def58ba6be8   11 seconds ago   741MBnginx         latest    87a94228f133   2 weeks ago      133MBhello-world   latest    feb5d9fea6a5   5 weeks ago      13.3kBcentos        7         eeb6ee3f44bd   6 weeks ago      204MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>用自己的镜像创建容器</strong></li></ol><pre class="line-numbers language-shell"><code class="language-shell"># 尝试用自己构建的镜像创建容器[root@localhost ~]# docker run -di --name centos7 -p 8080:8080 mycentos:7e4137800776b4b2e6dd37ee2a8203ae7a3e37d343cd140cd4de73190948d9337# 进入容器[root@localhost ~]# docker exec -it centos7 bash[root@e4137800776b /]# [root@e4137800776b /]# cd /usr/local/tomcat/apache-tomcat-8.5.72/# 尝试运行tomcat，发现报错[root@e4137800776b apache-tomcat-8.5.72]# ./bin/startup.sh Neither the JAVA_HOME nor the JRE_HOME environment variable is definedAt least one of these environment variable is needed to run this program# 使环境变量生效[root@e4137800776b apache-tomcat-8.5.72]# source /etc/profile# 再次尝试，发现成功[root@e4137800776b apache-tomcat-8.5.72]# ./bin/startup.sh Using CATALINA_BASE:   /usr/local/tomcat/apache-tomcat-8.5.72Using CATALINA_HOME:   /usr/local/tomcat/apache-tomcat-8.5.72Using CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.72/tempUsing JRE_HOME:        /usr/local/java/jdk1.8.0_311Using CLASSPATH:       /usr/local/tomcat/apache-tomcat-8.5.72/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.72/bin/tomcat-juli.jarUsing CATALINA_OPTS:   Tomcat started.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时用一台电脑访问宿主机ip:8080即可看到如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211101182522409.png" alt="image-20211101182522409"></p><h3 id="2-Dockerfile作用"><a href="#2-Dockerfile作用" class="headerlink" title="2.Dockerfile作用"></a>2.Dockerfile作用</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# mkdir -p /usr/local/dockerfile[root@localhost dockerfile]# vi DockerfileENV JAVA_HOME=/usr/loacl/java/jdk1.8.0_311ENV PATH=$PATH:$JAVA_HOME/bin# 启动容器时启动tomcatCMD ["/usr/local/tomcat/apache-tomcat-8.5.72/bin/catalina.sh","run"][root@localhost ~]# vi /usr/local/dockerfile/Dockerfile # 指明构建的新镜像的基础镜像是来自centos:7的FROM centos:7# 通过镜像标签声明了作者信息LABEL maintainer="mrhelloworld.com"# 设置工作目录WORKDIR /usr/local# 新镜像构建成功以后创建指定目录RUN mkdir -p /usr/local/java && /usr/local/tomcat# 拷贝文件到镜像中并解压ADD jdk-8u311-linux-x64.tar.gz /usr/local/javaADD apache-tomcat-8.5.72.tar.gz /usr/local/tomcat# 暴露容器运行时的8080监听端口给外部EXPOSE 8080# 设置容器内JAVA_HOME的环境变量ENV JAVA_HOME=/usr/loacl/java/jdk1.8.0_311ENV PATH=$PATH:$JAVA_HOME/bin# 启动容器时启动tomcatCMD ["/usr/local/tomcat/apache-tomcat-8.5.72/bin/catalina.sh","run"][root@localhost /]# cd root/[root@localhost ~]# lsanaconda-ks.cfg  apache-tomcat-8.5.72.tar.gz  index.txt  jdk-8u311-linux-x64.tar.gz  mynginx_02  test.py  test.txt[root@localhost ~]# cp jdk-8u311-linux-x64.tar.gz /usr/local/dockerfile/[root@localhost ~]# cp apache-tomcat-8.5.72.tar.gz /usr/local/dockerfile/[root@localhost dockerfile]# lsapache-tomcat-8.5.72.tar.gz  Dockerfile  jdk-8u311-linux-x64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211110203555946.png" alt="image-20211110203555946"></p><h3 id="3-利用Dockerfile构建镜像"><a href="#3-利用Dockerfile构建镜像" class="headerlink" title="3.利用Dockerfile构建镜像"></a>3.利用Dockerfile构建镜像</h3><pre class="line-numbers language-shell"><code class="language-shell"># /usr/local/dockerfile代表Dockerfile所需的安装包存放的位置[root@localhost dockerfile]# docker build -f /usr/local/dockerfile/Dockerfile -t mycentos:7 /usr/local/dockerfileSending build context to Docker daemon  157.4MBStep 1/11 : FROM centos:7 ---> eeb6ee3f44bdStep 2/11 : LABEL maintainer="mrhelloworld.com" ---> Running in acc7170cea8aRemoving intermediate container acc7170cea8a ---> f31f5a212077Step 3/11 : WORKDIR /usr/local ---> Running in e547a711ed7aRemoving intermediate container e547a711ed7a ---> 5be9f42fcad7Step 4/11 : RUN mkdir -p /usr/local/java ---> Running in 1a3724eaec53Removing intermediate container 1a3724eaec53 ---> 32f4418fdda7Step 5/11 : RUN mkdir -p /usr/local/tomcat ---> Running in c418f32a0523Removing intermediate container c418f32a0523 ---> 8f58e412bacaStep 6/11 : ADD jdk-8u311-linux-x64.tar.gz /usr/local/java ---> f4ecfe50eafaStep 7/11 : ADD apache-tomcat-8.5.72.tar.gz /usr/local/tomcat ---> 66b44bc9677aStep 8/11 : EXPOSE 8080 ---> Running in 17c52ce48b43Removing intermediate container 17c52ce48b43 ---> c54233396b41Step 9/11 : ENV JAVA_HOME=/usr/local/java/jdk1.8.0_311 ---> Running in cfb5833a22c1Removing intermediate container cfb5833a22c1 ---> 6252c1aba29dStep 10/11 : ENV PATH=$PATH:$JAVA_HOME/bin ---> Running in 74cb21f735fdRemoving intermediate container 74cb21f735fd ---> 2d4b07c042a1Step 11/11 : CMD ["/usr/local/tomcat/apache-tomcat-8.5.72/bin/catalina.sh","run"] ---> Running in fcee15fd66aeRemoving intermediate container fcee15fd66ae ---> bd1032e5d52eSuccessfully built bd1032e5d52eSuccessfully tagged mycentos:7[root@localhost dockerfile]#[root@localhost dockerfile]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED          SIZEmycentos      7         bd1032e5d52e   24 seconds ago   584MBhello-world   latest    feb5d9fea6a5   6 weeks ago      13.3kBcentos        7         eeb6ee3f44bd   7 weeks ago      204MB# 用构建的镜像创建容器[root@localhost dockerfile]# docker run -di --name mycentos7 -p 8080 mycentos:7835d9e6796d019c46bd6b97d1b396a9c47f76df6d09982148684a5d93d7f6b52# 查看容器是否已运行[root@localhost dockerfile]# docker ps CONTAINER ID   IMAGE        COMMAND                  CREATED         STATUS         PORTS                                         NAMES835d9e6796d0   mycentos:7   "/usr/local/tomcat/a…"   3 seconds ago   Up 2 seconds   0.0.0.0:49156->8080/tcp, :::49156->8080/tcp   mycentos7[root@localhost dockerfile]## 接着直接在网页中访问ip:8080即可直接访问tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211110204650718.png" alt="image-20211110204650718"></p><h2 id="9-Docker的备份恢复迁移"><a href="#9-Docker的备份恢复迁移" class="headerlink" title="9.Docker的备份恢复迁移"></a>9.Docker的备份恢复迁移</h2><h3 id="1-镜像备份"><a href="#1-镜像备份" class="headerlink" title="1.镜像备份"></a>1.镜像备份</h3><p>​    使用 <strong>docker save</strong> 将指定镜像保存成tar文件</p><pre class="line-numbers language-shell"><code class="language-shell">docker save [OPTIONS] IMAGE [IMAGE...]docker save -o /root/mycentos7.tar mycentos:7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>-o ：镜像保存后保存的目录</li></ul><p>例：</p><pre class="line-numbers language-shell"><code class="language-shell"># 查看当前镜像有哪些[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   6 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB# 将centos:7镜像打包成tar文件[root@localhost ~]# docker save -o /root/mycentos.tar centos:7# 查看是否生成文件[root@localhost ~]# lsanaconda-ks.cfg  apache-tomcat-8.5.72.tar.gz  index.txt  jdk-8u311-linux-x64.tar.gz  mycentos.tar  mynginx_02  test.py  test.txt[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-镜像恢复"><a href="#2-镜像恢复" class="headerlink" title="2.镜像恢复"></a>2.镜像恢复</h3><p>​    使用<strong>docker load</strong>将<strong>docker save</strong>保存的tar文件导入到当前镜像</p><pre class="line-numbers language-shell"><code class="language-shell">docker load [OPTIONS]docker load -i mycentos.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>-i：指定导入的文件</li><li>-q：精简输出信息</li></ul><p>例：</p><pre class="line-numbers language-shell"><code class="language-shell"># 删除原始镜像[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   6 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost ~]# docker rmi centos:7Untagged: centos:7Untagged: centos@sha256:9d4bcbbb213dfd745b58be38b13b996ebb5ac315fe75711bd618426a630e0987Deleted: sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809ab675bb17ab3a16c517c9Deleted: sha256:174f5685490326fc0a1c0f5570b8663732189b327007e47ff13d2ca59673db02# 导入我们刚刚导出的镜像[root@localhost ~]# docker load -i mycentos.tar 174f56854903: Loading layer [==================================================>]  211.7MB/211.7MBLoaded image: centos:7# 查看是否导入[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   6 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-DockerHub的使用"><a href="#10-DockerHub的使用" class="headerlink" title="10.DockerHub的使用"></a>10.DockerHub的使用</h2><h3 id="1-注册账号"><a href="#1-注册账号" class="headerlink" title="1.注册账号"></a>1.注册账号</h3><p>先去<a href="https://hub.docker.com/%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7">https://hub.docker.com/注册一个账号</a></p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113163804847.png" alt="image-20211113163804847"></p><h3 id="2-登陆账号"><a href="#2-登陆账号" class="headerlink" title="2.登陆账号"></a>2.登陆账号</h3><p>然后登陆账号:</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.Username: 1787417712    # 输入自己的账号Password:                 # 输入自己的密码WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded    # 登陆成功提示[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-推送镜像至仓库"><a href="#3-推送镜像至仓库" class="headerlink" title="3.推送镜像至仓库"></a>3.推送镜像至仓库</h3><p>为了方便测试，我们将<strong>hello-world</strong>推送到仓库</p><p>先给镜像设置标签：<strong>docker tag local-image:tagname new-repo:tagname</strong></p><p>再将镜像推送到仓库：<strong>docker push new-repo:tagname</strong></p><pre class="line-numbers language-shell"><code class="language-shell"># 查看有哪些镜像[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB# 给一个镜像打标签[root@localhost ~]# docker tag hello-world:latest 1787417712/test-helloworld:1.0.0# 再次查看有哪些镜像[root@localhost ~]# docker imagesREPOSITORY                   TAG       IMAGE ID       CREATED       SIZE1787417712/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                  latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                       7         eeb6ee3f44bd   8 weeks ago   204MB# 上传镜像[root@localhost ~]# docker push 1787417712/test-helloworld:1.0.0The push refers to repository [docker.io/1787417712/test-helloworld]e07ee1baac5f: Pushed 1.0.0: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着可以到hub.docker.com登陆自己的账号查看是否上传成功:</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113164236499.png" alt="image-20211113164236499"></p><h3 id="4-尝试拉取自己上传的镜像"><a href="#4-尝试拉取自己上传的镜像" class="headerlink" title="4.尝试拉取自己上传的镜像"></a>4.尝试拉取自己上传的镜像</h3><pre class="line-numbers language-shell"><code class="language-shell"># 查看当前镜像[root@localhost ~]# docker imagesREPOSITORY                   TAG       IMAGE ID       CREATED       SIZE1787417712/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                  latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                       7         eeb6ee3f44bd   8 weeks ago   204MB# 删除之前的镜像[root@localhost ~]# docker rmi 1787417712/test-helloworld:1.0.0Untagged: 1787417712/test-helloworld:1.0.0Untagged: 1787417712/test-helloworld@sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4[root@localhost ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED       SIZEhello-world   latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos        7         eeb6ee3f44bd   8 weeks ago   204MB# 拉取自己上传的镜像[root@localhost ~]# docker pull 1787417712/test-helloworld:1.0.01.0.0: Pulling from 1787417712/test-helloworldDigest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4Status: Downloaded newer image for 1787417712/test-helloworld:1.0.0docker.io/1787417712/test-helloworld:1.0.0# 查看是否拉取成功[root@localhost ~]# docker imagesREPOSITORY                   TAG       IMAGE ID       CREATED       SIZE1787417712/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                  latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                       7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-退出账号"><a href="#5-退出账号" class="headerlink" title="5.退出账号"></a>5.退出账号</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker logoutRemoving login credentials for https://index.docker.io/v1/[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-Docker私有仓库搭建"><a href="#11-Docker私有仓库搭建" class="headerlink" title="11.Docker私有仓库搭建"></a>11.Docker私有仓库搭建</h2><h3 id="1-拉取registry镜像"><a href="#1-拉取registry镜像" class="headerlink" title="1.拉取registry镜像"></a>1.拉取registry镜像</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker pull registryUsing default tag: latestlatest: Pulling from library/registry79e9f2f55bf5: Pull complete 0d96da54f60b: Pull complete 5b27040df4a2: Downloading [===============================================>   ]  6.449MB/6.824MBe2ead8259a04: Downloading 3790aef225b9: Downloading latest: Pulling from library/registry79e9f2f55bf5: Pull complete 0d96da54f60b: Pull complete 5b27040df4a2: Pull complete e2ead8259a04: Pull complete 3790aef225b9: Pull complete Digest: sha256:169211e20e2f2d5d115674681eb79d21a217b296b43374b8e39f97fcf866b375Status: Downloaded newer image for registry:latestdocker.io/library/registry:latest[root@localhost ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113165513474.png" alt="image-20211113165513474"></p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# vim /etc/docker/daemon.json# 应用配置[root@localhost ~]# sudo systemctl daemon-reload# 重启docker[root@localhost ~]# systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建私有仓库容器"><a href="#3-创建私有仓库容器" class="headerlink" title="3.创建私有仓库容器"></a>3.创建私有仓库容器</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker run -di --name registry -p 5000:5000 -v /mydata/docker_registry:/var/lib/registry registry8ce589a0bce5a7703d5c9fb018cdbdf8e147c05f878f057c4078731f4e8b5d84[root@localhost ~]# [root@localhost ~]# cd /mydata/docker_registry/[root@localhost docker_registry]# [root@localhost docker_registry]# ls[root@localhost docker_registry]# docker psCONTAINER ID   IMAGE      COMMAND                  CREATED              STATUS              PORTS                                       NAMES8ce589a0bce5   registry   "/entrypoint.sh /etc…"   About a minute ago   Up About a minute   0.0.0.0:5000->5000/tcp, :::5000->5000/tcp   registry[root@localhost docker_registry]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着打开浏览器输入ip:5000/v2/_catalog看到：</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113170311963.png" alt="image-20211113170311963"></p><p>即代表成功！</p><h3 id="4-推送镜像到私有仓库"><a href="#4-推送镜像到私有仓库" class="headerlink" title="4.推送镜像到私有仓库"></a>4.推送镜像到私有仓库</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost docker_registry]# docker tag hello-world:latest 192.168.1.250:5000/test-helloworld:1.0.0#  192.168.1.250:5000是自己的ip+端口号[root@localhost docker_registry]# docker push 192.168.1.250:5000/test-helloworld:1.0.0The push refers to repository [192.168.1.250:5000/test-helloworld]e07ee1baac5f: Pushed 1.0.0: digest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4 size: 525[root@localhost docker_registry]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新浏览器可以看到:</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211113170647521.png" alt="image-20211113170647521"></p><h3 id="5-拉取私有仓库镜像"><a href="#5-拉取私有仓库镜像" class="headerlink" title="5.拉取私有仓库镜像"></a>5.拉取私有仓库镜像</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost docker_registry]# docker pull 192.168.1.250:5000/test-helloworld:1.0.01.0.0: Pulling from test-helloworldDigest: sha256:f54a58bc1aac5ea1a25d796ae155dc228b3f0e11d046ae276b39c4bf2f13d8c4Status: Downloaded newer image for 192.168.1.250:5000/test-helloworld:1.0.0192.168.1.250:5000/test-helloworld:1.0.0[root@localhost docker_registry]# docker imagesREPOSITORY                           TAG       IMAGE ID       CREATED       SIZEregistry                             latest    b8604a3fe854   3 hours ago   26.2MB192.168.1.250:5000/test-helloworld   1.0.0     feb5d9fea6a5   7 weeks ago   13.3kB1787417712/test-helloworld           1.0.0     feb5d9fea6a5   7 weeks ago   13.3kBhello-world                          latest    feb5d9fea6a5   7 weeks ago   13.3kBcentos                               7         eeb6ee3f44bd   8 weeks ago   204MB[root@localhost docker_registry]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-Docker网络模式"><a href="#12-Docker网络模式" class="headerlink" title="12.Docker网络模式"></a>12.Docker网络模式</h2><p><a href="https://www.jianshu.com/p/22a7032bb7bd">Docker四种网络模式</a></p><table><thead><tr><th>Docker网络模式</th><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>host模式</td><td>–net=host</td><td>容器和宿主机共享Network namespace。</td></tr><tr><td>container模式</td><td>–net=container:NAME_or_ID</td><td>容器和另外一个容器共享Network namespace。 kubernetes中的pod就是多个容器共享一个Network namespace。</td></tr><tr><td>none模式</td><td>–net=none</td><td>容器有独立的Network namespace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等。</td></tr><tr><td>bridge模式</td><td>–net=bridge</td><td>（默认为该模式）</td></tr></tbody></table><h3 id="1-host模式"><a href="#1-host模式" class="headerlink" title="1.host模式"></a>1.host模式</h3><p>创建容器时加上参数:<strong>–network host</strong>即可</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建一个容器，指定网络模式为host[root@localhost /]# docker run -it --name bbox02 --network host busybox/ # # 查看网卡ip/ # ip a1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast qlen 1000    link/ether 00:0c:29:b5:59:76 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.250/24 brd 192.168.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::e136:cd54:f97c:f725/64 scope link        valid_lft forever preferred_lft forever3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue     link/ether 02:42:23:92:ba:90 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:23ff:fe92:ba90/64 scope link        valid_lft forever preferred_lft forever/ # exit[root@localhost /]# ip a1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000    link/ether 00:0c:29:b5:59:76 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.250/24 brd 192.168.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::e136:cd54:f97c:f725/64 scope link        valid_lft forever preferred_lft forever3: docker0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN     link/ether 02:42:23:92:ba:90 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:23ff:fe92:ba90/64 scope link        valid_lft forever preferred_lft forever[root@localhost /]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 发现两者是相同的，即host模式就是容器使用的是宿主机的卡，相同的网络环境。</p><h3 id="bridge模式"><a href="#bridge模式" class="headerlink" title="bridge模式"></a>bridge模式</h3><pre class="line-numbers language-shell"><code class="language-shell"># 容器默认为bridge模式，所以创建的时候可以不加参数即为bridge模式[root@localhost /]# docker run -it --name bbox02 busybox/ # ip a1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever10: eth0@if11: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever/ # # 查看宿主机网卡情况，发现多了个13: veth7e697be@if12，容器和宿主机通信就是靠的这个网卡[root@localhost ~]# ip a1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000    link/ether 00:0c:29:b5:59:76 brd ff:ff:ff:ff:ff:ff    inet 192.168.1.250/24 brd 192.168.1.255 scope global ens33       valid_lft forever preferred_lft forever    inet6 fe80::e136:cd54:f97c:f725/64 scope link        valid_lft forever preferred_lft forever3: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP     link/ether 02:42:23:92:ba:90 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0       valid_lft forever preferred_lft forever    inet6 fe80::42:23ff:fe92:ba90/64 scope link        valid_lft forever preferred_lft forever13: veth7e697be@if12: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP     link/ether 96:86:47:33:2b:55 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet6 fe80::9486:47ff:fe33:2b55/64 scope link        valid_lft forever preferred_lft forever[root@localhost ~]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-none模式"><a href="#3-none模式" class="headerlink" title="3.none模式"></a>3.none模式</h3><p>指定容器为None模式即容器开始没有网络，需要自己配置。</p><p>创建容器的时候加上参数**–network none**即可创建网络模式为none的容器。</p><h3 id="4-container模式"><a href="#4-container模式" class="headerlink" title="4.container模式"></a>4.container模式</h3><p>创建容器时加上参数:**–network container:已运行的容器名/容器ID **即可</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建一个网络模式为container模式的容器，用bbox1相同的网络模式[root@localhost /]# docker run -it --name bbox04 --network container:bbox1 busybox/ # ip a1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever14: eth0@if15: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever/ # # 查看bbox1的网卡信息，发现和bbox04的一样[root@localhost ~]# docker exec -it bbox1 sh/ # ip a1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever14: eth0@if15: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever/ # <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-自定义网络"><a href="#12-自定义网络" class="headerlink" title="12.自定义网络"></a>12.自定义网络</h2><h3 id="1-创建网络"><a href="#1-创建网络" class="headerlink" title="1.创建网络"></a>1.创建网络</h3><pre class="line-numbers language-shell"><code class="language-shell"># 创建一个新的网络[root@localhost /]# docker network create custom_network358dcd3df93625bb7328383e89fc38cadb7046e5e31e4123bf72976d3ea874ca# 查看是否创建成功[root@localhost /]# docker network lsNETWORK ID     NAME             DRIVER    SCOPEa4417a6df8fc   bridge           bridge    local358dcd3df936   custom_network   bridge    local7e8bff04dc54   host             host      local466f8d7fd78e   none             null      local[root@localhost /]# # 分别创建bbox05和bbox06,网络模式选择刚创建的custom[root@localhost /]# docker run -it --name bbox05 --network custom_network busybox[root@localhost ~]# docker run -it --name bbox06 --network custom_network busybox# 进入容器bbox05内,发现可以直接用容器名字ping/ # ping bbox06PING bbox06 (172.18.0.3): 56 data bytes64 bytes from 172.18.0.3: seq=0 ttl=64 time=0.054 ms64 bytes from 172.18.0.3: seq=1 ttl=64 time=0.189 ms64 bytes from 172.18.0.3: seq=2 ttl=64 time=0.127 ms64 bytes from 172.18.0.3: seq=3 ttl=64 time=0.131 ms64 bytes from 172.18.0.3: seq=4 ttl=64 time=0.102 ms^C--- bbox06 ping statistics ---5 packets transmitted, 5 packets received, 0% packet lossround-trip min/avg/max = 0.054/0.120/0.189 ms/ # <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-搭建Redis集群"><a href="#13-搭建Redis集群" class="headerlink" title="13.搭建Redis集群"></a>13.搭建Redis集群</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><p>两台虚拟机:192.168.1.250,192.168.1.251</p><p>docker环境:</p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Docker/image-20211114143238251.png" alt="image-20211114143238251"></p><p>docker镜像：redis</p><h3 id="2-搭建"><a href="#2-搭建" class="headerlink" title="2.搭建"></a>2.搭建</h3><ul><li><p>下载redis镜像</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# docker pull redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编写redis配置文件</p><p>在两台虚拟机中分别执行:</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# mkdir -p /usr/local/docker-redis/redis-cluster[root@localhost ~]# cd /usr/local/docker-redis/redis-cluster/[root@localhost redis-cluster]# vi redis-cluster.tmpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在192.168.1.250中编辑文件写入:</p><pre class="line-numbers language-shell"><code class="language-shell">port ${PORT}    # 端口requirepass 1234    # 密码masterauth 1234        # 集群节点密码protected-mode no    # 安全模式- 关闭daemonize no        # 是否后台appendonly yes        # aof文件是否开启cluster-enabled yes    # 集群环境是否开启cluster-config-file nodes.conf    # 配置文件名称cluster-node-timeout 15000    # 超市时间cluster-announce-ip 192.168.1.250    # ipcluster-announce-port ${PORT}    # 集群端口cluster-announce-bus-port  1${PORT}    # 消息总线内部端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251中编辑文件写入:</p><pre class="line-numbers language-shell"><code class="language-shell">port ${PORT}    # 端口requirepass 1234    # 密码masterauth 1234        # 集群节点密码protected-mode no    # 安全模式- 关闭daemonize no        # 是否后台appendonly yes        # aof文件是否开启cluster-enabled yes    # 集群环境是否开启cluster-config-file nodes.conf    # 配置文件名称cluster-node-timeout 15000    # 超市时间cluster-announce-ip 192.168.1.251    # ipcluster-announce-port ${PORT}    # 集群端口cluster-announce-bus-port  1${PORT}    # 消息总线内部端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.250执行:</p><pre class="line-numbers language-shell"><code class="language-shell">for port in `seq 6371 6373`; do \mkdir -p ${port}/conf \&& PORT=${port} envsubst < redis-cluster.tmpl > ${port}/conf/redis.conf \&& mkdir -p ${port}/data;\done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251执行:</p><pre class="line-numbers language-shell"><code class="language-shell">for port in `seq 6374 6376`; do \mkdir -p ${port}/conf \&& PORT=${port} envsubst < redis-cluster.tmpl > ${port}/conf/redis.conf \&& mkdir -p ${port}/data;\done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.250中执行:</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost redis-cluster]# tree /usr/local/docker-redis/redis-cluster//usr/local/docker-redis/redis-cluster/├── 6371│&nbsp;&nbsp; ├── conf│&nbsp;&nbsp; │&nbsp;&nbsp; └── redis.conf│&nbsp;&nbsp; └── data├── 6372│&nbsp;&nbsp; ├── conf│&nbsp;&nbsp; │&nbsp;&nbsp; └── redis.conf│&nbsp;&nbsp; └── data├── 6373│&nbsp;&nbsp; ├── conf│&nbsp;&nbsp; │&nbsp;&nbsp; └── redis.conf│&nbsp;&nbsp; └── data└── redis-cluster.tmpl9 directories, 4 files[root@localhost redis-cluster]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251中执行:</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost redis-cluster]# tree /usr/local/docker-redis/redis-cluster//usr/local/docker-redis/redis-cluster/├── 6374│&nbsp;&nbsp; ├── conf│&nbsp;&nbsp; │&nbsp;&nbsp; └── redis.conf│&nbsp;&nbsp; └── data├── 6375│&nbsp;&nbsp; ├── conf│&nbsp;&nbsp; │&nbsp;&nbsp; └── redis.conf│&nbsp;&nbsp; └── data├── 6376│&nbsp;&nbsp; ├── conf│&nbsp;&nbsp; │&nbsp;&nbsp; └── redis.conf│&nbsp;&nbsp; └── data└── redis-cluster.tmpl9 directories, 4 files[root@localhost redis-cluster]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建redis容器</p></li></ul><p>在192.168.1.250中执行:</p><pre class="line-numbers language-shell"><code class="language-shell">for port in $(seq 6371 6373); do \  docker run -id --restart always --name redis-${port} --net host \  -v /usr/local/docker-redis/redis-cluster/${port}/conf/redis.conf:/usr/local/etc/redis/redis.conf \  -v /usr/local/docker-redis/redis-cluster/${port}/data:/data \  redis redis-server /usr/local/etc/redis/redis.conf; \done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在192.168.1.251中执行:</p><pre class="line-numbers language-shell"><code class="language-shell">for port in $(seq 6374 6376); do \  docker run -id --restart always --name redis-${port} --net host \  -v /usr/local/docker-redis/redis-cluster/${port}/conf/redis.conf:/usr/local/etc/redis/redis.conf \  -v /usr/local/docker-redis/redis-cluster/${port}/data:/data \  redis redis-server /usr/local/etc/redis/redis.conf; \done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就分别在两台虚拟机中各创建了3个redis容器</p><ul><li>创建redis cluster集群</li></ul><p>在192.168.1.250中执行：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost redis-cluster]# docker exec -it redis-6371 bashroot@localhost:/data# cd /usr/local/bin/root@localhost:/usr/local/bin# lsdocker-entrypoint.sh  gosu  redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-serverroot@localhost:/usr/local/bin# root@localhost:/data# redis-cli -a 1234 --cluster create 192.168.1.250:6371 192.168.1.250:6372 192.168.1.250:6373 192.168.1.251:6374  192.168.1.251:6375 192.168.1.251:6376 --cluster-replicas 1Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.>>> Performing hash slots allocation on 6 nodes...Master[0] -> Slots 0 - 5460Master[1] -> Slots 5461 - 10922Master[2] -> Slots 10923 - 16383Adding replica 192.168.1.251:6376 to 192.168.1.250:6371Adding replica 192.168.1.250:6373 to 192.168.1.251:6374Adding replica 192.168.1.251:6375 to 192.168.1.250:6372M: 456297129cb486b101c40e341365c10aa75ef9d6 192.168.1.250:6371   slots:[0-5460] (5461 slots) masterM: ce097bae6e524e927a3c618cff0842b8e2ee733e 192.168.1.250:6372   slots:[10923-16383] (5461 slots) masterS: 0dac43912efbda099854300fa6e1026247ff0808 192.168.1.250:6373   replicates 1f11869fb991614ba37bc21944e9fe1a39a667eaM: 1f11869fb991614ba37bc21944e9fe1a39a667ea 192.168.1.251:6374   slots:[5461-10922] (5462 slots) masterS: 34365fc1c7931a5025364a7acd6f8c0a7b59e538 192.168.1.251:6375   replicates ce097bae6e524e927a3c618cff0842b8e2ee733eS: 7b13fc4d721522edd661755e058a9dda7b6dc579 192.168.1.251:6376   replicates 456297129cb486b101c40e341365c10aa75ef9d6Can I set the above configuration? (type 'yes' to accept): yes>>> Nodes configuration updated>>> Assign a different config epoch to each node>>> Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join.>>> Performing Cluster Check (using node 192.168.1.250:6371)M: 456297129cb486b101c40e341365c10aa75ef9d6 192.168.1.250:6371   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: ce097bae6e524e927a3c618cff0842b8e2ee733e 192.168.1.250:6372   slots:[10923-16383] (5461 slots) master   1 additional replica(s)M: 1f11869fb991614ba37bc21944e9fe1a39a667ea 192.168.1.251:6374   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: 0dac43912efbda099854300fa6e1026247ff0808 192.168.1.250:6373   slots: (0 slots) slave   replicates 1f11869fb991614ba37bc21944e9fe1a39a667eaS: 7b13fc4d721522edd661755e058a9dda7b6dc579 192.168.1.251:6376   slots: (0 slots) slave   replicates 456297129cb486b101c40e341365c10aa75ef9d6S: 34365fc1c7931a5025364a7acd6f8c0a7b59e538 192.168.1.251:6375   slots: (0 slots) slave   replicates ce097bae6e524e927a3c618cff0842b8e2ee733e[OK] All nodes agree about slots configuration.>>> Check for open slots...>>> Check slots coverage...[OK] All 16384 slots covered.root@localhost:/data# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-DockerCompose安装"><a href="#14-DockerCompose安装" class="headerlink" title="14.DockerCompose安装"></a>14.DockerCompose安装</h2><pre class="line-numbers language-shell"><code class="language-shell"># 安装[root@localhost redis-cluster]#  sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--  100   633  100   633    0     0    880      0 --:--:-- --:--:-- --:--:--   881  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--    6 12.1M    6  804k    0     0   383k      0  0:00:32  0:00:02  0:00:30  100 12.1M  100 12.1M    0     0   204k      0  0:01:00  0:01:00 --:--:--  162k[root@localhost redis-cluster]# cd /usr/local/bin/[root@localhost bin]# lsdocker-compose# 赋予执行权限[root@localhost bin]# sudo chmod +x /usr/local/bin/docker-compose [root@localhost bin]# lltotal 12440-rwxr-xr-x. 1 root root 12737304 Nov 14 02:27 docker-compose[root@localhost bin]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python面向对象OOP</title>
      <link href="year/11/18/python-mian-xiang-dui-xiang-oop/"/>
      <url>year/11/18/python-mian-xiang-dui-xiang-oop/</url>
      
        <content type="html"><![CDATA[<h1 id="Python面向对象OOP"><a href="#Python面向对象OOP" class="headerlink" title="Python面向对象OOP"></a>Python面向对象OOP</h1><blockquote><p>面向对象的三大属性:</p><ol><li><strong>封装</strong> 根据 <strong>职责</strong> 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中</li><li><strong>继承</strong> <strong>实现代码的重用</strong>，相同的代码不需要重复的编写</li><li><strong>多态</strong> 不同的对象调用相同的方法，产生不同的执行结果，<strong>增加代码的灵活度</strong></li></ol></blockquote><h2 id="1-创建对象时自动调用初始化方法"><a href="#1-创建对象时自动调用初始化方法" class="headerlink" title="1. 创建对象时自动调用初始化方法"></a>1. 创建对象时自动调用初始化方法</h2><ul><li>当使用类名()创建对象时，为对象分配空间后，自动调用__init__方法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个初始化方法！'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用类名()创建对象的时候，会自动调用初始化方法(__init__)</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528162622086.png" alt="image-20210528162622086"></p><h2 id="2-在初始化方法内部定义属性"><a href="#2-在初始化方法内部定义属性" class="headerlink" title="2.在初始化方法内部定义属性"></a>2.在初始化方法内部定义属性</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Tom'</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个初始化方法！'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用类名()创建对象的时候，会自动调用初始化方法(__init__)</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528162751022.png" alt="image-20210528162751022"></p><h2 id="3-初始化同时设置初始值"><a href="#3-初始化同时设置初始值" class="headerlink" title="3.初始化同时设置初始值"></a>3.初始化同时设置初始值</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个初始化方法！'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用类名()创建对象的时候，会自动调用初始化方法(__init__)</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528162908438.png" alt="image-20210528162908438"></p><h2 id="4-内置方法-del-方法和对象生命周期"><a href="#4-内置方法-del-方法和对象生命周期" class="headerlink" title="4.内置方法__del__方法和对象生命周期"></a>4.内置方法__del__方法和对象生命周期</h2><ul><li>当一个对象被从内存中销毁前，会调用__del__方法。<ul><li><code>__init__</code> 改造初始化方法，可以让创建对象更加灵活</li><li><code>__del__</code> 如果希望在对象被销毁前，再做一些事情，可以考虑一下 <code>__del__</code> 方法</li></ul></li></ul><p><strong>生命周期</strong></p><ul><li>一个对象从调用 <code>类名()</code> 创建，生命周期开始</li><li>一个对象的 <code>__del__</code> 方法一旦被调用，生命周期结束</li><li>在对象的生命周期内，可以访问对象属性，或者让对象调用方法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个初始化方法！'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这个对象被销毁了'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用类名()创建对象的时候，会自动调用初始化方法(__init__)</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">del</span> tom        <span class="token comment" spellcheck="true"># del关键字可以删除一个对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528163536885.png" alt="image-20210528163536885"></p><h2 id="5-内置方法-str-方法定制变量输入信息"><a href="#5-内置方法-str-方法定制变量输入信息" class="headerlink" title="5.内置方法__str__方法定制变量输入信息"></a>5.内置方法__str__方法定制变量输入信息</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个初始化方法！'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这个对象被销毁了'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用类名()创建对象的时候，会自动调用初始化方法(__init__)</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token keyword">del</span> tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当不自定义__str__方法时，直接打印对象效果为:</p><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528163851294.png" alt="image-20210528163851294"></p><p>可以看到打印出来的是<strong>__main__.类名 object at 对象的内存地址</strong></p><p>当我们自定义了之后：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个初始化方法！'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这个对象被销毁了'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'我最帅'</span><span class="token comment" spellcheck="true"># 使用类名()创建对象的时候，会自动调用初始化方法(__init__)</span>tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token keyword">del</span> tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528164052790.png" alt="image-20210528164052790">打印出了我们设置的返回的内容。</p><h2 id="6-封装特性和案例"><a href="#6-封装特性和案例" class="headerlink" title="6.封装特性和案例"></a>6.封装特性和案例</h2><h3 id="1-封装的概念"><a href="#1-封装的概念" class="headerlink" title="1.封装的概念"></a>1.封装的概念</h3><ol><li><strong>封装</strong> 是面向对象编程的一大特点</li><li>面向对象编程的 <strong>第一步</strong> —— 将 <strong>属性</strong> 和 <strong>方法</strong> <strong>封装</strong> 到一个抽象的 <strong>类</strong> 中</li><li><strong>外界</strong> 使用 <strong>类</strong> 创建 <strong>对象</strong>，然后 <strong>让对象调用方法</strong></li><li><strong>对象方法的细节</strong> 都被 <strong>封装</strong> 在 <strong>类的内部</strong></li></ol><h3 id="2-小明爱跑步案例"><a href="#2-小明爱跑步案例" class="headerlink" title="2.小明爱跑步案例"></a>2.小明爱跑步案例</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>weight <span class="token operator">=</span> weight    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token string">'我的名族叫:{self.name},我的体重是:{self.weight}公斤'</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.name}爱跑步'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>weight <span class="token operator">-=</span> <span class="token number">0.5</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.name}爱跑步'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>weight <span class="token operator">+=</span> <span class="token number">1</span>xiaoming <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">75.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528165213151.png" alt="image-20210528165213151"></p><h3 id="3-多个对象之间互不干扰"><a href="#3-多个对象之间互不干扰" class="headerlink" title="3.多个对象之间互不干扰"></a>3.多个对象之间互不干扰</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>weight <span class="token operator">=</span> weight    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token string">'我的名族叫:{self.name},我的体重是:{self.weight}公斤'</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.name}爱跑步'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>weight <span class="token operator">-=</span> <span class="token number">0.5</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.name}爱跑步'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>weight <span class="token operator">+=</span> <span class="token number">1</span>xiaoming <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token number">75.0</span><span class="token punctuation">)</span>xiaomei <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'小美'</span><span class="token punctuation">,</span><span class="token number">45.0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaomei<span class="token punctuation">)</span>xiaomei<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaomei<span class="token punctuation">)</span>xiaomei<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaomei<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528165547278.png" alt="image-20210528165547278"></p><h3 id="3-实例2-拜访家具"><a href="#3-实例2-拜访家具" class="headerlink" title="3.实例2-拜访家具"></a>3.实例2-拜访家具</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HouseItem</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>area <span class="token operator">=</span> area    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token string">'{self.name},占地面积是{self.area}平方'</span><span class="token keyword">class</span> <span class="token class-name">House</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>house_type<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>house_type <span class="token operator">=</span> house_type        self<span class="token punctuation">.</span>area <span class="token operator">=</span> area        self<span class="token punctuation">.</span>free_area <span class="token operator">=</span> area        self<span class="token punctuation">.</span>item_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token string">'房子户型是{self.house_type},占地面积是{self.area}'</span>    <span class="token keyword">def</span> <span class="token function">add_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>area <span class="token operator">>=</span> item<span class="token punctuation">.</span>area<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>item_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>free_area <span class="token operator">-=</span> item<span class="token punctuation">.</span>area        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'房子空间不足！'</span><span class="token punctuation">)</span>bed <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">'席梦思'</span><span class="token punctuation">,</span><span class="token number">4.0</span><span class="token punctuation">)</span>chest <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">'衣柜'</span><span class="token punctuation">,</span><span class="token number">2.0</span><span class="token punctuation">)</span>table <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">'餐桌'</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bed<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>chest<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>house <span class="token operator">=</span> House<span class="token punctuation">(</span><span class="token string">'三室一厅'</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>house<span class="token punctuation">)</span>house<span class="token punctuation">.</span>add_item<span class="token punctuation">(</span>bed<span class="token punctuation">)</span>house<span class="token punctuation">.</span>add_item<span class="token punctuation">(</span>chest<span class="token punctuation">)</span>house<span class="token punctuation">.</span>add_item<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>house<span class="token punctuation">.</span>item_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>house<span class="token punctuation">.</span>free_area<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528171038553.png" alt="image-20210528171038553"></p><h3 id="4-士兵突击"><a href="#4-士兵突击" class="headerlink" title="4.士兵突击"></a>4.士兵突击</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Gun</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>bullet_count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">add_bullet</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bullet_count <span class="token operator">+=</span> count    <span class="token keyword">def</span> <span class="token function">shoot</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>bullet_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.model}子弹不足！'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'biubiubiu'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bullet_count <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">Soldier</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>gun <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">fire</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>gun <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.name}还没有枪！'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'冲啊{self.name}...'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gun<span class="token punctuation">.</span>add_bullet<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gun<span class="token punctuation">.</span>shoot<span class="token punctuation">(</span><span class="token punctuation">)</span>ak47 <span class="token operator">=</span> Gun<span class="token punctuation">(</span><span class="token string">'ak47'</span><span class="token punctuation">)</span>xushanduo <span class="token operator">=</span> Soldier<span class="token punctuation">(</span><span class="token string">'许三多'</span><span class="token punctuation">)</span>xushanduo<span class="token punctuation">.</span>fire<span class="token punctuation">(</span><span class="token punctuation">)</span>xushanduo<span class="token punctuation">.</span>gun <span class="token operator">=</span> ak47<span class="token keyword">print</span><span class="token punctuation">(</span>xushanduo<span class="token punctuation">.</span>gun<span class="token punctuation">)</span>xushanduo<span class="token punctuation">.</span>fire<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528173105378.png" alt="image-20210528173105378"></p><h2 id="7-私有属性和私有方法"><a href="#7-私有属性和私有方法" class="headerlink" title="7.私有属性和私有方法"></a>7.私有属性和私有方法</h2><h3 id="1-私有属性"><a href="#1-私有属性" class="headerlink" title="1.私有属性"></a>1.私有属性</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Women</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">def</span> <span class="token function">secret</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字是{self.name}，年龄是{self.__age}'</span><span class="token punctuation">)</span>xiaomei <span class="token operator">=</span> Women<span class="token punctuation">(</span><span class="token string">'小美'</span><span class="token punctuation">)</span>xiaomei<span class="token punctuation">.</span>secret<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaomei<span class="token punctuation">.</span>__age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528174122833.png" alt="image-20210528174122833"></p><ul><li>程序运行后发现报了一个错误， ‘Women’ object has no attribute ‘__age’，说明age属性不能直接被访问，而可以通过类中方法访问。</li></ul><h3 id="2-私有方法"><a href="#2-私有方法" class="headerlink" title="2.私有方法"></a>2.私有方法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Women</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">def</span> <span class="token function">__secret</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字是{self.name}，年龄是{self.__age}'</span><span class="token punctuation">)</span>xiaomei <span class="token operator">=</span> Women<span class="token punctuation">(</span><span class="token string">'小美'</span><span class="token punctuation">)</span>xiaomei<span class="token punctuation">.</span>secret<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面代码中，我将之前的secret方法名的前面加上了两个下划线，这个方法就变成了私有方法，只有在类中可以调用，而想在类的外面调用就会报错:</li></ul><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528174520744.png" alt="image-20210528174520744"></p><h3 id="3-伪私有属性和伪私有方法"><a href="#3-伪私有属性和伪私有方法" class="headerlink" title="3.伪私有属性和伪私有方法"></a>3.伪私有属性和伪私有方法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Women</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">def</span> <span class="token function">__secret</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'我的名字是{self.name}，年龄是{self.__age}'</span><span class="token punctuation">)</span>xiaomei <span class="token operator">=</span> Women<span class="token punctuation">(</span><span class="token string">'小美'</span><span class="token punctuation">)</span>xiaomei<span class="token punctuation">.</span>_Women__secret<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>xiaomei<span class="token punctuation">.</span>_Women__age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528174708148.png" alt="image-20210528174708148"></p><ul><li>当定义一个私有属性时，如__age，python会将它转换为_Women__age，所有我们可以使用xiaomei._Women__age来访问私有属性。同理，私有方法也是一样。</li></ul><h3 id="8-继承"><a href="#8-继承" class="headerlink" title="8.继承"></a>8.继承</h3><h3 id="1-单继承"><a href="#1-单继承" class="headerlink" title="1.单继承"></a>1.单继承</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'吃'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'喝'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'跑'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'睡'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪叫'</span><span class="token punctuation">)</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>drink<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面的代码中，我们并没有在Dog类中定义eat、drink、run、sleep，但却可以调用，这是因为Dog类继承了Animal的方法。</li></ul><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528175658518.png" alt="image-20210528175658518"></p><h3 id="3-继承的传递性"><a href="#3-继承的传递性" class="headerlink" title="3.继承的传递性"></a>3.继承的传递性</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'吃'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'喝'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'跑'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'睡'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪叫'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianQuan</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我会飞'</span><span class="token punctuation">)</span>wangcai <span class="token operator">=</span> XiaoTianQuan<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>eat<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>drink<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai<span class="token punctuation">.</span>fly<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上面的程序中Dog类继承了Animal类，XiaoTianQuan类继承了Dog类，这样XiaoTianQuan类就拥有了Animal类和Dog类的所有属性和方法。</li></ul><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528180244751.png" alt="image-20210528180244751"></p><h3 id="4-方法的重写"><a href="#4-方法的重写" class="headerlink" title="4.方法的重写"></a>4.方法的重写</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'吃'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'喝'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'跑'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'睡'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪叫'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianQuan</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我会飞'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'叫得跟普通狗不一样'</span><span class="token punctuation">)</span>xtq <span class="token operator">=</span> XiaoTianQuan<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>虽然父类中已经定义了bark方法，但是在XiaoTianQuan类中又重新定义了一个bark方法，当对象调用法法时，会调用自身类的方法。</li></ul><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528191518111.png" alt="image-20210528191518111"></p><h3 id="5-扩展父类方法，super-对象调用父类方法"><a href="#5-扩展父类方法，super-对象调用父类方法" class="headerlink" title="5.扩展父类方法，super()对象调用父类方法"></a>5.扩展父类方法，super()对象调用父类方法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'吃'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'喝'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'跑'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'睡'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪叫'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianQuan</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我会飞'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'叫得跟普通狗不一样'</span><span class="token punctuation">)</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq <span class="token operator">=</span> XiaoTianQuan<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>super().bark()调用父类的方法</li></ul><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528191952131.png" alt="image-20210528191952131"></p><h3 id="6-使用父类名调用父类方法"><a href="#6-使用父类名调用父类方法" class="headerlink" title="6.使用父类名调用父类方法"></a>6.使用父类名调用父类方法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'吃'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">drink</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'喝'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'跑'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">sleep</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'睡'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'汪汪叫'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianQuan</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我会飞'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">bark</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'叫得跟普通狗不一样'</span><span class="token punctuation">)</span>        Dog<span class="token punctuation">.</span>bark<span class="token punctuation">(</span>self<span class="token punctuation">)</span>xtq <span class="token operator">=</span> XiaoTianQuan<span class="token punctuation">(</span><span class="token punctuation">)</span>xtq<span class="token punctuation">.</span>bark<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Dog.bark(self)即使用父类名调用父类方法</li></ul><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528192745016.png" alt="image-20210528192745016"></p><h2 id="8-父类的私有属性和方法"><a href="#8-父类的私有属性和方法" class="headerlink" title="8.父类的私有属性和方法"></a>8.父类的私有属性和方法</h2><h3 id="1-父类的私有属性和方法"><a href="#1-父类的私有属性和方法" class="headerlink" title="1.父类的私有属性和方法"></a>1.父类的私有属性和方法</h3><ul><li>在子类中<strong>不能</strong>直接调用父类的<strong>私有属性和私有方法</strong></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num1 <span class="token operator">=</span> <span class="token number">100</span>        self<span class="token punctuation">.</span>__num2 <span class="token operator">=</span> <span class="token number">200</span>    <span class="token keyword">def</span> <span class="token function">__test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'这是A类的私有方法，{self.num1},{self.__num2}'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__num2<span class="token punctuation">,</span>self<span class="token punctuation">.</span>__test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528193738902.png" alt="image-20210528193738902"></p><h3 id="2-通过父类的共有方法间接访问父类的私有方法和属性"><a href="#2-通过父类的共有方法间接访问父类的私有方法和属性" class="headerlink" title="2.通过父类的共有方法间接访问父类的私有方法和属性"></a>2.通过父类的共有方法间接访问父类的私有方法和属性</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num1 <span class="token operator">=</span> <span class="token number">100</span>        self<span class="token punctuation">.</span>__num2 <span class="token operator">=</span> <span class="token number">200</span>    <span class="token keyword">def</span> <span class="token function">__test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'这是A类的私有方法，{self.num1},{self.__num2}'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'私有方法:{self.__num2}'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'共有属性:{self.num1}'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以通过父类的共有方法访问父类属性和调用父类方法</li></ul><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528194216014.png" alt="image-20210528194216014"></p><h2 id="9-多继承"><a href="#9-多继承" class="headerlink" title="9.多继承"></a>9.多继承</h2><h3 id="1-多继承"><a href="#1-多继承" class="headerlink" title="1.多继承"></a>1.多继承</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'test方法'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'demo方法'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>c <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多继承使子类继承所有父类的所有属性和方法。</li></ul><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528194523287.png" alt="image-20210528194523287"></p><ul><li>若继承的多个类中的方法有重名的情况，会调用存在同名的继承的类的第一个。</li></ul><h3 id="2-MRO方法搜索顺序"><a href="#2-MRO方法搜索顺序" class="headerlink" title="2.MRO方法搜索顺序"></a>2.MRO方法搜索顺序</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A----test方法'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A----demo方法'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B----test方法'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B----demo方法'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 继承A,B类</span>    <span class="token keyword">pass</span>c <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span>__mro__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>print(C.<strong>mro</strong>)打印一个类的MRO</p><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528195505628.png" alt="image-20210528195505628"></p><ul><li>输出了一个元组，这个元组代表当对象执行一个属性或者方法时，调用的顺序，先是在自己类中查找，找不到再去第一个父类，接着第二个。</li></ul><h3 id="3-super-函数-调用父类的构造方法"><a href="#3-super-函数-调用父类的构造方法" class="headerlink" title="3.super()函数:调用父类的构造方法"></a>3.super()函数:调用父类的构造方法</h3><blockquote><p>使用super()函数，但如果涉及多继承，该函数只能调用第一个直接父类的构造方法。</p><p>Super().__init__会调用第一个父类的构造方法。</p><p>那如果要调用多个父类的构造方法该如何实现呢？只需要父类名.__init__(self)即可实现</p></blockquote><h3 id="4-新式类和经典类"><a href="#4-新式类和经典类" class="headerlink" title="4.新式类和经典类"></a>4.新式类和经典类</h3><blockquote><p><code>object</code> 是 <code>Python</code> 为所有对象提供的 <strong>基类</strong>，提供有一些内置的属性和方法，可以使用 <code>dir</code> 函数查看</p></blockquote><ul><li><p><strong>新式类</strong>：以 <code>object</code> 为基类的类，<strong>推荐使用</strong></p></li><li><p><strong>经典类</strong>：不以 <code>object</code> 为基类的类，<strong>不推荐使用</strong></p></li><li><p>在 <code>Python 3.x</code> 中定义类时，如果没有指定父类，会 <strong>默认使用</strong> <code>object</code> 作为该类的 <strong>基类</strong> —— <code>Python 3.x</code> 中定义的类都是 <strong>新式类</strong></p></li><li><p>在 <code>Python 2.x</code> 中定义类时，如果没有指定父类，则不会以 <code>object</code> 作为 <strong>基类</strong></p></li></ul><blockquote><p><strong>新式类</strong> 和 <strong>经典类</strong> 在多继承时 —— <strong>会影响到方法的搜索顺序</strong></p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>dir<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'__class__'</span><span class="token punctuation">,</span> <span class="token string">'__delattr__'</span><span class="token punctuation">,</span> <span class="token string">'__dict__'</span><span class="token punctuation">,</span> <span class="token string">'__dir__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__eq__'</span><span class="token punctuation">,</span> <span class="token string">'__format__'</span><span class="token punctuation">,</span> <span class="token string">'__ge__'</span><span class="token punctuation">,</span> <span class="token string">'__getattribute__'</span><span class="token punctuation">,</span> <span class="token string">'__gt__'</span><span class="token punctuation">,</span> <span class="token string">'__hash__'</span><span class="token punctuation">,</span> <span class="token string">'__init__'</span><span class="token punctuation">,</span> <span class="token string">'__init_subclass__'</span><span class="token punctuation">,</span> <span class="token string">'__le__'</span><span class="token punctuation">,</span> <span class="token string">'__lt__'</span><span class="token punctuation">,</span> <span class="token string">'__module__'</span><span class="token punctuation">,</span> <span class="token string">'__ne__'</span><span class="token punctuation">,</span> <span class="token string">'__new__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce__'</span><span class="token punctuation">,</span> <span class="token string">'__reduce_ex__'</span><span class="token punctuation">,</span> <span class="token string">'__repr__'</span><span class="token punctuation">,</span> <span class="token string">'__setattr__'</span><span class="token punctuation">,</span> <span class="token string">'__sizeof__'</span><span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'__weakref__'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这些都是基类object自带的方法。</p><h2 id="10-多态"><a href="#10-多态" class="headerlink" title="10.多态"></a>10.多态</h2><h3 id="1-多态的概念"><a href="#1-多态的概念" class="headerlink" title="1.多态的概念"></a>1.多态的概念</h3><ul><li><p><strong>多态</strong>*：不同的子类对象条用相同的父类方法，产生不同的执行结果</p><ul><li><strong>多态</strong>可以增加代码的灵活度</li><li>以<strong>继承</strong>和<strong>重写父类方法</strong>为前提</li><li>是调用方法的技巧，<strong>不会影响到类的内部设计</strong></li></ul></li></ul><h3 id="2-实例"><a href="#2-实例" class="headerlink" title="2.实例"></a>2.实例</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.name}蹦蹦跳跳的玩耍！'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianQuan</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.name}飞到天上去玩耍！'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>      self<span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">def</span> <span class="token function">geme_with_dog</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>dog<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.name}和{dog.name}快乐的玩耍！'</span><span class="token punctuation">)</span>      dog<span class="token punctuation">.</span>game<span class="token punctuation">(</span><span class="token punctuation">)</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">'旺财'</span><span class="token punctuation">)</span>wangcai1 <span class="token operator">=</span> XiaoTianQuan<span class="token punctuation">(</span><span class="token string">'飞天旺财'</span><span class="token punctuation">)</span>xiaoming <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>geme_with_dog<span class="token punctuation">(</span>wangcai<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>geme_with_dog<span class="token punctuation">(</span>wangcai1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看到针对传入不同的对象输出的结果是不一样的。</li></ul><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528210551765.png" alt="image-20210528210551765"></p><h2 id="11-类属性"><a href="#11-类属性" class="headerlink" title="11.类属性"></a>11.类属性</h2><h3 id="1-类属性的概念"><a href="#1-类属性的概念" class="headerlink" title="1.类属性的概念"></a>1.类属性的概念</h3><blockquote><p>Python中万物皆对象，类也是一个对象，class AAA()定义的称为类对象</p><p>用类创建的对象叫做实例对象。</p></blockquote><ul><li>类属性就是给类对象中定义的属性</li><li>通常用来记录与这个类相关的特性</li><li>类属性不会用于记录具体对象的特此</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Tool</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义类属性</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        Tool<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>tool1 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'斧头'</span><span class="token punctuation">)</span>tool2 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'榔头'</span><span class="token punctuation">)</span>tool3 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'水桶'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Tool<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528220426169.png" alt="image-20210528220426169"></p><h3 id="2-类属性的查找机制"><a href="#2-类属性的查找机制" class="headerlink" title="2.类属性的查找机制"></a>2.类属性的查找机制</h3><blockquote><p>访问类属性可以通过 <strong>类名.类属性</strong> 的方，在一定的情况下也可以通过 <strong>对象名.类属性</strong>，程序是如何做到的呢？</p><p>当实例对象访问某个属性时，会先查找是否有这个实例属性，如果找不到就会查找类属性是否有这个属性。</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Tool</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义类属性</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        Tool<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>tool1 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'斧头'</span><span class="token punctuation">)</span>tool2 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'榔头'</span><span class="token punctuation">)</span>tool3 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'水桶'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Tool<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tool1<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528221045134.png" alt="image-20210528221045134"></p><p>运行结果表示: <strong>属性名.类属性</strong> 在一定的情况下是可以实现的。</p><h2 id="12-类方法"><a href="#12-类方法" class="headerlink" title="12.类方法"></a>12.类方法</h2><blockquote><ul><li><p>类方法就是针对类对象定义的方法</p></li><li><p>在类方法内部可以直接访问类属性或者调用其他的类方法</p></li><li><p>类方法需要用装饰器修饰<code>@classmethod</code>来标识，告诉解释器这是一个类方法</p></li><li><p>类方法的第一个参数是cls</p><ul><li>由哪一个类调用的方法，方法内的<code>cls</code>就是哪一个类的引用</li><li>这个参数和实例方法的第一个参数是self类似</li></ul></li><li><p>通过<strong>类名.类方法名</strong>调用，调用方法时，不需要传递cls参数</p></li><li><p>在方法内部</p><ul><li>可以通过cls.访问类的属性</li><li>也可以通过cls.调用其他的类方法</li></ul></li></ul></blockquote><ul><li>语法：</li></ul><pre class="line-numbers language-python"><code class="language-python">@classmethod<span class="token keyword">def</span> 类方法名<span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>实例：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Tool</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义类属性</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        Tool<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">show_tool_count</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'工具对象的数量:'</span><span class="token punctuation">,</span>cls<span class="token punctuation">.</span>count<span class="token punctuation">)</span>tool1 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'斧头'</span><span class="token punctuation">)</span>tool2 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'榔头'</span><span class="token punctuation">)</span>tool3 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'水桶'</span><span class="token punctuation">)</span>Tool<span class="token punctuation">.</span>show_tool_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528232047060.png" alt="image-20210528232047060"></p><h2 id="13-静态方法"><a href="#13-静态方法" class="headerlink" title="13.静态方法"></a>13.静态方法</h2><blockquote><ul><li>静态方法<ul><li>既不需要访问实例属性或者调用实例方法</li><li>也不需要访问类属性或者调用类方法</li></ul></li></ul></blockquote><ul><li>语法：</li></ul><pre class="line-numbers language-python"><code class="language-python">@staticmethod<span class="token keyword">def</span> 静态方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>实例：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Tool</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义类属性</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        Tool<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">show_tool_count</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'工具对象的数量:'</span><span class="token punctuation">,</span>cls<span class="token punctuation">.</span>count<span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">static_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是一个静态方法'</span><span class="token punctuation">)</span>tool1 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'斧头'</span><span class="token punctuation">)</span>tool2 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'榔头'</span><span class="token punctuation">)</span>tool3 <span class="token operator">=</span> Tool<span class="token punctuation">(</span><span class="token string">'水桶'</span><span class="token punctuation">)</span>Tool<span class="token punctuation">.</span>show_tool_count<span class="token punctuation">(</span><span class="token punctuation">)</span>tool1<span class="token punctuation">.</span>static_method<span class="token punctuation">(</span><span class="token punctuation">)</span>Tool<span class="token punctuation">.</span>static_method<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态方法可以不用创建对象就可以调用，即用类名直接访问。</li></ul><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528232511763.png" alt="image-20210528232511763"></p><h2 id="14-方法综合-案例分析"><a href="#14-方法综合-案例分析" class="headerlink" title="14.方法综合-案例分析"></a>14.方法综合-案例分析</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Game</span><span class="token punctuation">:</span>    top_score <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 创建类属性</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>player_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 构造函数</span>        self<span class="token punctuation">.</span>player_name <span class="token operator">=</span> player_name    @staticmethod        <span class="token comment" spellcheck="true"># 创建静态方法</span>    <span class="token keyword">def</span> <span class="token function">show_help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'帮助信息:让僵尸进入大门！'</span><span class="token punctuation">)</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">show_top_score</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建类方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'历史最高分为:'</span><span class="token punctuation">,</span>cls<span class="token punctuation">.</span>top_score<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start_game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建实例方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'{self.player_name}准备好，要开始游戏咯'</span><span class="token punctuation">)</span>Game<span class="token punctuation">.</span>show_help<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 通过类名调用静态方法</span>Game<span class="token punctuation">.</span>show_top_score<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 调用类方法</span>user1 <span class="token operator">=</span> Game<span class="token punctuation">(</span><span class="token string">'葫芦娃'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建实例对象</span>user1<span class="token punctuation">.</span>start_game<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 调用实例方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210528233538393.png" alt="image-20210528233538393"></p><h2 id="15-new-方法"><a href="#15-new-方法" class="headerlink" title="15.__new__方法"></a>15.__new__方法</h2><blockquote><ul><li>使用类名()创建对象时，Python解释器首先会调用__new__方法为对象分配空间。</li><li>__new__是一个有object基类提供的内置的静态方法。<ul><li>在内存中为对象分配空间</li><li>返回对象的引用</li></ul></li><li>Python的解释器获得对象的引用后，将引用作为第一个参数，传递给__init__方法。</li></ul></blockquote><blockquote><p>重写__new__方法的代码非常固定。</p></blockquote><ul><li>重写__new__方法一定要 return super().__new__(cls)</li><li>否则Python的解释器得不到分配空间的对象引用，就不会调用初始化方法。</li><li>注意:__new__是一个静态方法，在调用时需要主动传递cls参数</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是new方法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'这是初始化方法！'</span><span class="token punctuation">)</span>mp3 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mp3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210529111034327.png" alt="image-20210529111034327"></p><p>new方法重写格式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>  object<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>__new__至少要有一个参数cls，代表要实例化的类，此参数在实例化时由Python解释器自动提供；**__new__必须要有返回值，返回实例化出来的实例，可以return父类new出来的实例，或直接是object的new出来的实例。**</p></li><li><p>object.<strong>new</strong>(cls)执行完返回的结果为Person类的实例对象</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__init__"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"张三"</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__new__'</span><span class="token punctuation">)</span>        ob <span class="token operator">=</span> object<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#ob为Person实例对象</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span>        <span class="token keyword">return</span> obp1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210529111609191.png" alt="image-20210529111609191"></p><ul><li>p1=Person()该语句主要做了以下工作：<br><strong>首先调用Person的__new__方法，该方法通过object.__new__(cls)创建了Person实例对象，并返回。最后调用了该Person实例对象的__init__方法。</strong></li></ul><ul><li>object.<strong>new</strong>()方法接收的参数是类对象，可以不是当前类对象cls，如果将cls换成其他类对象会发生什么呢，看下面代码的运行结果：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"旺财"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Dog.__init__"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"张三"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Person.__init__"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'__new__'</span><span class="token punctuation">)</span>        ob <span class="token operator">=</span> object<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Dog<span class="token punctuation">)</span>        <span class="token keyword">return</span> obp1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210529114107821.png" alt="image-20210529114107821"></p><ul><li>由结果得知p1是Dog类的实例，但是有个问题，Python解释器没有自动执行__init__方法，由结果可以看出并没有打印字符串__init__。<strong>若__new__()没有正确返回当前类cls的实例，那__init__()将不会被调用。</strong></li></ul><h2 id="16-单例设计模式"><a href="#16-单例设计模式" class="headerlink" title="16.单例设计模式"></a>16.单例设计模式</h2><blockquote><p>单例 - - 让类创建的对象，在系统中只有唯一一个实例</p><ol><li>定义一个类属性，初始值是None，用于记录单例对象的引用</li><li>重写new方法</li><li>如果类属性is none ，调用父类方法分配空间，并在类属性中记录结果</li><li>返回类属性中记录的对象引用</li></ol></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">:</span>    instance <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>instance <span class="token keyword">is</span> None<span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> namem1 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token string">'m1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>m2 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token string">'m2'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210529115728934.png" alt="image-20210529115728934"></p><ul><li>根据运行结果可以得出，对象的内存地址都是一样的，并没有分配多余空间。</li><li>但是初始化方法执行了多次。</li></ul><blockquote><p>若想让初始化方法只执行一次：</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">:</span>    instance <span class="token operator">=</span> None    init_flag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>instance <span class="token keyword">is</span> None<span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> MusicPlayer<span class="token punctuation">.</span>init_flag<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'初始化播放器'</span><span class="token punctuation">)</span>            MusicPlayer<span class="token punctuation">.</span>init_flag <span class="token operator">=</span> <span class="token boolean">True</span>m1 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token string">'m1'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span>m2 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token string">'m2'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210529120137952.png" alt="image-20210529120137952"></p><ul><li>只需在类中再创建一个类属性，在初始化方法中根据这个类属性的值判断是否执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫入门</title>
      <link href="year/11/18/python-pa-chong-ru-men/"/>
      <url>year/11/18/python-pa-chong-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫"><a href="#Python爬虫" class="headerlink" title="Python爬虫"></a>Python爬虫</h1><p>笔记参考自视频连接：<a href="https://www.bilibili.com/video/BV1i54y1h75W?p=16&amp;share_source=copy_web">https://www.bilibili.com/video/BV1i54y1h75W?p=16&amp;share_source=copy_web</a></p><h2 id="一、第一个爬虫小程序"><a href="#一、第一个爬虫小程序" class="headerlink" title="一、第一个爬虫小程序"></a>一、第一个爬虫小程序</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenurl <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span>resp <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 打开网址</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'baidu.html'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将网页源代码写入到文件</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'写入完成！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>爬取百度源代码并保存到本地。</li></ul><h2 id="二、web请求过程分析"><a href="#二、web请求过程分析" class="headerlink" title="二、web请求过程分析"></a>二、web请求过程分析</h2><ul><li><p>服务器渲染：在服务器那边直接把数据和html整合在一起。统一返回给浏览器</p><ul><li>在页面源代码中能看到数据</li></ul></li><li><p>客户端渲染：第一次请求只要一个html骨架，第二次请求拿到数据，进行数据展示。</p><ul><li>在页面源代码中，看不到数据</li></ul></li></ul><blockquote><p>熟练使用抓包工具</p></blockquote><h2 id="三、HTTP协议"><a href="#三、HTTP协议" class="headerlink" title="三、HTTP协议"></a>三、HTTP协议</h2><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Blog_img/image-20210606201117931.png" alt="image-20210606201117931"></p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Blog_img/image-20210606201427763.png" alt="image-20210606201427763"></p><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Blog_img/image-20210606201628569.png" alt="image-20210606201628569"></p><p>请求方式：</p><p>​    GET：显示提交</p><p>​    POST：隐示提交</p><h2 id="四、requests模块"><a href="#四、requests模块" class="headerlink" title="四、requests模块"></a>四、requests模块</h2><ul><li>第一个爬虫</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/6 19:46</span><span class="token comment" spellcheck="true"># @File : 1.第一个爬虫程序.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> urlopenurl <span class="token operator">=</span> <span class="token string">'http://www.baidu.com'</span>resp <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 打开网址</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'baidu.html'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>   f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将网页源代码写入到文件</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'写入完成！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>requests模块入门1</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requestsquery <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入你想搜索的明星：'</span><span class="token punctuation">)</span>url <span class="token operator">=</span> f<span class="token string">'https://www.sogou.com/web?query={query}'</span>     <span class="token comment" spellcheck="true"># 要爬取的网址</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36'</span><span class="token punctuation">}</span>       <span class="token comment" spellcheck="true"># UA伪装</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 发送get请求，指定url和heards</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取页面源代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>requests模块入门2</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/6 21:49</span><span class="token comment" spellcheck="true"># @File : 3.requests模块1.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'https://fanyi.baidu.com/sug'</span>s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入你要翻译的英文单词:'</span><span class="token punctuation">)</span>dat <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'kw'</span><span class="token punctuation">:</span> s<span class="token punctuation">}</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span>                  <span class="token string">'Chrome/90.0.4430.212 Safari/537.36 '</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 发送post请求</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>dat<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 写入设置</span>json <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印获取到的代码转成json格式</span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 切片获取我们想获取的东西</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>requests模块入门3</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/7 16:43</span><span class="token comment" spellcheck="true"># @File : 4.requests模块2.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/j/chart/top_list'</span>heard <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36'</span><span class="token punctuation">}</span>param <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'24'</span><span class="token punctuation">,</span>    <span class="token string">'interval_id'</span><span class="token punctuation">:</span> <span class="token string">'100:90'</span><span class="token punctuation">,</span>    <span class="token string">'action'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'start'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">'limit'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># 指定参数</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>param<span class="token punctuation">,</span>headers<span class="token operator">=</span>heard<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 访问网页</span>body<span class="token operator">=</span>resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取网页json格式数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>body<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 关闭连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="五、数据解析"><a href="#五、数据解析" class="headerlink" title="五、数据解析"></a>五、数据解析</h2><p><a href="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Blog_img/image-20210607170818247.png">https://cdn.jsdelivr.net/gh/zhaotaogit/images/Blog_img/image-20210607170818247.png</a></p><h2 id="1-re解析-正则表达式"><a href="#1-re解析-正则表达式" class="headerlink" title="1.re解析-正则表达式"></a>1.re解析-正则表达式</h2><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Blog_img/image-20210607170936886.png" alt="image-20210607170936886"></p><ul><li>开源中国：<a href="https://www.oschina.net/">https://www.oschina.net/</a><ul><li>工具：<a href="https://tool.oschina.net/">https://tool.oschina.net/</a></li></ul></li></ul><ul><li><p>元字符</p><table><thead><tr><th><code>元字符</code></th><th><code>匹配内容</code></th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\n</td><td>匹配一个换行符</td></tr><tr><td>\t</td><td>匹配一个制表符</td></tr><tr><td>\b</td><td>匹配一个单词的结尾</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结尾</td></tr><tr><td>\W</td><td><code>匹配非字母或数字或下划线</code></td></tr><tr><td>\D</td><td><code>匹配非数字</code></td></tr><tr><td>\S</td><td><code>匹配非空白符</code></td></tr><tr><td>a|b</td><td><code>匹配字符a或字符b</code></td></tr><tr><td>()</td><td><code>匹配括号内的表达式，也表示一个组</code></td></tr><tr><td>[…]</td><td><code>匹配字符组中的字符</code></td></tr><tr><td>[^…]</td><td><code>匹配除了字符组中字符的所有字符</code></td></tr></tbody></table></li><li><p>量词</p><table><thead><tr><th><code>量词</code></th><th><code>用法说明</code></th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table></li><li><p>贪婪匹配</p><p>贪婪匹配：在满足匹配时，匹配尽可能长的字符串，默认情况下，采用贪婪匹配</p></li></ul><table><thead><tr><th align="center"><code>正则</code></th><th><code>说明</code></th></tr></thead><tbody><tr><td align="center">.*</td><td>默认为贪婪匹配模式，会匹配尽量长的字符串</td></tr><tr><td align="center">.*?</td><td>加上？为将贪婪匹配模式转为非贪婪匹配模式，会匹配尽量短的字符串</td></tr></tbody></table><h2 id="二、re模块的使用"><a href="#二、re模块的使用" class="headerlink" title="二、re模块的使用"></a>二、re模块的使用</h2><blockquote><p> 安装模块:pip install requests</p></blockquote><h3 id="1-re模块的匹配使用"><a href="#1-re模块的匹配使用" class="headerlink" title="1.re模块的匹配使用"></a>1.re模块的匹配使用</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/7 17:49</span><span class="token comment" spellcheck="true"># @File : 5.re模块.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> re<span class="token comment" spellcheck="true"># findall 匹配字符串中所有符合正则表达式的内容</span><span class="token comment" spellcheck="true"># r防止转义</span>lst <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span><span class="token string">'我的电话是10086,你的电话号码是10010'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># finditer 匹配字符串中所有符合正则表达式的内容,返回结果是迭代器，从迭代器中获取内容需要group()</span>lst <span class="token operator">=</span> re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span><span class="token string">'我的电话是10086,你的电话号码是10010'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> lst<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># search 匹配字符串中所有符合正则表达式的内容,返回结果是match对象,获取数据需要group(),找到一个结果就返回</span>lst <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span><span class="token string">'我的电话是10086,你的电话号码是10010'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># match 从头开始匹配，匹配到一个就返回</span>lst <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">,</span><span class="token string">'10086,你的电话号码是10010'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 预加载正则表达式,多个地方可以使用</span>obj <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">)</span>lst <span class="token operator">=</span> obj<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'10086,你的电话号码是10010'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-re模块匹配想要的东西并输出"><a href="#2-re模块匹配想要的东西并输出" class="headerlink" title="2.re模块匹配想要的东西并输出"></a>2.re模块匹配想要的东西并输出</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/7 18:07</span><span class="token comment" spellcheck="true"># @File : 6.re模块1.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> res <span class="token operator">=</span><span class="token triple-quoted-string string">'''&lt;div class='jay'>&lt;span id='1'>郭麒麟&lt;/span>&lt;/div>&lt;div class='jj'>&lt;span id='2'>宋铁&lt;/span>&lt;/div>&lt;div class='jolin'>&lt;span id='3'>大聪明&lt;/span>&lt;/div>&lt;div class='sylar'>&lt;span id='4'>范思哲&lt;/span>&lt;/div>&lt;div class='tory'>&lt;span id='5'>胡说八道&lt;/span>&lt;/div>'''</span>obj<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"&lt;div class='.*?'>&lt;span id='\d+'>.*?&lt;/span>&lt;/div>"</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>ret <span class="token operator">=</span> obj<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ret<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (?P&lt;分组名字>正则) 可以单独从正则匹配的内容中进一步提取内容</span>obj<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"&lt;div class='.*?'>&lt;span id='(?P&lt;id>\d+)'>(?P&lt;wahaha>.*?)&lt;/span>&lt;/div>"</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>ret <span class="token operator">=</span> obj<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ret<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'wahaha'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-re模块爬取豆瓣排行榜250信息"><a href="#3-re模块爬取豆瓣排行榜250信息" class="headerlink" title="3.re模块爬取豆瓣排行榜250信息"></a>3.re模块爬取豆瓣排行榜250信息</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/7 18:38</span><span class="token comment" spellcheck="true"># @File : 7.re模块2.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment" spellcheck="true"># url = f'https://movie.douban.com/top250'</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># headers = {</span><span class="token comment" spellcheck="true">#     'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36'</span><span class="token comment" spellcheck="true"># }</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># resp = requests.get(url=url, headers=headers)</span><span class="token comment" spellcheck="true"># body = resp.text</span><span class="token comment" spellcheck="true"># print(body.text)</span><span class="token comment" spellcheck="true"># obj = re.compile(r'&lt;li>.*?&lt;div class="item">.*?&lt;span class="title">(?P&lt;name>.*?)'</span><span class="token comment" spellcheck="true">#                  r'&lt;/span>.*?&lt;p class="">.*?导演: (?P&lt;director_zh>.*?) (?P&lt;director_en>[a-zA-Z].*?[a-zA-Z])&amp;nbsp;.*?主演: (?P&lt;Starring>.*?)/.*?&lt;br>.*?(?P&lt;year>.*?)&amp;nbsp;', re.S)</span><span class="token comment" spellcheck="true"># result = obj.finditer(body)</span><span class="token comment" spellcheck="true"># s=0</span><span class="token comment" spellcheck="true"># for i in result:</span><span class="token comment" spellcheck="true">#     print(i.group('name'),i.group('director_zh').strip(),i.group('director_en').strip(),i.group('Starring').strip(),i.group('year').strip(),sep='\t\t')</span><span class="token comment" spellcheck="true">#     s+=1</span><span class="token comment" spellcheck="true"># print(s)x</span><span class="token comment" spellcheck="true"># for i in result:</span><span class="token comment" spellcheck="true">#     print(i.group('director_en'))</span>obj <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;li>.*?&lt;div class="item">.*?&lt;span class="title">(?P&lt;name>.*?)'</span>                 r<span class="token string">'&lt;/span>.*?&lt;p class="">.*?导演:(?P&lt;director>.*?)&amp;nbsp.*?主演: (?P&lt;Starring>.*?).{2,4}&lt;br>(?P&lt;year>.*?)&amp;nbsp.*?&lt;span class="rating_num" property="v:average">(?P&lt;score>.*?)'</span>                 r<span class="token string">'&lt;/span>.*?&lt;span>(?P&lt;num>.*?)人评价.*?&lt;/span>'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># result = obj.finditer(body)</span><span class="token comment" spellcheck="true"># dit = {'名称': [], '年份': [], '评分': [], '评价人数': [], }</span><span class="token comment" spellcheck="true"># for i in result:</span><span class="token comment" spellcheck="true">#     dit['名称'].append(i.group('name'))</span><span class="token comment" spellcheck="true">#     dit['年份'].append(i.group('year').strip())</span><span class="token comment" spellcheck="true">#     dit['评分'].append(i.group('score'))</span><span class="token comment" spellcheck="true">#     dit['评价人数'].append(i.group('num'))</span><span class="token comment" spellcheck="true">#     dit = i.groupdict()</span><span class="token comment" spellcheck="true"># dit['year'] = dit['year'].strip()</span><span class="token comment" spellcheck="true"># print(dit)</span><span class="token comment" spellcheck="true"># print(dit)</span><span class="token comment" spellcheck="true"># data = pd.DataFrame(dit).drop([])</span><span class="token comment" spellcheck="true"># print(data)</span><span class="token comment" spellcheck="true"># data.to_csv('db.csv',index=False,encoding='gbk')</span><span class="token comment" spellcheck="true"># resp.close()</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36'</span><span class="token punctuation">}</span>dit <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'名称'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'导演'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'主演'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'年份'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'评分'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'评价人数'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> f<span class="token string">'https://movie.douban.com/top250?start={start}&amp;filter='</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    body <span class="token operator">=</span> resp<span class="token punctuation">.</span>text    result <span class="token operator">=</span> obj<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>body<span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> result<span class="token punctuation">:</span>        dit<span class="token punctuation">[</span><span class="token string">'名称'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'导演'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'director'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'主演'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'Starring'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'年份'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'评分'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'score'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'评价人数'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'num'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    start <span class="token operator">+=</span> <span class="token number">25</span>resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dit<span class="token punctuation">)</span>data<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'db_all-250.csv'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># utf-8-sig保证保存的csv不乱吗</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-re模块爬取电影天堂信息"><a href="#4-re模块爬取电影天堂信息" class="headerlink" title="4.re模块爬取电影天堂信息"></a>4.re模块爬取电影天堂信息</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/7 21:22</span><span class="token comment" spellcheck="true"># @File : 8.re模块3.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddomain <span class="token operator">=</span> <span class="token string">'https://www.dy2018.com'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>obj1 <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"021必看热片.*?&lt;ul>(?P&lt;inner_url>.*?)&lt;/ul>"</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>obj2 <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"&lt;li>&lt;a href='(?P&lt;inner>.*?)'"</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>obj3 <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'◎片　　名　(?P&lt;name>.*?)(&lt;br />|&lt;/p>).*?代(?P&lt;year>.*?)(&lt;br />|&lt;/p>).*?地(?P&lt;address>.*?)(&lt;br />|&lt;/p>).*?别(?P&lt;category>.*?)(&lt;br />|&lt;/p>)'</span>                  <span class="token string">'.*?言(?P&lt;lang>.*?)(&lt;br />|&lt;/p>).*?幕(?P&lt;subtitle>.*?)(&lt;br />|&lt;/p>).*?期(?P&lt;time>.*?)(&lt;br />|&lt;/p>).*?豆瓣评分(?P&lt;db_score>.*?)(&lt;br />|&lt;/p>).*?寸(?P&lt;size>.*?)(&lt;br />|&lt;/p>)'</span>                  '<span class="token punctuation">.</span><span class="token operator">*</span>?小<span class="token punctuation">(</span>?P<span class="token operator">&lt;</span>pang_size<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span>?长<span class="token punctuation">(</span>?P<span class="token operator">&lt;</span>long<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span>?演<span class="token punctuation">(</span>?P<span class="token operator">&lt;</span>director<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">></span><span class="token operator">|</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token operator">*</span>?<span class="token operator">&lt;</span>td style<span class="token operator">=</span><span class="token string">"WORD-WRAP: break-word"</span> bgcolor<span class="token operator">=</span><span class="token string">"#fdfddf"</span><span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"(?P&lt;url>.*?)"</span><span class="token operator">></span>'<span class="token punctuation">,</span>                  re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>domain<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># verify=False去掉安全验证</span>resp<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gb2312'</span>  <span class="token comment" spellcheck="true"># 指定编码</span>result <span class="token operator">=</span> obj1<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> result<span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'inner_url'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> obj2<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>result<span class="token punctuation">)</span>url1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 存放子链接</span>dit <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'片名'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'年代'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'产地'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'类别'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'语言'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'字幕'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'上映日期'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'豆瓣评分'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'视频尺寸'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'文件大小'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token string">'片长'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'导演'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'链接'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> result<span class="token punctuation">:</span>    url1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>domain <span class="token operator">+</span> i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(url1)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> url1<span class="token punctuation">:</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>i<span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gb2312'</span>    <span class="token comment" spellcheck="true"># print(resp.text)</span>    result <span class="token operator">=</span> obj3<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> result<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># print(j.group('name'))</span>        dit<span class="token punctuation">[</span><span class="token string">'片名'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'年代'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'产地'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'address'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'类别'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'category'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'语言'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'lang'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'字幕'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'subtitle'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'上映日期'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'豆瓣评分'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'db_score'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'视频尺寸'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'文件大小'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'pang_size'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'片长'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'long'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'导演'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'director'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'链接'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dit<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dit<span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'dytt.csv'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、bs4模块"><a href="#三、bs4模块" class="headerlink" title="三、bs4模块"></a>三、bs4模块</h2><blockquote><p>安装模块:pip install bs4</p></blockquote><h3 id="1-爬取菜价"><a href="#1-爬取菜价" class="headerlink" title="1.爬取菜价"></a>1.爬取菜价</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/9 16:16</span><span class="token comment" spellcheck="true"># @File : 9.bs4模块.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> requests<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdurl <span class="token operator">=</span> <span class="token string">'http://www.xinfadi.com.cn/marketanalysis/0/list/1.shtml'</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(resp.text)</span>page <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 'html.parser'指定html解析器</span><span class="token comment" spellcheck="true"># find(标签，属性) 找第一个</span><span class="token comment" spellcheck="true"># find_all(标签，属性)  找全部</span><span class="token comment" spellcheck="true"># table = page.find('table',class_="hq_table")</span>table <span class="token operator">=</span> page<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'hq_table'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(table)</span>trs <span class="token operator">=</span> table<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(trs)</span>dit <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'品名'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'最低价'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'平均价'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'最高价'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'规格'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'单位'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'发布日期'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> trs<span class="token punctuation">:</span>    tds <span class="token operator">=</span> i<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(tds)</span>    dit<span class="token punctuation">[</span><span class="token string">'品名'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    dit<span class="token punctuation">[</span><span class="token string">'最低价'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    dit<span class="token punctuation">[</span><span class="token string">'平均价'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    dit<span class="token punctuation">[</span><span class="token string">'最高价'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    dit<span class="token punctuation">[</span><span class="token string">'规格'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    dit<span class="token punctuation">[</span><span class="token string">'单位'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>    dit<span class="token punctuation">[</span><span class="token string">'发布日期'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dit<span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'菜价.csv'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span>resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-爬取50页菜价"><a href="#2-爬取50页菜价" class="headerlink" title="2.爬取50页菜价"></a>2.爬取50页菜价</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/9 16:51</span><span class="token comment" spellcheck="true"># @File : 10.bs4模块1.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> requests<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdpag <span class="token operator">=</span> <span class="token number">1</span>dit <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'品名'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'最低价'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'平均价'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'最高价'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'规格'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'单位'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'发布日期'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> f<span class="token string">'http://www.xinfadi.com.cn/marketanalysis/0/list/{pag}.shtml'</span>    pag <span class="token operator">+=</span> <span class="token number">1</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(resp.text)</span>    page <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 'html.parser'指定html解析器</span>    <span class="token comment" spellcheck="true"># find(标签，属性) 找第一个</span>    <span class="token comment" spellcheck="true"># find_all(标签，属性)  找全部</span>    <span class="token comment" spellcheck="true"># table = page.find('table',class_="hq_table")</span>    table <span class="token operator">=</span> page<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'table'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'hq_table'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(table)</span>    trs <span class="token operator">=</span> table<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(trs)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> trs<span class="token punctuation">:</span>        tds <span class="token operator">=</span> i<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'td'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(tds)</span>        dit<span class="token punctuation">[</span><span class="token string">'品名'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'最低价'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'平均价'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'最高价'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'规格'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'单位'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>        dit<span class="token punctuation">[</span><span class="token string">'发布日期'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tds<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dit<span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'菜价50页.csv'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span>resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-优美图库图片"><a href="#3-优美图库图片" class="headerlink" title="3.优美图库图片"></a>3.优美图库图片</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/9 18:43</span><span class="token comment" spellcheck="true"># @File : 11.bs4模块2.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> oslink <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>link<span class="token punctuation">,</span><span class="token string">'图片'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 判断目录是否存在</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'https://www.umei.net/bizhitupian/weimeibizhi'</span>    <span class="token comment" spellcheck="true"># 唯美图片页面</span>url1 <span class="token operator">=</span> <span class="token string">'https://www.umei.net'</span>   <span class="token comment" spellcheck="true"># 后面用于拼接真正的图片链接</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>resp<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span> <span class="token comment" spellcheck="true"># 解决乱码</span>page <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>div <span class="token operator">=</span> page<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'TypeList'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 查找div标签且class=‘TypeList’</span>alist <span class="token operator">=</span> div<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 查找所有的a标签</span><span class="token keyword">for</span> i <span class="token keyword">in</span> alist<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 遍历所有a标签</span>    page_resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url1 <span class="token operator">+</span> i<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取a标签中的href并和url1拼接</span>    page1 <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page_resp<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对从新url获取的数据处理</span>    page_resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 关闭链接</span>    page1 <span class="token operator">=</span> page1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'ImageBody'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    img_src <span class="token operator">=</span> page1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取img标签中src的数据</span>    <span class="token comment" spellcheck="true"># print(page1)、</span>    img_resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>img_src<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取图片页面</span>    img <span class="token operator">=</span>img_resp<span class="token punctuation">.</span>content   <span class="token comment" spellcheck="true"># 拿到图片的二进制</span>    img_name <span class="token operator">=</span> img_src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># print(img_name)</span>    img_resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>img_name<span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-爬取多页优美图库图片"><a href="#4-爬取多页优美图库图片" class="headerlink" title="4.爬取多页优美图库图片"></a>4.爬取多页优美图库图片</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/9 19:59</span><span class="token comment" spellcheck="true"># @File : 12.bs4模块3.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> oslink <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'图片'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断目录是否存在</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>url0 <span class="token operator">=</span> <span class="token string">'https://www.umei.net/bizhitupian/weimeibizhi'</span>  <span class="token comment" spellcheck="true"># 唯美图片页面</span>url1 <span class="token operator">=</span> <span class="token string">'https://www.umei.net'</span>  <span class="token comment" spellcheck="true"># 后面用于拼接真正的图片链接</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 爬取20页</span>    url <span class="token operator">=</span> url0    <span class="token keyword">if</span> num <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> f<span class="token string">'index_{num}.htm'</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>  <span class="token comment" spellcheck="true"># 解决乱码</span>    page <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    div <span class="token operator">=</span> page<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'TypeList'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查找div标签且class=‘TypeList’</span>    alist <span class="token operator">=</span> div<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查找所有的a标签</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> alist<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 遍历所有a标签</span>        page_resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url1 <span class="token operator">+</span> i<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取a标签中的href并和url1拼接</span>        page1 <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page_resp<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对从新url获取的数据处理</span>        page_resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 关闭链接</span>        page1 <span class="token operator">=</span> page1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token string">'ImageBody'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        img_src <span class="token operator">=</span> page1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取img标签中src的数据</span>        <span class="token comment" spellcheck="true"># print(page1)、</span>        img_resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>img_src<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取图片页面</span>        img <span class="token operator">=</span> img_resp<span class="token punctuation">.</span>content  <span class="token comment" spellcheck="true"># 拿到图片的二进制</span>        img_name <span class="token operator">=</span> img_src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print(img_name)</span>        img_resp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完成---------'</span> <span class="token operator">+</span> img_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四、xpath解析</p><blockquote><p>xpath是在XML文档中搜索内容的一门语言</p><p>html是xml的子集</p><p>安装lxml模块</p><p>pip install lxml</p></blockquote><h3 id="1-xpath的基本使用"><a href="#1-xpath的基本使用" class="headerlink" title="1.xpath的基本使用"></a>1.xpath的基本使用</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/10 15:35</span><span class="token comment" spellcheck="true"># @File : 13.xpath解析.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreexml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;book>    &lt;id>1&lt;/id>    &lt;name>野花遍地香&lt;/name>    &lt;price>1.23&lt;/price>    &lt;nick>臭豆腐&lt;/nick>    &lt;author>        &lt;nick id="10086">周大强&lt;/nick>        &lt;nick id="10010">周芷若&lt;/nick>        &lt;nick class="joy">周杰伦&lt;/nick>        &lt;nick class="jolin">蔡依林&lt;/nick>        &lt;div>            &lt;nick>热热1&lt;/nick>        &lt;/div>    &lt;/author>    &lt;partner>        &lt;nick id="pprc">胖胖陈&lt;/nick>        &lt;nick id="ppbc">胖胖不陈&lt;/nick>    &lt;/partner>&lt;/book>"""</span>tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>XML<span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># result = tree.xpath('/book')    # /表示层级关系，第一个/表示根节点</span><span class="token comment" spellcheck="true"># result = tree.xpath('/book/name/')</span><span class="token comment" spellcheck="true"># result = tree.xpath('/book/name/text()')  # 获取book下name下的内容，text()表示获取内容</span><span class="token comment" spellcheck="true"># result = tree.xpath('/book/author/nick/text()')</span>xml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;book>    &lt;id>1&lt;/id>    &lt;name>野花遍地香&lt;/name>    &lt;price>1.23&lt;/price>    &lt;nick>臭豆腐&lt;/nick>    &lt;author>        &lt;nick id="10086">周大强&lt;/nick>        &lt;nick id="10010">周芷若&lt;/nick>        &lt;nick class="joy">周杰伦&lt;/nick>        &lt;nick class="jolin">蔡依林&lt;/nick>        &lt;div>            &lt;nick>热热1&lt;/nick>        &lt;/div>        &lt;div>            &lt;nick>热热2&lt;/nick>            &lt;div>                &lt;nick>热热3&lt;/nick>            &lt;/div>        &lt;/div>    &lt;/author>    &lt;partner>        &lt;nick id="pprc">胖胖陈&lt;/nick>        &lt;nick id="ppbc">胖胖不陈&lt;/nick>    &lt;/partner>&lt;/book>"""</span>tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>XML<span class="token punctuation">(</span>xml<span class="token punctuation">)</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/book/author//nick/text()'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># author下的所有nick的内容，//后代</span>xml <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;book>    &lt;id>1&lt;/id>    &lt;name>野花遍地香&lt;/name>    &lt;price>1.23&lt;/price>    &lt;nick>臭豆腐&lt;/nick>    &lt;author>        &lt;nick id="10086">周大强&lt;/nick>        &lt;nick id="10010">周芷若&lt;/nick>        &lt;nick class="joy">周杰伦&lt;/nick>        &lt;nick class="jolin">蔡依林&lt;/nick>        &lt;div>            &lt;nick>热热1&lt;/nick>        &lt;/div>        &lt;span>            &lt;nick>热热2&lt;/nick>        &lt;/span>    &lt;/author>    &lt;partner>        &lt;nick id="pprc">胖胖陈&lt;/nick>        &lt;nick id="ppbc">胖胖不陈&lt;/nick>    &lt;/partner>&lt;/book>"""</span>tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>XML<span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># result = tree.xpath('/book/author/*/nick/text()')   # *代表任意的，通配符</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/book//*/nick/text()'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 找出所有nick</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreetree <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./网页/b.html'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/ul/li[1]/a/text()'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取第一个li标签下a的值</span>result <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/ol/li/a[@href="dapao"]/text()'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取a标签href值为大炮的，属性的筛选</span>ol_li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/ol/li'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ol_li_list<span class="token punctuation">:</span>    result <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/text()'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 相对路径</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    result <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/@href'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取a标签下href的值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/ul/li/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取a标签下href的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-用xpath爬取猪八戒网站信息"><a href="#2-用xpath爬取猪八戒网站信息" class="headerlink" title="2.用xpath爬取猪八戒网站信息"></a>2.用xpath爬取猪八戒网站信息</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/10 20:52</span><span class="token comment" spellcheck="true"># @File : 14.xpath解析2.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdurl <span class="token operator">=</span> <span class="token string">'https://hangzhou.zbj.com/search/f/?type=new&amp;kw=saas'</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(resp.text)</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>divs <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[6]/div/div/div[2]/div[5]/div[1]/div'</span><span class="token punctuation">)</span>dit <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'标题'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'价格'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'店名'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'地址'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> divs<span class="token punctuation">:</span>    price <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/div/a[1]/div[2]/div[1]/span[1]/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        price <span class="token operator">=</span> price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'¥'</span><span class="token punctuation">)</span>    title <span class="token operator">=</span> <span class="token string">'saas'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/div/a[1]/div[2]/div[2]/p/text()'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/div/a[2]/div[1]/p[1]/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'¥'</span><span class="token punctuation">)</span>    add <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/div/a[2]/div[1]/div/span/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>add<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        add <span class="token operator">=</span> add<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    dit<span class="token punctuation">[</span><span class="token string">'标题'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>title<span class="token punctuation">)</span>    dit<span class="token punctuation">[</span><span class="token string">'价格'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>price<span class="token punctuation">)</span>    dit<span class="token punctuation">[</span><span class="token string">'店名'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    dit<span class="token punctuation">[</span><span class="token string">'地址'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>add<span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>dit<span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'猪八戒.csv'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8-sig'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、requests进阶"><a href="#四、requests进阶" class="headerlink" title="四、requests进阶"></a>四、requests进阶</h2><p><img src="D:/1学习/1笔记/Linux基础_imgs/image-20210611153420802.png" alt="image-20210611153420802"></p><h3 id="1-模拟用户登录"><a href="#1-模拟用户登录" class="headerlink" title="1.模拟用户登录"></a>1.模拟用户登录</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/11 15:40</span><span class="token comment" spellcheck="true"># @File : 16.模拟用户登录cookie.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true"># 会话</span><span class="token comment" spellcheck="true"># requests.session():维持会话,可以让我们在跨请求时保存某些参数</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 实例化session</span><span class="token comment" spellcheck="true"># 设置登录的账号密码</span><span class="token comment" spellcheck="true"># data = {</span><span class="token comment" spellcheck="true">#     'loginName': '19967338838',</span><span class="token comment" spellcheck="true">#     'password': 'HHH123456'</span><span class="token comment" spellcheck="true"># }</span><span class="token comment" spellcheck="true"># 登录</span><span class="token comment" spellcheck="true"># url = 'https://passport.17k.com/ck/user/login'    # 目标URL</span><span class="token comment" spellcheck="true"># resp = session.post(url, data=data)   # 发送请求</span><span class="token comment" spellcheck="true"># print(resp.text)  # 查看请求数据</span><span class="token comment" spellcheck="true"># print(resp.cookies) # 看cookies</span><span class="token comment" spellcheck="true"># 方法1:利用会话，获取页面数据，session会携带cookie</span><span class="token comment" spellcheck="true"># resp = session.get('https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919')</span><span class="token comment" spellcheck="true"># print(resp.json())</span><span class="token comment" spellcheck="true"># 方法2:直接指定页面url和cookie</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'GUID=0fe65282-2b49-4422-bb2a-ad91ac7798c1; sajssdk_2015_cross_new_user=1; c_channel=0; c_csc=web; Hm_lvt_9793f42b498361373512340937deb2a0=1623403531; accessToken=avatarUrl%3Dhttps%253A%252F%252Fcdn.static.17k.com%252Fuser%252Favatar%252F11%252F51%252F02%252F77610251.jpg-88x88%253Fv%253D1623397074000%26id%3D77610251%26nickname%3D%25E9%259D%2592%25E8%25A1%25AB%25E8%2590%25BD%25E6%258B%2593R%26e%3D1638974334%26s%3D1ad4e184068d6fcb; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%2277610251%22%2C%22%24device_id%22%3A%22179f9fec157b99-0f0d7871cdecd6-f7f1939-1350728-179f9fec158c5d%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E7%9B%B4%E6%8E%A5%E6%B5%81%E9%87%8F%22%2C%22%24latest_referrer%22%3A%22%22%2C%22%24latest_referrer_host%22%3A%22%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC_%E7%9B%B4%E6%8E%A5%E6%89%93%E5%BC%80%22%7D%2C%22first_id%22%3A%220fe65282-2b49-4422-bb2a-ad91ac7798c1%22%7D'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-处理防盗链，爬取梨视频文章中的视频"><a href="#2-处理防盗链，爬取梨视频文章中的视频" class="headerlink" title="2.处理防盗链，爬取梨视频文章中的视频"></a>2.处理防盗链，爬取梨视频文章中的视频</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/12 15:18</span><span class="token comment" spellcheck="true"># @File : 17.梨视频-防盗链处理.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token comment" spellcheck="true"># 本脚本用于爬取梨视频的视频,输入某个文章页面的链接，等待片刻，即在当前目录下创建’视频‘文件夹并把视频下载到本地。</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> oslink <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'视频'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断目录是否存在</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>url <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入要下载的文章视频链接:'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># url = 'https://www.pearvideo.com/video_1732010' # 带有contId的链接</span>countId <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>videoStatus <span class="token operator">=</span> f<span class="token string">'https://www.pearvideo.com/videoStatus.jsp?contId={countId}&amp;mrd=0.1269552532349294'</span>  <span class="token comment" spellcheck="true"># 抓包链接</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span> url  <span class="token comment" spellcheck="true"># 处理防盗链:'Referer': 'https://www.pearvideo.com/video_1732010'为上级链接</span><span class="token punctuation">}</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>videoStatus<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>systemTime <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'systemTime'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取时间戳</span>videoUrl <span class="token operator">=</span> resp<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'videoInfo'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'videos'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'srcUrl'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取带有时间戳的视频链接</span><span class="token comment" spellcheck="true"># print(videoUrl)</span><span class="token comment" spellcheck="true"># print(systemTime)</span>videoUrl <span class="token operator">=</span> videoUrl<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>systemTime<span class="token punctuation">,</span> f<span class="token string">'cont-{countId}'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将时间戳替换为conId，获取真正的视频连接</span>videoName <span class="token operator">=</span> videoUrl<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>videoResp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>videoUrl<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取视频链接数据</span>video <span class="token operator">=</span> videoResp<span class="token punctuation">.</span>content  <span class="token comment" spellcheck="true"># 将视频链接数据转为二进制</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>videoName<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>video<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、给爬虫提速"><a href="#六、给爬虫提速" class="headerlink" title="六、给爬虫提速"></a>六、给爬虫提速</h2><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Blog_img/image-20210613143403274.png" alt="image-20210613143403274"></p><h3 id="1-多线程"><a href="#1-多线程" class="headerlink" title="1.多线程"></a>1.多线程</h3><blockquote><p>进程是资源单位，每一个进程至少要有一个线程</p><p>线程是执行单位</p><p>启动每一个程序默认都有一个主线程</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 单线程</span><span class="token comment" spellcheck="true"># def func():</span><span class="token comment" spellcheck="true">#     for i in range(1000):</span><span class="token comment" spellcheck="true">#         print('func', i)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># if __name__ == '__main__':</span><span class="token comment" spellcheck="true">#     func()</span><span class="token comment" spellcheck="true">#     for i in range(1000):</span><span class="token comment" spellcheck="true">#         print('main', i)</span><span class="token comment" spellcheck="true"># 多线程</span><span class="token comment" spellcheck="true"># from threading import Thread</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># def func():</span><span class="token comment" spellcheck="true">#     for i in range(1000):</span><span class="token comment" spellcheck="true">#         print('func', i)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># if __name__ == '__main__':</span><span class="token comment" spellcheck="true">#     t = Thread(target=func) # 创建线程并指定任务</span><span class="token comment" spellcheck="true">#     t.start()   # 多线程状态为可以开始工作状态，具体的执行时间为CPU决定</span><span class="token comment" spellcheck="true">#     for i in range(1000):</span><span class="token comment" spellcheck="true">#         print('main', i)</span><span class="token comment" spellcheck="true"># 多线程2</span><span class="token comment" spellcheck="true"># from threading import Thread</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># class MyThread(Thread):</span><span class="token comment" spellcheck="true">#     def run(self):  # 从写run方法</span><span class="token comment" spellcheck="true">#         for i in range(1000):</span><span class="token comment" spellcheck="true">#             print('子线程', i)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># if __name__ == '__main__':</span><span class="token comment" spellcheck="true">#     t = MyThread()  # 创建线程并指定任务</span><span class="token comment" spellcheck="true">#     t.start()  # 当调用start方法时，默认会执行run方法</span><span class="token comment" spellcheck="true">#     for i in range(1000):</span><span class="token comment" spellcheck="true">#         print('主线程', i)</span><span class="token comment" spellcheck="true"># 多线程传参1</span><span class="token comment" spellcheck="true"># from threading import Thread</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># def func(num):</span><span class="token comment" spellcheck="true">#     for i in range(num):</span><span class="token comment" spellcheck="true">#         print('func', i)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># if __name__ == '__main__':</span><span class="token comment" spellcheck="true">#     t = Thread(target=func,args=(10000,))  # 创建线程并指定任务，传的参数必须是元组</span><span class="token comment" spellcheck="true">#     t.start()  # 多线程状态为可以开始工作状态，具体的执行时间为CPU决定</span><span class="token comment" spellcheck="true">#     for i in range(10000):</span><span class="token comment" spellcheck="true">#         print('main', i)</span><span class="token comment" spellcheck="true"># 多线程传参2</span><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 继承父类构造方法</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> num    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 从写run方法</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子线程'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建线程并指定任务</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 当调用start方法时，默认会执行run方法</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主线程'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-多进程"><a href="#2-多进程" class="headerlink" title="2.多进程"></a>2.多进程</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-线程池和进程池"><a href="#3-线程池和进程池" class="headerlink" title="3.线程池和进程池"></a>3.线程池和进程池</h3><blockquote><p>一次性开辟一些线程，我们用户直接给线程提交任务，线程任务的调度由线程池来完成</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/14 13:33</span><span class="token comment" spellcheck="true"># @File : 23.线程池实战.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> requests<span class="token keyword">import</span> csv<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">import</span> timestart <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'多线程_菜价.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8-sig'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>csv_write <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>f<span class="token punctuation">)</span>csv_write<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'品名'</span><span class="token punctuation">,</span> <span class="token string">'最低价'</span><span class="token punctuation">,</span> <span class="token string">'平均价'</span><span class="token punctuation">,</span> <span class="token string">'最高价'</span><span class="token punctuation">,</span> <span class="token string">'规格'</span><span class="token punctuation">,</span> <span class="token string">'单位'</span><span class="token punctuation">,</span> <span class="token string">'发布日期'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 表头</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> f<span class="token string">'http://www.xinfadi.com.cn/marketanalysis/0/list/{num}.shtml'</span>    resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>    html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    table <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[4]/div[1]/table'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    trs <span class="token operator">=</span> table<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./tr[position()>1]'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 去除表头</span>    <span class="token comment" spellcheck="true"># print(len(trs))</span>    <span class="token keyword">for</span> tr <span class="token keyword">in</span> trs<span class="token punctuation">:</span>        txt <span class="token operator">=</span> tr<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./td/text()'</span><span class="token punctuation">)</span>        txt <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'//'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\\'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> txt<span class="token punctuation">]</span>        csv_write<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">'下载完毕'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">14870</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>func<span class="token punctuation">,</span> num<span class="token operator">=</span>i<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 利用多线程爬取北京新发地菜价表格速度快了很多倍，不停的爬取页面会导致服务器高度负载，导致后面连网页也访问不了，导致爬取速度下降。</li></ul><h3 id="4-协程"><a href="#4-协程" class="headerlink" title="4.协程"></a>4.协程</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/15 15:22</span><span class="token comment" spellcheck="true"># @File : 24.协程.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># def func():</span><span class="token comment" spellcheck="true">#     print('我爱黎明')</span><span class="token comment" spellcheck="true">#     time.sleep(3)  # 让当前的线程处于阻塞状态，CPU是不为我工作</span><span class="token comment" spellcheck="true">#     print('我真的爱黎明')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># if __name__ == '__main__':</span><span class="token comment" spellcheck="true">#     func()</span><span class="token comment" spellcheck="true"># input()   等在用户输入信息时，程序属于阻塞状态</span><span class="token comment" spellcheck="true"># requests.get()    在我们请求一个url时，会等待服务器返回信息，在此阶段我们也是阻塞状态</span><span class="token comment" spellcheck="true"># 一般情况下，当程序属于io状态时，都是阻塞状态</span><span class="token comment" spellcheck="true"># 协程：当程序遇见了io操作的时候，会选择性的切换到其他任务上。</span><span class="token comment" spellcheck="true"># 在微观上是一个任务一个任务的进行切换，切换条件一般就是io操作</span><span class="token comment" spellcheck="true"># 在宏观上我们能看到的就是多个任务一起在执行</span><span class="token comment" spellcheck="true"># 多任务异步操作</span><span class="token comment" spellcheck="true"># 上方所讲的都是在单线程的条件下</span><span class="token comment" spellcheck="true"># python编写协程</span><span class="token keyword">import</span> asyncio<span class="token comment" spellcheck="true"># async def func(): # 协程函数</span><span class="token comment" spellcheck="true">#     print('你好，世界!')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># if __name__ == '__main__':</span><span class="token comment" spellcheck="true">#     input('请输入你的姓名')</span><span class="token comment" spellcheck="true">#     # func()  # 此时的函数是异步协程函数，此时函数执行得到的是一个协程对象</span><span class="token comment" spellcheck="true">#     g = func()</span><span class="token comment" spellcheck="true">#     # print(g)</span><span class="token comment" spellcheck="true">#     asyncio.run(g)  # 运行协程对象，协程对象运行需要asyncio模块支持</span><span class="token comment" spellcheck="true"># 一般写法</span><span class="token comment" spellcheck="true"># async def func1():</span><span class="token comment" spellcheck="true">#     print('我叫吴彦祖')</span><span class="token comment" spellcheck="true">#     # time.sleep(3)   # 当程序出现了同步操作的时候，异步操作就中断了</span><span class="token comment" spellcheck="true">#     await asyncio.sleep(3)  # await挂起，异步操作</span><span class="token comment" spellcheck="true">#     print('我叫刘德华')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># async def func2():</span><span class="token comment" spellcheck="true">#     print('我叫吴彦祖')</span><span class="token comment" spellcheck="true">#     # time.sleep(3)</span><span class="token comment" spellcheck="true">#     await asyncio.sleep(2)</span><span class="token comment" spellcheck="true">#     print('我叫刘德华')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># async def func3():</span><span class="token comment" spellcheck="true">#     print('我叫吴彦祖')</span><span class="token comment" spellcheck="true">#     # time.sleep(3)</span><span class="token comment" spellcheck="true">#     await asyncio.sleep(4)</span><span class="token comment" spellcheck="true">#     print('我叫刘德华')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># if __name__ == '__main__':</span><span class="token comment" spellcheck="true">#     f1 = func1()</span><span class="token comment" spellcheck="true">#     f2 = func2()</span><span class="token comment" spellcheck="true">#     f3 = func3()</span><span class="token comment" spellcheck="true">#     tasks = [f1, f2, f3]</span><span class="token comment" spellcheck="true">#     start = time.time()</span><span class="token comment" spellcheck="true">#     asyncio.run(asyncio.wait(tasks))</span><span class="token comment" spellcheck="true">#     end = time.time()</span><span class="token comment" spellcheck="true">#     print(end-start)</span><span class="token comment" spellcheck="true"># 推荐写法</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫吴彦祖'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># await挂起，异步操作</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫刘德华'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫吴彦祖'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫刘德华'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫吴彦祖'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我叫刘德华'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 写法1</span>    <span class="token comment" spellcheck="true"># f = func1()</span>    <span class="token comment" spellcheck="true"># await f # 一般await挂起操作写在协程对象前面</span>    <span class="token comment" spellcheck="true"># 写法2(推荐)</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> func2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> func3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># tasks = [asyncio.create_task(func1()), asyncio.create_task(func2()), asyncio.create_task(func3())]  # python3.8之后用这种</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-aiohttp模块的使用"><a href="#5-aiohttp模块的使用" class="headerlink" title="5.aiohttp模块的使用"></a>5.aiohttp模块的使用</h3><blockquote><p>安装pip install aiohttp</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/15 16:18</span><span class="token comment" spellcheck="true"># @File : 25.aiohttp模块的使用.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> asyncio<span class="token comment" spellcheck="true"># 要爬取的链接</span>urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://kr.shanghai-jiuxin.com/file/2021/0609/smallc68aab5c9aee1675728ed1965c9a350c.jpg'</span><span class="token punctuation">,</span>    <span class="token string">'http://kr.shanghai-jiuxin.com/file/2021/0609/smalld962470284e0403159107fe22f1ef561.jpg'</span><span class="token punctuation">,</span>    <span class="token string">'http://kr.shanghai-jiuxin.com/file/2021/0609/small7b7868d1e911a35b269bde4b8b05dfb8.jpg'</span><span class="token punctuation">]</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义下载函数</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># request</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># resp = requests.get()</span>            name <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 创建文件</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token keyword">await</span> resp<span class="token punctuation">.</span>content<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取内容是异步的，需要挂起</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'搞定'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>download<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-利用协程扒光一部小说"><a href="#6-利用协程扒光一部小说" class="headerlink" title="6.利用协程扒光一部小说"></a>6.利用协程扒光一部小说</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding = utf-8 -*-</span><span class="token comment" spellcheck="true"># @Time : 2021/6/15 16:37</span><span class="token comment" spellcheck="true"># @File : 26.用协程扒光一部小说.py</span><span class="token comment" spellcheck="true"># @Software: PyCharm</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> aiofiles<span class="token triple-quoted-string string">'''因为网页反爬机制，又因为程序利用协程技术爬取过快，所以很容易被墙，所以此程序仅供参考，没有太大的用处！,还是慢慢单线程爬吧，或者搞个代理池，再或者你有破解反爬的技术。'''</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>link <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>link<span class="token punctuation">,</span> <span class="token string">'小说'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断目录是否存在</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">'http://book.zongheng.com/showchapter/840978.html'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36'</span><span class="token punctuation">}</span>resp <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(resp.text)</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span>urls <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[3]/div[2]/div[2]/div/*/li/a/@href'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取所有章节链接</span><span class="token comment" spellcheck="true"># for i in urls:</span><span class="token comment" spellcheck="true">#     print(i)</span><span class="token comment" spellcheck="true"># print(len(urls))</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># requests</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>href<span class="token punctuation">)</span> <span class="token keyword">as</span> resp_href<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># resp = requests.get()</span>            resp_href<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> resp_href<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            html_href <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span><span class="token keyword">await</span> resp_href<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print(html_href)</span>            content <span class="token operator">=</span> html_href<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[3]/div[3]/div/div[5]/p/text()'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>            content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'    '</span> <span class="token operator">+</span> content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 解决第一段没有开头没有空2格</span>            content <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将提取出来的列表变成一整个字符串</span>            <span class="token comment" spellcheck="true"># print(content)</span>            name <span class="token operator">=</span> html_href<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[3]/div[3]/div/div[2]/div[2]/text()'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取章节名称</span>            content <span class="token operator">=</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">+</span> content  <span class="token comment" spellcheck="true"># 在每一章内容的前面都加上章名</span>            <span class="token keyword">async</span> <span class="token keyword">with</span> aiofiles<span class="token punctuation">.</span>open<span class="token punctuation">(</span>f<span class="token string">'{name[0]}.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 异步写入文件，保存</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'-------下载完成!'</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 创建任务列表</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> urls<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>download<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将所有的下载任务添加到任务列表</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、爬取一部视频"><a href="#七、爬取一部视频" class="headerlink" title="七、爬取一部视频"></a>七、爬取一部视频</h3><h3 id="1-视频网站的工作原理"><a href="#1-视频网站的工作原理" class="headerlink" title="1.视频网站的工作原理"></a>1.视频网站的工作原理</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># &lt;video src="一部视频.mp4">&lt;/video>&lt;video>    # 一般网站放视频</span><span class="token comment" spellcheck="true"># 用户上传 -> 转码(把视频做处理,2k,108,标清),->切片处理(把单个的文件进行拆分)</span><span class="token comment" spellcheck="true"># 拖动滚动条直接加载滚动条处的位置</span><span class="token comment" spellcheck="true"># ==========================</span><span class="token comment" spellcheck="true"># 需要一个文件记录：1.视频播放顺序，2.视频存放的路径</span><span class="token comment" spellcheck="true"># M3U8 txt json => 文本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Blog_img/image-20210618203952343.png" alt="image-20210618203952343"></p><ul><li>爬取视频步骤<ol><li>找到m3u8(各种手段)</li><li>通过m3u8下载到ts文件</li><li>可以通过各种手段(不仅是变成手段)把ts文件合并为一个mp4文件。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python异常</title>
      <link href="year/11/18/python-yi-chang/"/>
      <url>year/11/18/python-yi-chang/</url>
      
        <content type="html"><![CDATA[<h1 id="Python异常"><a href="#Python异常" class="headerlink" title="Python异常"></a>Python异常</h1><h2 id="01-异常的概念"><a href="#01-异常的概念" class="headerlink" title="01.异常的概念"></a>01.异常的概念</h2><ul><li>程序运行时，如果Python解释器 **遇到 **一个错误，会停止程序的执行，并且提示一些错误信息，这就是 <strong>异常</strong>。</li><li><strong>程序停止执行并且提示错误信息</strong>，这个动作，我们通常称之为：<strong>抛出(raise)异常</strong>。</li></ul><pre class="line-numbers language-python"><code class="language-python">num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入一个数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">## 让用户输入一个整数。</span><span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">## 打印。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        正常输入整数是不会报错的，而用户输入的不是整数的话就会报错，针对这一情况，就需要异常语句来处理。当出现报错时，给出一定的提示！，通过 **异常捕获 **可以针对突发事件做集中的处理，从而保证程序的 <strong>稳定性和健壮性。</strong></p><h2 id="02-异常的捕获"><a href="#02-异常的捕获" class="headerlink" title="02 .异常的捕获"></a>02 .异常的捕获</h2><h3 id="2-1简单捕获异常语法"><a href="#2-1简单捕获异常语法" class="headerlink" title="2.1简单捕获异常语法"></a>2.1简单捕获异常语法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    尝试运行的代码 <span class="token keyword">except</span><span class="token punctuation">:</span>    出现错误运行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2错误类型捕获"><a href="#2-2错误类型捕获" class="headerlink" title="2.2错误类型捕获"></a>2.2错误类型捕获</h3><ul><li><p>在程序运行时，可能会遇到<strong>不同类型的异常</strong>，并且需要 <strong>针对不同类型的异常，做出不同的响应</strong>，这个时候，就需要捕获错误类型了。</p></li><li><p>语法如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    尝试运行的代码<span class="token keyword">except</span> 错误类型<span class="token number">1</span>：    针对错误类型<span class="token number">1</span>执行的代码<span class="token keyword">except</span> 错误类型<span class="token number">2</span>：    针对错误类型<span class="token number">2</span>执行的代码<span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'未知错误{result}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当python解释器 <strong>抛出异常</strong>时，最后一行错误信息的第一个单词，就是错误类型。</p></li><li><p>捕获未知错误,在程序开发时，会出现没有预料到的报错，这时候就可以使用<strong>捕获未知错误</strong>。</p></li><li><p>代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'未知错误{result}'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3异常捕获的完整语法"><a href="#2-3异常捕获的完整语法" class="headerlink" title="2.3异常捕获的完整语法"></a>2.3异常捕获的完整语法</h3></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    尝试运行的代码<span class="token keyword">except</span> 错误类型<span class="token number">1</span>：    针对错误类型<span class="token number">1</span>执行的代码<span class="token keyword">except</span> 错误类型<span class="token number">2</span>：    针对错误类型<span class="token number">2</span>执行的代码<span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">'未知错误{result}'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    没有错误才会执行的代码<span class="token keyword">finally</span><span class="token punctuation">:</span>    无论是否有异常，都会执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="03-异常的传递"><a href="#03-异常的传递" class="headerlink" title="03.异常的传递"></a>03.异常的传递</h2><ul><li>异常的传递  - - 当 <strong>函数/方法</strong> 执行 <strong>出现异常</strong>，会 <strong>将异常传递</strong> 给函数/方法 的 <strong>调用一方</strong></li><li>如果 <strong>传递到主程序</strong>，仍然 <strong>没有异常处理</strong>， 程序才会被终止</li></ul><blockquote><p>提示</p></blockquote><ul><li><p>在开发中，可以在主函数中增加 <strong>异常捕获</strong></p></li><li><p>而在主函数中调用的其他函数，只要出现异常，都会传递到主函数的 <strong>异常捕获</strong> 中</p></li><li><p>这样就不需要再代码中，增加大量的 <strong>异常捕获</strong>，能够保证代码的整洁</p></li></ul><h2 id="04-抛出-raise-异常"><a href="#04-抛出-raise-异常" class="headerlink" title="04.抛出 raise 异常"></a>04.抛出 <strong>raise</strong> 异常</h2><h3 id="4-1应用场景"><a href="#4-1应用场景" class="headerlink" title="4.1应用场景"></a>4.1应用场景</h3><ul><li><p>在开发中，除了 <strong>代码执行出错</strong><code>Python</code>解释器会**抛出 **异常之外</p></li><li><p>还可以根据 <strong>应用程序 特有的业务需求 主动抛出异常</strong></p><p><strong>示例：</strong></p></li><li><p>提示用户 <strong>输入密码</strong>，如果 <strong>长度少于8</strong>，抛出<strong>异常</strong></p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">input_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入密码:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> password    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'密码长度不够！'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 主动抛出异常</span><span class="token keyword">try</span><span class="token punctuation">:</span>    input_password<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 捕获异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印异常信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask入门</title>
      <link href="year/05/31/flask-ru-men/"/>
      <url>year/05/31/flask-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask入门-基于Ubuntu-Py3-85环境"><a href="#Flask入门-基于Ubuntu-Py3-85环境" class="headerlink" title="Flask入门-基于Ubuntu+Py3.85环境"></a>Flask入门-基于Ubuntu+Py3.85环境</h1><ul><li><p>调试命令</p><blockquote><p>export FLASK_ENV=development        # 打开调试模式</p><p>flask run –host=0.0.0.0        # 设置运行后，所有主机可见</p></blockquote></li><li><p>pycharm设置调试</p><blockquote><p>app.run(debug=True)</p></blockquote></li></ul><h2 id="一、创建虚拟环境-amp-激活虚拟环境-amp-安装Flask"><a href="#一、创建虚拟环境-amp-激活虚拟环境-amp-安装Flask" class="headerlink" title="一、创建虚拟环境&amp;激活虚拟环境&amp;安装Flask"></a>一、创建虚拟环境&amp;激活虚拟环境&amp;安装Flask</h2><blockquote><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>建议在开发环境和生产环境下都使用虚拟环境来管理项目的依赖。</p><p>为什么要使用虚拟环境？随着你的 Python 项目越来越多，你会发现不同的项目会需要 不同的版本的 Python 库。同一个 Python 库的不同版本可能不兼容。</p><p>虚拟环境可以为每一个项目安装独立的 Python 库，这样就可以隔离不同项目之间的 Python 库，也可以隔离项目与操作系统之间的 Python 库。</p><p>Python 3 内置了用于创建虚拟环境的 <a href="https://docs.python.org/3/library/venv.html#module-venv"><code>venv</code></a> 模块。如果你使用的是较新的 Python 版本，那么请接着阅读本文下面的内容。</p><p>如果你使用 Python 2 ，请首先参阅 <a href="https://dormousehole.readthedocs.io/en/latest/installation.html#install-install-virtualenv">安装 virtualenv</a> 。</p></blockquote><h3 id="1-创建虚拟环境"><a href="#1-创建虚拟环境" class="headerlink" title="1.创建虚拟环境"></a>1.创建虚拟环境</h3><pre class="line-numbers language-she"><code class="language-she">mkdir myproject            # 创建一个文件cd myproject            # 进入这个文件python3 -m venv venv            # 创建一个名叫venv的虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-激活虚拟环境"><a href="#2-激活虚拟环境" class="headerlink" title="2.激活虚拟环境"></a>2.激活虚拟环境</h3><p>在myproject文件夹下执行:</p><pre class="line-numbers language-shell"><code class="language-shell">. venv/bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>激活后，你的终端提示符会显示虚拟环境的名称。</p><h3 id="3-安装Flask"><a href="#3-安装Flask" class="headerlink" title="3.安装Flask"></a>3.安装Flask</h3><p>在已激活的虚拟环境中可以使用如下命令安装 Flask：</p><pre class="line-numbers language-shell"><code class="language-shell">pip install Flask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、requirements文件的使用"><a href="#二、requirements文件的使用" class="headerlink" title="二、requirements文件的使用"></a>二、requirements文件的使用</h2><h3 id="1-导出环境所使用的所有模块名和版本号"><a href="#1-导出环境所使用的所有模块名和版本号" class="headerlink" title="1.导出环境所使用的所有模块名和版本号"></a>1.导出环境所使用的所有模块名和版本号</h3><pre class="line-numbers language-she"><code class="language-she">pip freeze > requirements.txt        # requirements.txt这个文件名可以自定义。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>创建一个Flask项目，选好虚拟环境，随便创建一个程序，然后在终端执行代码</p></li><li><p>即可导出这个虚拟环境所使用的所有模块和版本号。</p></li></ul><h3 id="2-查看虚拟环境安装了那些模块"><a href="#2-查看虚拟环境安装了那些模块" class="headerlink" title="2.查看虚拟环境安装了那些模块"></a>2.查看虚拟环境安装了那些模块</h3><pre class="line-numbers language-she"><code class="language-she">pip list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521215350134.png"><h3 id="3-批量导入别的虚拟环境中的所有模块"><a href="#3-批量导入别的虚拟环境中的所有模块" class="headerlink" title="3.批量导入别的虚拟环境中的所有模块"></a>3.批量导入别的虚拟环境中的所有模块</h3><ul><li>即将一个虚拟环境里所有安装的模块安装到指定的环境中。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">pip install -r requirements.txt            # requirements.txt    这个代表包含模块和版本号的文本文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令之后，会将requirements.txt中所有的模块依次安装。</p><h2 id="三、创建第一个Flask程序"><a href="#三、创建第一个Flask程序" class="headerlink" title="三、创建第一个Flask程序"></a>三、创建第一个Flask程序</h2><h3 id="1-Flask第一个程序"><a href="#1-Flask第一个程序" class="headerlink" title="1.Flask第一个程序"></a>1.Flask第一个程序</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask            <span class="token comment" spellcheck="true"># 导入Flask模块</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-python"><code class="language-python">FLASK_APP <span class="token operator">=</span> app<span class="token punctuation">.</span>pyFLASK_ENV <span class="token operator">=</span> developmentFLASK_DEBUG <span class="token operator">=</span> <span class="token number">0</span>In folder <span class="token operator">/</span>Python<span class="token operator">/</span>Flask<span class="token operator">/</span>Python<span class="token operator">/</span>myproject<span class="token operator">/</span>venv<span class="token operator">/</span>bin<span class="token operator">/</span>python3 <span class="token operator">-</span>m flask run <span class="token operator">*</span> Serving Flask app <span class="token string">'app.py'</span> <span class="token punctuation">(</span>lazy loading<span class="token punctuation">)</span> <span class="token operator">*</span> Environment<span class="token punctuation">:</span> development <span class="token operator">*</span> Debug mode<span class="token punctuation">:</span> off <span class="token operator">*</span> Running on http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span> <span class="token punctuation">(</span>Press CTRL<span class="token operator">+</span>C to quit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521211157142.png"><p>此时点击Running on <a href="http://127.0.0.1:5000会跳转到浏览器，浏览器显示即：">http://127.0.0.1:5000会跳转到浏览器，浏览器显示即：</a></p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521211507137.png"><p>和函数hello_world的返回结果是一样的。</p><h3 id="2-代码详解"><a href="#2-代码详解" class="headerlink" title="2.代码详解"></a>2.代码详解</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask            <span class="token comment" spellcheck="true"># 导入Flask模块</span><span class="token comment" spellcheck="true"># 创建Flask应用程序实例</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 需要传入__name__,为了确定资源所在的路径。--后面会有具体解释</span><span class="token comment" spellcheck="true"># 定义路由及视图函数</span><span class="token comment" spellcheck="true"># Flask中定义路由是通过装饰器实现的。</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># '/'代表根目录，即打开链接的第一界面。访问根路由会直接执行下面的函数。</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, World!'</span><span class="token comment" spellcheck="true"># 启动程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 判断__name__是否等于__main__</span>      <span class="token comment" spellcheck="true"># 执行了app.run,就会将Flask程序运行在一个简易的服务器(Flask提供的，由于测试的。)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 运行程序，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-函数返回的形式"><a href="#3-函数返回的形式" class="headerlink" title="3.函数返回的形式"></a>3.函数返回的形式</h3><p>函数返回有2中形式：</p><ul><li>一是上面代码中的return ‘Hello World’，即返回的是<strong>字符串</strong>。</li><li>二是返回一个<strong>网页</strong>。</li></ul><p><strong>返回网页的方法</strong>：</p><ol><li><p>在项目文件夹下的templates创建一个index.html的文件，里面的内容为你想在网页里显示出来的内容。</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521214247102.png"><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello HTML5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--用一级标题显示'Hello HTML5'--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将from flask import Flask更改为from flask import Flask,render_template，其实就是多导入了一个templates。</p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>然后将函数的返回代码改为return render_template(‘index.html’)，括号里的内容为要显示的网页的文件名。</li></ol><pre class="line-numbers language-HTML"><code class="language-HTML">def hello_world():    # return 'Hello World!'    return render_template('index.html')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整程序代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># return 'Hello World!'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521214541098.png"><h2 id="四-路由请求方式设置"><a href="#四-路由请求方式设置" class="headerlink" title="四.路由请求方式设置"></a>四.路由请求方式设置</h2><h3 id="1-postman软件"><a href="#1-postman软件" class="headerlink" title="1.postman软件"></a>1.postman软件</h3><ul><li>直接官网下载然后打开，打开软件直接跳过，登录的下方有skip字样，点击就可以进入下图界面。</li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521221146651.png"><ul><li>试用软件发送get请求，查看返回结果。</li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521221926274.png"><p>发现结果是正确的。</p><ul><li>再用软件选择Post发送请求，查看返回结果。</li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521221812412.png"><p>发现报了一个405的错误，即方法不允许，服务不支持post请求。</p><h3 id="2-创建post请求"><a href="#2-创建post请求" class="headerlink" title="2.创建post请求"></a>2.创建post请求</h3><p>默认是Get请求,如果需要增加，需要自行指定。</p><p>将装饰器语句改成：</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Get'</span><span class="token punctuation">,</span><span class="token string">'Post'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即加上请求方式参数，多个请求方式要用列表。</p><p>修改完成之后，再次发送post请求：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521222629321.png"><p>发现并没有报错，和Get请求返回的结果是相同的，说明网页支持了Post请求了。</p><h2 id="五、路由参数处理"><a href="#五、路由参数处理" class="headerlink" title="五、路由参数处理"></a>五、路由参数处理</h2><h3 id="1-同一个视图函数来显示不同用户的订单信息。"><a href="#1-同一个视图函数来显示不同用户的订单信息。" class="headerlink" title="1.同一个视图函数来显示不同用户的订单信息。"></a>1.同一个视图函数来显示不同用户的订单信息。</h3><p>有时需要将同一类URL映射到同一个视图函数处理，比如:使用同一个视图函数来显示不同用户的订单信息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Get'</span><span class="token punctuation">,</span><span class="token string">'Post'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># return 'Hello World!'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用同一个视图函数来显示不同用户的订单信息。</span><span class="token comment" spellcheck="true"># &lt;>定义路由的参数。&lt;>内需要起个名字,那么后面的代码才能使用。</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/orders/&lt;order_id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_order_id</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 需要在视图的()内填入参数名，那么后面的代码才能去使用。</span>    <span class="token keyword">return</span> <span class="token string">'order_id %s'</span> <span class="token operator">%</span> order_id<span class="token comment" spellcheck="true"># 启动程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码是在之前代码的基础上又定义了一个路由，目录为’/orders/<order_id>‘，&lt;&gt;定义一个路由参数，&lt;&gt;内需要有个名字,代表动态目录。</order_id></p><p>上面代码运行后跟之前运行结果没有区别，但是在地址栏后面加上/orders/xxx,例如<a href="http://127.0.0.1:5000/orders/666">http://127.0.0.1:5000/orders/666</a></p><p>按F5刷新后的效果为:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522113029492-1624169288185.png"><p>可以发现显示内容为order_id 666,即get_order_id(order_id)函数的返回结果一致。</p><p>在get_order_id(order_id)函数中增加:print(order_id),然后运行程序，执行结果为：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Get'</span><span class="token punctuation">,</span><span class="token string">'Post'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># return 'Hello World!'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用同一个视图函数来显示不同用户的订单信息。</span><span class="token comment" spellcheck="true"># &lt;>定义路由的参数。&lt;>内需要起个名字,那么后面的代码才能使用。</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/orders/&lt;order_id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_order_id</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 需要在视图的()内填入参数名，那么后面的代码才能去使用。</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'order_id %s'</span> <span class="token operator">%</span> order_id<span class="token comment" spellcheck="true"># 启动程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522113621709.png"><p>可以看到打印出了&lt;class ‘str’&gt;，说明函数的参数order_id默认是一个字符串形式。</p><h3 id="2-对路由做访问优化"><a href="#2-对路由做访问优化" class="headerlink" title="2.对路由做访问优化"></a>2.对路由做访问优化</h3><p>有的时候，需要对路由做访问优化，订单ID应该是一个int类型。</p><p>所以我们将**@app.route(‘/orders/<order_id>‘)<strong>修改为</strong>@app.route(‘/orders/&lt; int:order_id &gt;’)**,</order_id></p><p>即将order_id转化为int类型。当order_id可以转化为int类型时，就进行匹配，反之。此时，只有在<a href="http://127.0.0.1:5000/orders/xxx%E7%9A%84xxx%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%8F%82%E6%95%B0%E6%98%AF**%E5%8F%AF%E4%BB%A5%E8%BD%AC%E5%8C%96%E4%B8%BAint%E7%B1%BB%E5%9E%8B**%E6%97%B6%EF%BC%8C%E6%89%8D%E4%BC%9A%E6%9C%89%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%EF%BC%8C%E5%90%A6%E5%88%99%E5%B0%B1%E6%98%AF**Note">http://127.0.0.1:5000/orders/xxx的xxx位置的参数是**可以转化为int类型**时，才会有返回结果，否则就是**Note</a> Found**</p><p>举一反三:int也可以改成float等等</p><table><thead><tr><th><code>string</code></th><th>（缺省值） 接受任何不包含斜杠的文本</th></tr></thead><tbody><tr><td><code>int</code></td><td>接受正整数</td></tr><tr><td><code>float</code></td><td>接受正浮点数</td></tr><tr><td><code>path</code></td><td>类似 <code>string</code> ，但可以包含斜杠</td></tr><tr><td><code>uuid</code></td><td>接受 UUID 字符串</td></tr></tbody></table><h2 id="六、Jinja2模块引擎"><a href="#六、Jinja2模块引擎" class="headerlink" title="六、Jinja2模块引擎"></a>六、Jinja2模块引擎</h2><blockquote><h1>模板</h1><p>视图函数的主要作用是生成请求的响应，这是最简单的请求。实际上，视图函数有两个作用：<strong>处理业务逻辑</strong>和<strong>返回响应内容</strong>。在大型应用中，把业务逻辑和表现内容放在一起，会增加代码的复杂度和维护成本。本节学到的模板，它的作用即是承担视图函数的另一个作用，即返回响应内容。</p><ul><li>模板其实是一个包含响应文本的文件，其中用占位符(变量)表示动态部分，告诉模板引擎其具体的值需要从使用的数据中获取</li><li>使用真实值替换变量，再返回最终得到的字符串，这个过程称为“渲染”</li><li>Flask是使用 <strong>Jinja2</strong> 这个模板引擎来渲染模板</li></ul><p>使用模板的好处：</p><ul><li>视图函数只负责业务逻辑和数据处理(业务逻辑方面)</li><li>而模板则取到视图函数的数据结果进行展示(视图展示方面)</li><li>代码结构清晰，耦合度低</li></ul></blockquote><blockquote><h1>Jinja2</h1><h3 id="两个概念："><a href="#两个概念：" class="headerlink" title="两个概念："></a>两个概念：</h3><ul><li>Jinja2：是 Python 下一个被广泛应用的模板引擎，是由Python实现的模板语言，他的设计思想来源于 Django 的模板引擎，并扩展了其语法和一系列强大的功能，其是Flask内置的模板语言。</li><li>模板语言：是一种被设计来自动生成文档的简单文本格式，在模板语言中，一般都会把一些变量传给模板，替换模板的特定位置上预先定义好的占位变量名。</li></ul><h3 id="渲染模版函数"><a href="#渲染模版函数" class="headerlink" title="渲染模版函数"></a>渲染模版函数</h3><ul><li>Flask提供的 <strong>render_template</strong> 函数封装了该模板引擎</li><li><strong>render_template</strong> 函数的第一个参数是模板的文件名，后面的参数都是键值对，表示模板中变量对应的真实值。</li></ul></blockquote><h3 id="1-如何返回一个网页-模板"><a href="#1-如何返回一个网页-模板" class="headerlink" title="1.如何返回一个网页(模板)"></a>1.如何返回一个网页(模板)</h3><ul><li><strong>这一部分在目录 三–3提过一次，但不详细</strong></li></ul><blockquote><p>创建完Flask项目后会生成2个文件夹static和templates,其中static可以将图片或者一些其他东西放进去，而templates就是用来放模板的。</p></blockquote><ol><li><p>右键templates目录，新建一个HTML文件，随便写一些内容。</p></li><li><p>然后导入模块from flask import Flask,render_template</p></li><li><p>将函数返回结果设置为：<strong>return render_template(‘index.html’)<strong>，其中</strong>‘index.html’</strong>为需要显示网页名,可自行修改。</p></li></ol><p>Python代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.如何返回一个网页(模板)</span><span class="token comment" spellcheck="true"># 2.如何给模板填充数据</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTML代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>这个是模板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>这个是首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522120929878.png"><p>可以看到显示的是网页的内容。</p><h3 id="2-传入一个可变的东西"><a href="#2-传入一个可变的东西" class="headerlink" title="2.传入一个可变的东西"></a>2.传入一个可变的东西</h3><p>即在模板中不直接写死的东西：</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 比如需要传入网址</span>    url_str <span class="token operator">=</span> <span class="token string">'www.baidu.com'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span>url_str<span class="token operator">=</span>url_str<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 后面的参数为键值对的形式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==========================================================================</p><pre class="line-numbers language-htm"><code class="language-htm">```html<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title></head>这个是模板<br>这个是首页{{ url_str }}<br>            # 加入了{{url_str}}</body></html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==========================================================================<br><strong>{# 注释内容 #}是注释</strong></p>{{}}是变量代码块==========================================================================<br>运行结果：<img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522121806802.png">- 当我们修改代码中的url_str的值时，网页内容也会发生改变。<br>## 七、变量代码块的基本使用### 1.数据的传递 代码 return render_template('index.html',url_str=url_str)中，前面一个url_str的意思是变量代码块要引用的名称，后面的url_str是py文件中的一个变量。通常模板中的变量名和传递数据的变量名保持一致。python文件：```pythonfrom flask import Flask,render_templateapp = Flask(__name__)# 1.如何返回一个网页(模板)# 2.如何给模板填充数据@app.route('/')def hello_world():    # 比如需要传入网址    url_str = 'www.baidu.com'    my_list = [1,3,5,7,9]    return render_template('index.html', url_str = url_str,my_list=my_list)if __name__ == '__main__':    app.run(Debug=True)```在html文件中：```python```html    <meta charset="UTF-8">    <title>Title</title>这个是模板<br>这个是首页<br>```<p>运行结果:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522123039086.png"><p>可以看到在py文件中定义的my_list变量被传到了模板中并显示了出来。</p><h3 id="2-列表数据传递"><a href="#2-列表数据传递" class="headerlink" title="2.列表数据传递"></a>2.列表数据传递</h3><p>my_list是一个列表变量，同样，在模板中也可以使用切片</p><p>html代码：</p><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>这个是模板<span class="token operator">&lt;</span>br<span class="token operator">></span>这个是首页<span class="token punctuation">{</span><span class="token comment" spellcheck="true"># 下面是一个变量代码快的使用#}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> url_str <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_list <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_list<span class="token number">.2</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 增加了这个</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522123248935.png"><p>发现多了一个5</p><p>除了用点的方式，也可以使用同python切片[]的方式，有同样的效果。</p><h3 id="3-字典数据的传递"><a href="#3-字典数据的传递" class="headerlink" title="3.字典数据的传递"></a>3.字典数据的传递</h3><p>除了列表，字典也可以</p><p>python：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.如何返回一个网页(模板)</span><span class="token comment" spellcheck="true"># 2.如何给模板填充数据</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 比如需要传入网址</span>    url_str <span class="token operator">=</span> <span class="token string">'www.baidu.com'</span>    my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>    my_dict <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'赵涛涛'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> url_str <span class="token operator">=</span> url_str<span class="token punctuation">,</span>my_list<span class="token operator">=</span>my_list<span class="token punctuation">,</span>my_dict<span class="token operator">=</span>my_dict<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>Debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html:</p><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>这个是模板<span class="token operator">&lt;</span>br<span class="token operator">></span>这个是首页<span class="token punctuation">{</span><span class="token comment" spellcheck="true"># 下面是一个变量代码快的使用#}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> url_str <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_list <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_list<span class="token number">.2</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_dict <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522123853400.png"><p>发现字典也可以被正确的传递进来，还可以利用键取出值的方式。</p><p><strong>其他可以传递的数据不再赘述，自行探索</strong>。</p><h2 id="八、控制代码块"><a href="#八、控制代码块" class="headerlink" title="八、控制代码块"></a>八、控制代码块</h2><ul><li>用{ %%}定义控制代码块，可以实现一些语言层次的功能，比如循环或者if语句。</li></ul><pre class="line-numbers language-python"><code class="language-python">```python<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> user <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">}</span>    hello!<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> index <span class="token keyword">in</span> indexs <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> index <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>```<span class="token operator">-</span> <span class="token operator">**</span>快速补全技巧<span class="token operator">**</span>  先输入<span class="token keyword">for</span>然后按TAB键，即可快速补全。  先输入<span class="token keyword">if</span>然后按TAB键，即可快速补全。<span class="token comment" spellcheck="true">### 1.for语句</span>在html文件中增加：```python```html<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> my <span class="token keyword">in</span> my_list <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> my <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>```再运行程序，发现网页依次打印出了my_list中的元素<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522125242127.png"</span><span class="token operator">></span><span class="token comment" spellcheck="true">### 2.if语句</span>​在刚刚的<span class="token keyword">for</span>语句修改为<span class="token punctuation">:</span>```python```html<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> my <span class="token keyword">in</span> my_list <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> my <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span> my <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再运行程序，发现网页中只打印出了my_list中大于3的元素</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522125226237.png"><h2 id="九、过滤器-gt-叫转换器更好理解"><a href="#九、过滤器-gt-叫转换器更好理解" class="headerlink" title="九、过滤器->叫转换器更好理解"></a>九、过滤器-&gt;叫转换器更好理解</h2><h3 id="1-概念及语法"><a href="#1-概念及语法" class="headerlink" title="1.概念及语法"></a>1.概念及语法</h3><p>过滤器的本质就是函数。有时候我们不仅仅只是需要输出变量的值，我们还需要修改变量的显示，甚至格式化、运算等等，而在模板中是不能直接调用 Python 中的某些方法，那么这就用到了过滤器。</p><p>使用方式：</p><ul><li>过滤器的使用方式为：变量名 | 过滤器。</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token punctuation">{</span><span class="token punctuation">{</span>variable <span class="token operator">|</span> filter_name<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果没有任何参数传给过滤器,则可以把括号省略掉</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token punctuation">{</span><span class="token punctuation">{</span>variable <span class="token operator">|</span> filter_name<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>如，这个过滤器的作用：把变量url_str 的值的所有小写字母转换为大写字母</p><p>​     将字符串反转。</p></li></ul><h3 id="2-链式调用"><a href="#2-链式调用" class="headerlink" title="2.链式调用"></a>2.链式调用</h3><p>在 jinja2 中，过滤器是可以支持链式调用的，示例如下：</p><pre class="line-numbers language-python"><code class="language-python">```html<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">"hello world"</span> <span class="token operator">|</span> reverse <span class="token operator">|</span> upper <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>先反转再大写</strong></p><h3 id="常见内建过滤器"><a href="#常见内建过滤器" class="headerlink" title="常见内建过滤器"></a>常见内建过滤器</h3><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><ul><li>safe：禁用转义</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'&lt;em>hello&lt;/em>'</span> <span class="token operator">|</span> safe <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用了safe之后，<em></em>会直接应用到hello中，即把hello变成倾斜。</p><ul><li>capitalize：把变量值的首字母转成大写，其余字母转小写</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'hello'</span> <span class="token operator">|</span> capitalize <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>lower：把值转成小写</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'HELLO'</span> <span class="token operator">|</span> lower <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>upper：把值转成大写</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'hello'</span> <span class="token operator">|</span> upper <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>title：把值中的每个单词的首字母都转成大写</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'hello'</span> <span class="token operator">|</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>reverse：字符串反转</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'olleh'</span> <span class="token operator">|</span> reverse <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>format：格式化输出</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'%s is %d'</span> <span class="token operator">|</span> format<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>striptags：渲染之前把值中所有的HTML标签都删掉</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'&lt;em>hello&lt;/em>'</span> <span class="token operator">|</span> striptags <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>truncate: 字符串截断</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'hello every one'</span> <span class="token operator">|</span> truncate<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><ul><li>first：取第一个元素</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> first <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>last：取最后一个元素</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> last <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>length：获取列表长度</p><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> length <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>sum：列表求和</p></li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> sum <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>sort：列表排序</li></ul><pre class="line-numbers language-python"><code class="language-python">```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|</span> sort <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="语句块过滤"><a href="#语句块过滤" class="headerlink" title="语句块过滤"></a>语句块过滤</h3><pre class="line-numbers language-python"><code class="language-python">```html<span class="token punctuation">{</span><span class="token operator">%</span> filter upper <span class="token operator">%</span><span class="token punctuation">}</span>    一大堆文字<span class="token punctuation">{</span><span class="token operator">%</span> endfilter <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、Web表单"><a href="#十、Web表单" class="headerlink" title="十、Web表单"></a>十、Web表单</h2><p>web表单是web应用程序的基本功能。</p><p>它是HTML页面中负责数据采集的部件。表单有三个部分组成：表单标签、表单域、表单按钮。表单允许用户输入数据，负责HTML页面数据采集，通过表单将用户输入的数据提交给服务器。</p><p>在Flask中，为了处理web表单，我们一般使用Flask-WTF扩展，它封装了WTForms，并且它有验证表单数据的功能</p><h2 id="WTForms支持的HTML标准字段"><a href="#WTForms支持的HTML标准字段" class="headerlink" title="WTForms支持的HTML标准字段"></a>WTForms支持的HTML标准字段</h2><table><thead><tr><th align="left">字段对象</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">StringField</td><td align="left">文本字段</td></tr><tr><td align="left">TextAreaField</td><td align="left">多行文本字段</td></tr><tr><td align="left">PasswordField</td><td align="left">密码文本字段</td></tr><tr><td align="left">HiddenField</td><td align="left">隐藏文件字段</td></tr><tr><td align="left">DateField</td><td align="left">文本字段，值为 datetime.date 文本格式</td></tr><tr><td align="left">DateTimeField</td><td align="left">文本字段，值为 datetime.datetime 文本格式</td></tr><tr><td align="left">IntegerField</td><td align="left">文本字段，值为整数</td></tr><tr><td align="left">DecimalField</td><td align="left">文本字段，值为decimal.Decimal</td></tr><tr><td align="left">FloatField</td><td align="left">文本字段，值为浮点数</td></tr><tr><td align="left">BooleanField</td><td align="left">复选框，值为True 和 False</td></tr><tr><td align="left">RadioField</td><td align="left">一组单选框</td></tr><tr><td align="left">SelectField</td><td align="left">下拉列表</td></tr><tr><td align="left">SelectMutipleField</td><td align="left">下拉列表，可选择多个值</td></tr><tr><td align="left">FileField</td><td align="left">文件上传字段</td></tr><tr><td align="left">SubmitField</td><td align="left">表单提交按钮</td></tr><tr><td align="left">FormField</td><td align="left">把表单作为字段嵌入另一个表单</td></tr><tr><td align="left">FieldList</td><td align="left">一组指定类型的字段</td></tr></tbody></table><h2 id="WTForms常用验证函数"><a href="#WTForms常用验证函数" class="headerlink" title="WTForms常用验证函数"></a>WTForms常用验证函数</h2><table><thead><tr><th align="left">验证函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">DataRequired</td><td align="left">确保字段中有数据</td></tr><tr><td align="left">EqualTo</td><td align="left">比较两个字段的值，常用于比较两次密码输入</td></tr><tr><td align="left">Length</td><td align="left">验证输入的字符串长度</td></tr><tr><td align="left">NumberRange</td><td align="left">验证输入的值在数字范围内</td></tr><tr><td align="left">URL</td><td align="left">验证URL</td></tr><tr><td align="left">AnyOf</td><td align="left">验证输入值在可选列表中</td></tr><tr><td align="left">NoneOf</td><td align="left">验证输入值不在可选列表中</td></tr></tbody></table><p>使用Flask-WTF需要配置参数SECRET_KEY。</p><p>CSRF_ENABLED是为了CSRF（跨站请求伪造）保护。 SECRET_KEY用来生成加密令牌，当CSRF激活的时候，该设置会根据设置的密匙生成加密令牌。在HTML页面中直接写form表单：</p><h3 id="1-使用普通方式实现表单"><a href="#1-使用普通方式实现表单" class="headerlink" title="1.使用普通方式实现表单"></a>1.使用普通方式实现表单</h3><p>Python:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''实现一个简单的登录的逻辑处理1.路由需要有get和post两种请求方式 --> 需要判断请求方式2.获取请求参数3.判断参数是否填写，以及密码是否相同4.如果判断都没有问题，就返回一个succes'''</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># request:请求对象--> 获取请求方式、数据</span>    <span class="token comment" spellcheck="true"># 1.需要判断请求方式</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span><span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 2.获取请求参数</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        passwprd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        password2 <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3.判断参数是否填写 &amp; 密码是否相同</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span>passwprd<span class="token punctuation">,</span>password2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'参数不完整'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> passwprd <span class="token operator">!=</span>password2<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码不一致'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'succes'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>确认密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当程序运行时，出现了一个表单，需要输入用户名、密码、确认密码，只有三者都不是空且密码和确认密码相同时才会返回succes，否则会打印错误。</p><h3 id="2-提示优化"><a href="#2-提示优化" class="headerlink" title="2.提示优化"></a>2.提示优化</h3><p>上面的程序运行后，当输入不正确的时候会提示错误，但是错误只显示在控制台，并没有在网页中提示，为了解决这个问题需要进行改进。</p><ol><li>导入flash：from flask import Flask,render_template,request,flash，并设置secret-key </li><li>将上放的print输出都改成flash输出</li><li>在html文件表单中加入循环语句遍历消息</li></ol><p>python代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>request<span class="token punctuation">,</span>flashapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'taotao'</span>            <span class="token comment" spellcheck="true"># 设置secret_key</span><span class="token triple-quoted-string string">'''实现一个简单的登录的逻辑处理1.路由需要有get和post两种请求方式 --> 需要判断请求方式2.获取请求参数3.判断参数是否填写，以及密码是否相同4.如果判断都没有问题，就返回一个succes'''</span><span class="token triple-quoted-string string">'''给模板传递消息flash --> 需要对内容加密，因此需要设置secret_key,做一个加密消息的混淆模板中需要遍历消息'''</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># request:请求对象--> 获取请求方式、数据</span>    <span class="token comment" spellcheck="true"># 1.需要判断请求方式</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span><span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 2.获取请求参数</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        passwprd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        password2 <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3.判断参数是否填写 &amp; 密码是否相同</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span>passwprd<span class="token punctuation">,</span>password2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('参数不完整')</span>            flash<span class="token punctuation">(</span><span class="token string">'参数不完整！'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> passwprd <span class="token operator">!=</span>password2<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('密码不一致')</span>            flash<span class="token punctuation">(</span><span class="token string">'密码不一致'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'succes'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html代码</p><pre class="line-numbers language-Html"><code class="language-Html"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title></head><body><form method="post"><form method="post">    <label>用户名:</label><input type="text" name="username"><br>    <label>密码:</label><input type="password" name="password"><br>    <label>确认密码:</label><input type="password" name="password2"><br>    <input type="submit" value="提交"><br>    {#使用遍历获取闪现的消息#}    {% for message in get_flashed_messages() %}         {{ message }}    {% endfor %}</form></form></body></html><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>get_flashed_messages()是一个函数，用于捕捉消息。    </p><p>程序运行后当输入参数不正确会在网页给予提示，如图：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522153138471.png"><h3 id="3-使用Flask-WTF实现表单"><a href="#3-使用Flask-WTF实现表单" class="headerlink" title="3.使用Flask_WTF实现表单"></a>3.使用Flask_WTF实现表单</h3><p>Python代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>request<span class="token punctuation">,</span>flash<span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm        <span class="token comment" spellcheck="true"># 导入模块</span><span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span>PasswordField<span class="token punctuation">,</span>SubmitFieldapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'taotao'</span><span class="token triple-quoted-string string">'''实现一个简单的登录的逻辑处理1.路由需要有get和post两种请求方式 --> 需要判断请求方式2.获取请求参数3.判断参数是否填写，以及密码是否相同4.如果判断都没有问题，就返回一个succes'''</span><span class="token triple-quoted-string string">'''给模板传递消息flash --> 需要对内容加密，因此需要设置secret_key,做一个加密消息的混淆模板中需要遍历消息'''</span><span class="token triple-quoted-string string">'''使用WTF实现表单自定义表单类'''</span><span class="token keyword">class</span> <span class="token class-name">LoginForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 继承FlaskFrom</span>    <span class="token comment" spellcheck="true"># 创建需要用到的对象</span>    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'用户名:'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span><span class="token string">'密码:'</span><span class="token punctuation">)</span>    password2 <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span><span class="token string">'确认密码:'</span><span class="token punctuation">)</span>    submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'提交'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个路由，目录为‘/from’</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/form'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    login_form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span>form <span class="token operator">=</span> login_form<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># request:请求对象--> 获取请求方式、数据</span>    <span class="token comment" spellcheck="true"># 1.需要判断请求方式</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span><span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 2.获取请求参数</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        passwprd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        password2 <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3.判断参数是否填写 &amp; 密码是否相同</span>        <span class="token comment" spellcheck="true"># validate_on_submit()需要CSRF token</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span>passwprd<span class="token punctuation">,</span>password2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('参数不完整')</span>            flash<span class="token punctuation">(</span><span class="token string">'参数不完整！'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> passwprd <span class="token operator">!=</span>password2<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('密码不一致')</span>            flash<span class="token punctuation">(</span><span class="token string">'密码不一致'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'succes'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html代码:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>确认密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    {#使用遍历获取闪现的消息#}    {% for message in get_flashed_messages() %}        {{ message }}    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ form.csrf_token() }}    {{ form.username.label }}{{ form.username }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    {{ form.password.label }}{{ form.password }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    {{ form.password2.label }}{{ form.password2 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    {{ form.submit }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、Flask中使用数据库"><a href="#十一、Flask中使用数据库" class="headerlink" title="十一、Flask中使用数据库"></a>十一、Flask中使用数据库</h2><h3 id="Flask-SQLAlchemy扩展"><a href="#Flask-SQLAlchemy扩展" class="headerlink" title="Flask-SQLAlchemy扩展"></a>Flask-SQLAlchemy扩展</h3><ul><li>SQLALchemy 实际上是对数据库的抽象，让开发者不用直接和 SQL 语句打交道，而是通过 Python 对象来操作数据库，在舍弃一些性能开销的同时，换来的是开发效率的较大提升</li><li>SQLAlchemy是一个关系型数据库框架，它提供了高层的ORM和底层的原生数据库的操作。flask-sqlalchemy是一个简化了SQLAlchemy操作的flask扩展。</li></ul><h3 id="1-安装-flask-sqlalchemy"><a href="#1-安装-flask-sqlalchemy" class="headerlink" title="1.安装 flask-sqlalchemy"></a>1.安装 flask-sqlalchemy</h3><pre><code>pip install flask-sqlalchemy</code></pre><p>如果连接的是mysql数据库,需要安装mysqldb</p><pre><code>pip install flask-mysqldb</code></pre><h4 id="使用Flask-SQLAlchemy管理数据库"><a href="#使用Flask-SQLAlchemy管理数据库" class="headerlink" title="#使用Flask-SQLAlchemy管理数据库"></a>#使用Flask-SQLAlchemy管理数据库</h4><p>在Flask-SQLAlchemy中，数据库使用URL指定，而且程序使用的数据库必须保存到Flask配置对象的SQLALCHEMY_DATABASE_URI键中。</p><h4 id="Flask的数据库设置："><a href="#Flask的数据库设置：" class="headerlink" title="Flask的数据库设置："></a>Flask的数据库设置：</h4><pre class="line-numbers language-python"><code class="language-python">app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql://root:mysql@127.0.0.1:3306/test'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他设置：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 动态追踪修改设置，如未设置只会提示警告, 不建议开启</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 查询时会显示原始SQL语句</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_ECHO'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-一些参数"><a href="#3-一些参数" class="headerlink" title="3.一些参数"></a>3.一些参数</h2><table><thead><tr><th align="left">名字</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">SQLALCHEMY_DATABASE_URI</td><td align="left">用于连接的数据库 URI 。例如:sqlite:////tmp/test.dbmysql://username:password@server/db</td></tr><tr><td align="left">SQLALCHEMY_BINDS</td><td align="left">一个映射 binds 到连接 URI 的字典。更多 binds 的信息见<a href="http://docs.jinkan.org/docs/flask-sqlalchemy/binds.html#binds"><em>用 Binds 操作多个数据库</em></a>。</td></tr><tr><td align="left">SQLALCHEMY_ECHO</td><td align="left">如果设置为Ture， SQLAlchemy 会记录所有 发给 stderr 的语句，这对调试有用。(打印sql语句)</td></tr><tr><td align="left">SQLALCHEMY_RECORD_QUERIES</td><td align="left">可以用于显式地禁用或启用查询记录。查询记录 在调试或测试模式自动启用。更多信息见get_debug_queries()。</td></tr><tr><td align="left">SQLALCHEMY_NATIVE_UNICODE</td><td align="left">可以用于显式禁用原生 unicode 支持。当使用 不合适的指定无编码的数据库默认值时，这对于 一些数据库适配器是必须的（比如 Ubuntu 上 某些版本的 PostgreSQL ）。</td></tr><tr><td align="left">SQLALCHEMY_POOL_SIZE</td><td align="left">数据库连接池的大小。默认是引擎默认值（通常 是 5 ）</td></tr><tr><td align="left">SQLALCHEMY_POOL_TIMEOUT</td><td align="left">设定连接池的连接超时时间。默认是 10 。</td></tr><tr><td align="left">SQLALCHEMY_POOL_RECYCLE</td><td align="left">多少秒后自动回收连接。这对 MySQL 是必要的， 它默认移除闲置多于 8 小时的连接。注意如果 使用了 MySQL ， Flask-SQLALchemy 自动设定 这个值为 2 小时。</td></tr></tbody></table><h3 id="常用的SQLAlchemy字段类型"><a href="#常用的SQLAlchemy字段类型" class="headerlink" title="常用的SQLAlchemy字段类型"></a>常用的SQLAlchemy字段类型</h3><table><thead><tr><th align="left">类型名</th><th align="left">python中类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Integer</td><td align="left">int</td><td align="left">普通整数，一般是32位</td></tr><tr><td align="left">SmallInteger</td><td align="left">int</td><td align="left">取值范围小的整数，一般是16位</td></tr><tr><td align="left">BigInteger</td><td align="left">int或long</td><td align="left">不限制精度的整数</td></tr><tr><td align="left">Float</td><td align="left">float</td><td align="left">浮点数</td></tr><tr><td align="left">Numeric</td><td align="left">decimal.Decimal</td><td align="left">普通整数，一般是32位</td></tr><tr><td align="left">String</td><td align="left">str</td><td align="left">变长字符串</td></tr><tr><td align="left">Text</td><td align="left">str</td><td align="left">变长字符串，对较长或不限长度的字符串做了优化</td></tr><tr><td align="left">Unicode</td><td align="left">unicode</td><td align="left">变长Unicode字符串</td></tr><tr><td align="left">UnicodeText</td><td align="left">unicode</td><td align="left">变长Unicode字符串，对较长或不限长度的字符串做了优化</td></tr><tr><td align="left">Boolean</td><td align="left">bool</td><td align="left">布尔值</td></tr><tr><td align="left">Date</td><td align="left">datetime.date</td><td align="left">时间</td></tr><tr><td align="left">Time</td><td align="left">datetime.datetime</td><td align="left">日期和时间</td></tr><tr><td align="left">LargeBinary</td><td align="left">str</td><td align="left">二进制文件</td></tr></tbody></table><h3 id="常用的SQLAlchemy列选项"><a href="#常用的SQLAlchemy列选项" class="headerlink" title="常用的SQLAlchemy列选项"></a>常用的SQLAlchemy列选项</h3><table><thead><tr><th align="left">选项名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">primary_key</td><td align="left">如果为True，代表表的主键</td></tr><tr><td align="left">unique</td><td align="left">如果为True，代表这列不允许出现重复的值</td></tr><tr><td align="left">index</td><td align="left">如果为True，为这列创建索引，提高查询效率</td></tr><tr><td align="left">nullable</td><td align="left">如果为True，允许有空值，如果为False，不允许有空值</td></tr><tr><td align="left">default</td><td align="left">为这列定义默认值</td></tr></tbody></table><h3 id="常用的SQLAlchemy关系选项"><a href="#常用的SQLAlchemy关系选项" class="headerlink" title="常用的SQLAlchemy关系选项"></a>常用的SQLAlchemy关系选项</h3><table><thead><tr><th align="left">选项名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">backref</td><td align="left">在关系的另一模型中添加反向引用</td></tr><tr><td align="left">primary join</td><td align="left">明确指定两个模型之间使用的联结条件</td></tr><tr><td align="left">uselist</td><td align="left">如果为False，不使用列表，而使用标量值</td></tr><tr><td align="left">order_by</td><td align="left">指定关系中记录的排序方式</td></tr><tr><td align="left">secondary</td><td align="left">指定多对多中记录的排序方式</td></tr><tr><td align="left">secondary join</td><td align="left">在SQLAlchemy中无法自行决定时，指定多对多关系中的二级联结条件</td></tr></tbody></table><h2 id="十二、数据库的基本操作-环境改成了windows，因为遇到了问题，ubuntu环境折腾不好"><a href="#十二、数据库的基本操作-环境改成了windows，因为遇到了问题，ubuntu环境折腾不好" class="headerlink" title="十二、数据库的基本操作-环境改成了windows，因为遇到了问题，ubuntu环境折腾不好"></a>十二、数据库的基本操作-环境改成了windows，因为遇到了问题，ubuntu环境折腾不好</h2><ul><li>将已经写好的python项目复制黏贴到windows上就好了，用pycharm以打开项目的方式打开文件夹。</li></ul><h2 id="一-增删改操作"><a href="#一-增删改操作" class="headerlink" title="一. 增删改操作"></a>一. 增删改操作</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><ul><li>在Flask-SQLAlchemy中，插入、修改、删除操作，均由数据库会话管理。<ul><li>会话用db.session表示。在准备把数据写入数据库前，要先将数据添加到会话中然后调用 commit() 方法提交会话。</li></ul></li><li>在Flask-SQLAlchemy中，查询操作是通过query对象操作数据。<ul><li>最基本的查询是返回表中所有数据，可以通过过滤器进行更精确的数据库查询。</li></ul></li></ul><h3 id="2-在数据表中添加数据"><a href="#2-在数据表中添加数据" class="headerlink" title="2.在数据表中添加数据"></a>2.在数据表中添加数据</h3><p><strong>代码中有些生僻的参数，可以查询上一节的参数表。</strong></p><p>Python代码:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置数据的地址</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql://root:mysql@127.0.0.1/flask'</span><span class="token comment" spellcheck="true"># 配置数据库是否动态追踪修改设置，如未设置只会提示警告, 不建议开启</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''两张表(管理员/普通用户)角色(角色ID)'''</span><span class="token comment" spellcheck="true"># 数据库的模型，需要继承db.Model</span><span class="token keyword">class</span> <span class="token class-name">Role</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义表名</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'roles'</span>            <span class="token comment" spellcheck="true"># 表名</span>    <span class="token comment" spellcheck="true"># 定义字段</span>    <span class="token comment" spellcheck="true"># db.Column表示一个字段</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 主键</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>            <span class="token comment" spellcheck="true"># 表名</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    role_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'roles.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 表示是表roles的外键</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 删除表</span>    db<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建表</span>    db<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行这个程序，就可以在mysql中的flask这个库创建指定的两个数据表。在这个文件里创建了两个类，我们可以利用这两个类进行数据表的增加。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><pre class="line-numbers language-python"><code class="language-python">app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql://root:mysql@127.0.0.1:3306/flask'</span> 这句代码是用来链接数据库，其中最前面的mysql是指定数据库类型，root是数据库的用户名，紧接着的mysql是数据库密码，@后面的是自己的地址，可以是<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>也可以是localhost，后面的端口号可以写也可以不写，最后flask是我们在mysql中创建的数据库。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行最上面的代码前，需要在mysql中运行下列代码：</p><pre class="line-numbers language-mysql"><code class="language-mysql">create database flask         # 创建flaks数据库use flask        # 进入flask数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="一些后面要用到的代码"><a href="#一些后面要用到的代码" class="headerlink" title="一些后面要用到的代码"></a>一些后面要用到的代码</h4><pre class="line-numbers language-mysql"><code class="language-mysql">show database;        # 查看有哪些数据库show tables;        # 查看数据库下有哪些表desc roles;        # 查看表中有哪些字段名及数据类型select * from roles;        # 查询某个表中所有数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：在mysql中写代码，每句代码结尾都要跟上‘；’分号。</p><p>然后再运行python代码，在mysql中执行show tables;代码效果如图：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210524171951262.png"><p>可以发现mysql中成功创建了两个表。</p><p>为了在表中添加数据，我们用pycharm自带终端/python控制台来添加数据:</p><p>推荐使用Python控制台，因为如果使用的是虚拟环境，终端输入ipython之后用的是base环境，不是虚拟环境，会导致报错，而python控制台本身就是虚拟环境下的ipython。</p><p>执行下列代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> app <span class="token keyword">from</span> <span class="token operator">*</span>            <span class="token comment" spellcheck="true"># 导入一个模块，其中app为py文件的名字</span>role  <span class="token operator">=</span> Role<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 调用类，传入一个name参数</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>role<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加到数据库的session中</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#提交数据库的修改(包括增/删/改)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后再mysql中执行select * from roles*,结果如图:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210524173231779.png"><p>可以发现在roles表中已经添加了一条数据。</p><p>接着我们在users表中添加如下数据：</p><pre class="line-numbers language-mysql"><code class="language-mysql">user = User(name = 'heima',role_id = role.id)        # 因为User中的role_id是Role中id的外键，role.id是取role对象的id，role的id默认生成了一个1。db.session.add(user)        # 添加修改db.session.commit()            # 提交修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在mysql中执行:</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from users        # 查询users表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210524174008843.png"><p>成功添加了一条数据；</p><p><strong>方法汇总:</strong></p><pre><code>db.session.add(role)    添加到数据库的session中db.session.add_all([user1, user2]) 添加多个信息到session中db.session.commit()     提交数据库的修改(包括增/删/改)db.session.rollback()   数据库的回滚操作db.session.delete(user) 删除数据库(需跟上commit)</code></pre><h3 id="3-修改数据表中的数据"><a href="#3-修改数据表中的数据" class="headerlink" title="3 修改数据表中的数据"></a>3 修改数据表中的数据</h3><ul><li>以下步骤都是在上面步骤完成的情况下追加的。</li></ul><pre class="line-numbers language-python"><code class="language-python">user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'chengxuyuan'</span>        <span class="token comment" spellcheck="true"># 将user对象的name改成‘chengxuyuan'db.session.commit()            # 直接提交，不需要add</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210524174812523.png"><h3 id="4-删除数据表的中数据"><a href="#4-删除数据表的中数据" class="headerlink" title="4.删除数据表的中数据"></a>4.删除数据表的中数据</h3><pre class="line-numbers language-python"><code class="language-python">db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>user<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 将user对象的name从数据表中删除db.session.commit()            # 直接提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210524174847453.png"><h4 id="5-汇总"><a href="#5-汇总" class="headerlink" title="5.汇总"></a>5.<strong>汇总</strong></h4><pre><code>#### 2.2 数据的增删改​```python# 进入ipython一次执行In [1]: from demo3_sqlalchemy import *# 添加一条Role数据In [2]: role = Role(name='admin')In [3]: db.session.add(role)In [4]: db.session.commit()# 添加一条User数据, 数据有误可以使用回滚, 将add的对象从session移除In [5]: user = User(name='zhangsan')In [6]: db.session.add(user)In [7]: db.session.rollback()In [9]: user.role_id = 1In [6]: db.session.add(user)In [4]: db.session.commit()# 修改数据In [13]: user.name = 'lisi'In [14]: db.session.commit()# 删除数据In [16]: db.session.delete(user)In [17]: db.session.commit()</code></pre><h2 id="二、模型之间的关联"><a href="#二、模型之间的关联" class="headerlink" title="二、模型之间的关联"></a>二、模型之间的关联</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置数据的地址</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql://root:mysql@127.0.0.1/flask'</span><span class="token comment" spellcheck="true"># 配置数据库是否动态追踪修改设置，如未设置只会提示警告, 不建议开启</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''两张表(管理员/普通用户)角色(角色ID)'''</span><span class="token comment" spellcheck="true"># 数据库的模型，需要继承db.Model</span><span class="token keyword">class</span> <span class="token class-name">Role</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义表名</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'roles'</span>    <span class="token comment" spellcheck="true"># 定义字段</span>    <span class="token comment" spellcheck="true"># db.Column表示一个字段</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 主键</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在一的一方，写关联。</span>    <span class="token comment" spellcheck="true"># users = db.relattionship('User'):表示和User模型发生了关联，增加了一个user属性</span>    <span class="token comment" spellcheck="true"># backref = 'role'：表示role是User要用的属性</span>    users <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">'role'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\n&lt;Role: %s %s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    role_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'roles.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 表示是表roles的外键</span>    <span class="token comment" spellcheck="true"># User希望有role属性，但是这个属性的定义，需要在另一个模型中定义。</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\n&lt;User: %s %s %s %s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>id<span class="token punctuation">,</span> self<span class="token punctuation">.</span>email<span class="token punctuation">,</span> self<span class="token punctuation">.</span>password<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 删除表</span>    db<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建表</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python控制台</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> app <span class="token keyword">import</span> <span class="token operator">*</span>role <span class="token operator">=</span> Role<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>role<span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>user1 <span class="token operator">=</span> User<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>role_id <span class="token operator">=</span> role<span class="token punctuation">.</span>id<span class="token punctuation">)</span>user2 <span class="token operator">=</span> User<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'ls'</span><span class="token punctuation">,</span>role_id <span class="token operator">=</span> role<span class="token punctuation">.</span>id<span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>user1<span class="token punctuation">,</span>user2<span class="token punctuation">]</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>role<span class="token punctuation">.</span>users            <span class="token comment" spellcheck="true"># 通过role.users可以查到User中的数据信息</span><span class="token operator">></span> <span class="token punctuation">[</span>User<span class="token punctuation">:</span> <span class="token number">1</span> zs <span class="token number">1</span> <span class="token punctuation">,</span> User<span class="token punctuation">:</span> <span class="token number">2</span> ls <span class="token number">1</span> <span class="token punctuation">]</span>user1<span class="token punctuation">.</span>role            <span class="token comment" spellcheck="true"># 通过user1.role可以查询出user1的Role信息</span><span class="token operator">></span> Role<span class="token punctuation">:</span> <span class="token number">1</span> admin user2<span class="token punctuation">.</span>role<span class="token operator">></span> Role<span class="token punctuation">:</span> <span class="token number">1</span> admin <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、查询操作"><a href="#三、查询操作" class="headerlink" title="三、查询操作"></a>三、查询操作</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><h3 id="1-1-常用的SQLAlchemy查询过滤器"><a href="#1-1-常用的SQLAlchemy查询过滤器" class="headerlink" title="1.1 常用的SQLAlchemy查询过滤器"></a>1.1 常用的SQLAlchemy查询过滤器</h3><table><thead><tr><th align="left">过滤器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">filter()</td><td align="left">把过滤器添加到原查询上，返回一个新查询</td></tr><tr><td align="left">filter_by()</td><td align="left">把等值过滤器添加到原查询上，返回一个新查询</td></tr><tr><td align="left">limit</td><td align="left">使用指定的值限定原查询返回的结果</td></tr><tr><td align="left">offset()</td><td align="left">偏移原查询返回的结果，返回一个新查询</td></tr><tr><td align="left">order_by()</td><td align="left">根据指定条件对原查询结果进行排序，返回一个新查询</td></tr><tr><td align="left">group_by()</td><td align="left">根据指定条件对原查询结果进行分组，返回一个新查询</td></tr></tbody></table><h3 id="1-2-常用的SQLAlchemy查询执行器"><a href="#1-2-常用的SQLAlchemy查询执行器" class="headerlink" title="1.2 常用的SQLAlchemy查询执行器"></a>1.2 常用的SQLAlchemy查询执行器</h3><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">all()</td><td align="left">以列表形式返回查询的所有结果</td></tr><tr><td align="left">first()</td><td align="left">返回查询的第一个结果，如果未查到，返回None</td></tr><tr><td align="left">first_or_404()</td><td align="left">返回查询的第一个结果，如果未查到，返回404</td></tr><tr><td align="left">get()</td><td align="left">返回指定主键对应的行，如不存在，返回None</td></tr><tr><td align="left">get_or_404()</td><td align="left">返回指定主键对应的行，如不存在，返回404</td></tr><tr><td align="left">count()</td><td align="left">返回查询结果的数量</td></tr><tr><td align="left">paginate()</td><td align="left">返回一个Paginate对象，它包含指定范围内的结果</td></tr></tbody></table><p>先在python中直接创建好数据，创建数据的代码写在创建数据库的后面，代码如下:</p><pre class="line-numbers language-python"><code class="language-python">    ro1 <span class="token operator">=</span> Role<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'admin'</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>ro1<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 再次插入一条数据    ro2 = Role(name='user')    db.session.add(ro2)    db.session.commit()    us1 = User(name='wang', email='wang@163.com', password='123456', role_id=ro1.id)    us2 = User(name='zhang', email='zhang@189.com', password='201512', role_id=ro2.id)    us3 = User(name='chen', email='chen@126.com', password='987654', role_id=ro2.id)    us4 = User(name='zhou', email='zhou@163.com', password='456789', role_id=ro1.id)    us5 = User(name='tang', email='tang@itheima.com', password='158104', role_id=ro2.id)    us6 = User(name='wu', email='wu@gmail.com', password='5623514', role_id=ro2.id)    us7 = User(name='qian', email='qian@gmail.com', password='1543567', role_id=ro1.id)    us8 = User(name='liu', email='liu@itheima.com', password='867322', role_id=ro1.id)    us9 = User(name='li', email='li@163.com', password='4526342', role_id=ro2.id)    us10 = User(name='sun', email='sun@163.com', password='235523', role_id=ro2.id)    db.session.add_all([us1, us2, us3, us4, us5, us6, us7, us8, us9, us10])    db.session.commit()</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新运行程序，查看数据表中有没有新增数据:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210525172150895.png"><p>正确运行后的结果如上图。</p><p>在上面的基础上进行查询如下：</p><p>进入pycharm内置的Python控制台:</p><pre class="line-numbers language-Python"><code class="language-Python">from app import *User.query.all()        # 查询users表中有哪些数据User.query.count()        # 查询表中有多少条数据User.query.first()            # 查询表中的第一条数据User.query.get(4)            # 查询id为4的数据User.query.filter_by(id=4).first()            # 同上 注意写法User.query.filter(User.id==4).first()            # 同上 注意写法'''filter_by:属性=filter:对象.属性==filter功能更强大，可以实现更多的一些查询，支持比较运算符'''<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>上述结果如下图:</strong></p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210525175554685-1624169534725.png"><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210525174147252.png"><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210525175615214.png"><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210525180057263.png"><h2 id="十三、综合案例-图书管理-完结篇"><a href="#十三、综合案例-图书管理-完结篇" class="headerlink" title="十三、综合案例-图书管理-完结篇"></a>十三、综合案例-图书管理-完结篇</h2><p>代码:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>flash<span class="token punctuation">,</span>request<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>redirect<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy<span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span>SubmitField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> DataRequiredapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#数据库配置：连接数据库/自动跟踪修改关闭</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql://root:mysql@127.0.0.1/flask_books'</span><span class="token triple-quoted-string string">'''务必将数据库创建好,记得指定数据库编码为UTF-8，即create database flask_books charset=utf8;不然会报错'''</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>app<span class="token punctuation">.</span>secret_key<span class="token operator">=</span><span class="token string">'heima'</span>      <span class="token comment" spellcheck="true"># 设置secret_key，不设置会报错</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建对象</span><span class="token triple-quoted-string string">'''实例步骤描述:1.配置数据库    # 导入模块    # 创建app实例并配置参数    # mysql里创建好数据库2.添加书和作者模型    # 模型继承db.Model    # __tablename__定义表名    # db.Column定义字段    # 关系引用3.添加数据4.使用模板显示数据库查询数据 # 查询所有作者信息，让信息传递给模板    # 模板中按照格式，依次for循环作者和书籍即可(作者获取书籍，用的是关系引用)5.使用WTF使用表单    # 自定义表单类    # 模板中显示    # secret_key 解决编码问题，csrf_token问题6.实现相关的增删逻辑    # 增加数据    # 删除书籍  -- 网页中删除 -- 点击需要发送书籍的ID给删除书籍的路由 -- 路由需要接受参数    '''</span><span class="token comment" spellcheck="true"># 作者模型</span><span class="token keyword">class</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 创建作者类</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'authors'</span>       <span class="token comment" spellcheck="true"># 创建的表名</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 创建作者id字段</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 创建作者名称字段</span>    <span class="token comment" spellcheck="true"># 关系引用，即通过作者表中的作者id可以查询到与书表中作者id相同的数据</span>    <span class="token comment" spellcheck="true"># books是给自己（Author模型)用的，auther是给Book模型用的</span>    books <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'Book'</span><span class="token punctuation">,</span>backref<span class="token operator">=</span><span class="token string">'author'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 返回结果格式化</span>        <span class="token keyword">return</span> <span class="token string">'Author: %s '</span> <span class="token operator">%</span>self<span class="token punctuation">.</span>name<span class="token comment" spellcheck="true"># 书籍模型</span><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 创建书类</span>    <span class="token comment" spellcheck="true"># 表名</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'books'</span>     <span class="token comment" spellcheck="true"># 创建的表名</span>    <span class="token comment" spellcheck="true"># 定义字段</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    author_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'authors.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># authors表的外键,表名.id</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 返回结果格式化</span>        <span class="token keyword">return</span> <span class="token string">'Book: %s %s '</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>author_id<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 自定义表单类</span><span class="token keyword">class</span> <span class="token class-name">AuthorForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建表单类，用于在网页中显示表单时会用到</span>    author <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'作者'</span><span class="token punctuation">,</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#创建作者输入框</span>    book <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'书籍'</span><span class="token punctuation">,</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建书名输入框</span>    submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'提交'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 创建提交按钮</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/delete_author/&lt;author_id>'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建删除作者路由</span><span class="token keyword">def</span> <span class="token function">delete_author</span><span class="token punctuation">(</span>author_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 查询数据库，是否有该ID的作者，如果有就删除，没有提示错误。</span>    author <span class="token operator">=</span> Author<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span>author_id<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 查询传入的作者的id，若查询到即author有值，反之无值</span>    <span class="token comment" spellcheck="true"># 如果有就删除</span>    <span class="token keyword">if</span> author<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 根据author判断，若数据库中存在这个作者</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            Book<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>author_id<span class="token operator">=</span>author<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 根据作者id将书删除</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 提交数据</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印错误信息</span>            flash<span class="token punctuation">(</span><span class="token string">'删除作者出错'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 在网页显示删除作者出错</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 数据库回滚，即撤销操作</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 若不存在</span>        <span class="token comment" spellcheck="true"># 没有提示错误</span>        flash<span class="token punctuation">(</span><span class="token string">'作者找不到'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># return redirect('/')</span>    <span class="token comment" spellcheck="true"># redirect:重定向，需要传入域名/路由地址</span>    <span class="token comment" spellcheck="true"># url_for（’index‘）:需要传入视图函数名，返回视图函数对应的路由地址</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># url_for('index')的返回结果为'/'即根目录，相当于redirect('/')重定向到根目录</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/delete_book/&lt;book_id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_book</span><span class="token punctuation">(</span>book_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 查询数据库，是否有该ID的书，如果有就删除，没有提示错误。</span>    book <span class="token operator">=</span> Book<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span>book_id<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果有就删除</span>    <span class="token keyword">if</span> book<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>book<span class="token punctuation">)</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            flash<span class="token punctuation">(</span><span class="token string">'删除书籍出错'</span><span class="token punctuation">)</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 没有提示错误</span>        flash<span class="token punctuation">(</span><span class="token string">'书籍找不到'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># return redirect('/')</span>    <span class="token comment" spellcheck="true"># redirect:重定向，需要传入域名/路由地址</span>    <span class="token comment" spellcheck="true"># url_for（’index‘）:需要传入视图函数名，返回视图函数对应的路由地址</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># url_for('index')的返回结果为'/'即根目录，相当于redirect('/')重定向到根目录</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建自定义表单类</span>    author_form <span class="token operator">=</span>AuthorForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    验证逻辑:    1.调用WTF的验证函数实现验证    2.验证通过获取数据    3.判断作者是否存在    4.如果作者存在，判断书籍是否存在，没有重复书籍就添加书籍，重复就提示错误    5.如果作者不存在，直接添加作者和书籍    6.验证不通过就提示错误        '''</span>    <span class="token keyword">if</span> author_form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 验证通过获取数据</span>        author_name <span class="token operator">=</span> author_form<span class="token punctuation">.</span>author<span class="token punctuation">.</span>data      <span class="token comment" spellcheck="true">#获取输入的作者数据</span>        book_name <span class="token operator">=</span> author_form<span class="token punctuation">.</span>book<span class="token punctuation">.</span>data         <span class="token comment" spellcheck="true"># 获取输入的书名数据</span>        <span class="token comment" spellcheck="true"># 判断作者是否存在</span>        author <span class="token operator">=</span> Author<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name <span class="token operator">=</span> author_name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 查询输入的作者名称是否在数据库中存在</span>        <span class="token keyword">if</span> author<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 进行判断语句</span>            book <span class="token operator">=</span> Book<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name <span class="token operator">=</span> book_name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> book<span class="token punctuation">:</span>                flash<span class="token punctuation">(</span><span class="token string">'已存在同名书籍'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    new_book <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span>book_name<span class="token punctuation">,</span>author_id<span class="token operator">=</span>author<span class="token punctuation">.</span>id<span class="token punctuation">)</span>                    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_book<span class="token punctuation">)</span>                    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                    flash<span class="token punctuation">(</span><span class="token string">'添加书籍失败'</span><span class="token punctuation">)</span>                    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                new_author <span class="token operator">=</span> Author<span class="token punctuation">(</span>name <span class="token operator">=</span> author_name<span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_author<span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                new_book <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span>book_name<span class="token punctuation">,</span> author_id<span class="token operator">=</span>new_author<span class="token punctuation">.</span>id<span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_book<span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                flash<span class="token punctuation">(</span><span class="token string">'添加作者和书籍失败'</span><span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 验证不通过就提示错误</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'参数不全'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询所有的作者信息，让信息传递给模板</span>    authors <span class="token operator">=</span> Author<span class="token punctuation">.</span>query<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    验证逻辑:    1.调用WTF的函数实现验证    2.验证通过获取数据    3.判断作者是否存在    4.如果作者存在，判断书记是否存在，没有重复书籍就可以添加书籍，若重复，则提示错误    5.如果作者不存在，添加作者和书籍。    6.验证不通过就提示错误    '''</span>    <span class="token comment" spellcheck="true"># 1.调用WTF的函数实现验证</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'books.html'</span><span class="token punctuation">,</span>authors<span class="token operator">=</span>authors<span class="token punctuation">,</span>form <span class="token operator">=</span> author_form<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 生成数据</span>    au1 <span class="token operator">=</span> Author<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'老王'</span><span class="token punctuation">)</span>    au2 <span class="token operator">=</span> Author<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'老惠'</span><span class="token punctuation">)</span>    au3 <span class="token operator">=</span> Author<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'老刘'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把数据提交给用户会话</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>au1<span class="token punctuation">,</span> au2<span class="token punctuation">,</span> au3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 提交会话</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    bk1 <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'老王回忆录'</span><span class="token punctuation">,</span> author_id<span class="token operator">=</span>au1<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    bk2 <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'我读书少，你别骗我'</span><span class="token punctuation">,</span> author_id<span class="token operator">=</span>au1<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    bk3 <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'如何才能让自己更骚'</span><span class="token punctuation">,</span> author_id<span class="token operator">=</span>au2<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    bk4 <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'怎样征服美丽少女'</span><span class="token punctuation">,</span> author_id<span class="token operator">=</span>au3<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    bk5 <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'如何征服英俊少男'</span><span class="token punctuation">,</span> author_id<span class="token operator">=</span>au3<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把数据提交给用户会话</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>bk1<span class="token punctuation">,</span> bk2<span class="token punctuation">,</span> bk3<span class="token punctuation">,</span> bk4<span class="token punctuation">,</span> bk5<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 提交会话</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html:</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form method="post"&gt;    {{ form.csrf_token() }}    {{ form.author.label }}{{ form.author }}&lt;br&gt;    {{ form.book.label }}{{ form.book }}&lt;br&gt;    {{ form.submit}}&lt;br&gt;    {# 显示消息闪现内容 #}    {% for message in get_flashed_messages()%}        {{ message }}    {% endfor%}&lt;/form&gt;&lt;hr&gt;&lt;ul&gt;    {% for author in authors %}        <li>{{ author.name }}<a href="{{" url_for("delete_author",author_id="author.id)" &#125;&#125;="">删除</a></li>    </code><ul><code class="html">        {% for book in author.books %}            <li>{{ book.name }}<a href="{{" url_for("delete_book",book_id="book.id)" &#125;&#125;="">删除</a></li>            {% else %}                <li>无</li>        {% endfor%}    &lt;/ul&gt;    {% endfor %}&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></ul></pre><p>运行结果：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210526203705733.png"><p>功能描述：</p><p>输入了作者和书籍，点击提交，会判断作者是否存在，存在就添加书籍，还会判断书是否存在，如果存在会提示书籍已存在，如果作者和书籍都不存在就都添加。点击删除可以实现删除，当作者没有书时会只显示一个无。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Anaconda3环境配置指南</title>
      <link href="year/05/16/linux-an-zhuang-anaconda3-huan-jing-pei-zhi-zhi-nan/"/>
      <url>year/05/16/linux-an-zhuang-anaconda3-huan-jing-pei-zhi-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装Anaconda3环境配置指南"><a href="#Linux安装Anaconda3环境配置指南" class="headerlink" title="Linux安装Anaconda3环境配置指南"></a>Linux安装Anaconda3环境配置指南</h1><h2 id="1-添加jupyter环境变量"><a href="#1-添加jupyter环境变量" class="headerlink" title="1.添加jupyter环境变量"></a>1.添加jupyter环境变量</h2><pre class="line-numbers language-linux"><code class="language-linux">find -name jupyter        找jupyter的位置vim /etc/profile        编辑文件根据找到的位置,在最后一行添加,PATH后面跟的路径自行改变：export PATH=$PATH:/root/anaconda3/bin source  /etc/profile/         执行配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h2><pre class="line-numbers language-linux"><code class="language-linux">jupyter notebook --generate-config        生成配置文件vim  /root/.jupyter/jupyter_notebook_config.py         编辑配置文件添加代码：c.NotebookApp.ip = '*'        配置可以访问的ip为所有ipc.NotebookApp.open_browser = False        配置不自动打开浏览器c.NotebookApp.port = 8888        配置服务端口为888jupyter notebook --allow-root&  开启服务，root用户需要加--allow-root，&代表在后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Anaconda </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda创建python环境</title>
      <link href="year/05/11/conda-chuang-jian-python-huan-jing/"/>
      <url>year/05/11/conda-chuang-jian-python-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Cnda创建python环境"><a href="#Cnda创建python环境" class="headerlink" title="Cnda创建python环境"></a>Cnda创建python环境</h1><h2 id="1-列出当前存在的环境"><a href="#1-列出当前存在的环境" class="headerlink" title="1 列出当前存在的环境"></a>1 列出当前存在的环境</h2><p>可以用以下命令罗列出当前已经创建的python虚拟环境</p><p><img src="http://tva1.sinaimg.cn/large/007gOsxTgy1gvvfvtklcsj32yo1o0e2l.jpg" alt="3f878fc75ad84405bffa29a309238655.jpg"></p><p>[IMG]<a href="http://tva1.sinaimg.cn/large/007gOsxTgy1gvvfualuzgj32yo1o0e2l.jpg[/IMG]">http://tva1.sinaimg.cn/large/007gOsxTgy1gvvfualuzgj32yo1o0e2l.jpg[/IMG]</a></p><pre class="line-numbers language-cpp"><code class="language-cpp">conda env list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>罗列结果如下所示:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Album_Src/Conda_list.jpg"><p>左边是虚拟环境的名称，右边是其所在路径，带星号的表示是默认环境。</p><h2 id="2-创建虚拟环境"><a href="#2-创建虚拟环境" class="headerlink" title="2 创建虚拟环境"></a>2 创建虚拟环境</h2><p>可以用如下命令创建一个名字为my_py_env，python版本为3.6.2的虚拟环境。</p><pre class="line-numbers language-undefined"><code class="language-undefined">conda create -n my_py_env python=3.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该方式创建的环境在默认路径下，可以通过以下方式指定路径：</p><pre class="line-numbers language-swift"><code class="language-swift">conda create <span class="token operator">--</span><span class="token keyword">prefix</span><span class="token operator">=</span><span class="token string">"D:\\my_python\\envs\\my_py_env"</span>  python<span class="token operator">=</span><span class="token number">3.6</span><span class="token punctuation">.</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中”D:\my_python\envs"是路径名，”my_py_env” 是环境名.</p><h2 id="3-进入环境"><a href="#3-进入环境" class="headerlink" title="3 进入环境"></a>3 进入环境</h2><pre class="line-numbers language-undefined"><code class="language-undefined">activate my_py_env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在windows系统cmd下通过以上命令即可进入my_py_env环境，如果在linux系统下，需要使用：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> activate my_py_env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-退出环境"><a href="#4-退出环境" class="headerlink" title="4 退出环境"></a>4 退出环境</h2><p>windows:</p><pre class="line-numbers language-undefined"><code class="language-undefined">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>linux：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-使用conda管理包"><a href="#5-使用conda管理包" class="headerlink" title="5 使用conda管理包"></a>5 使用conda管理包</h2><pre class="line-numbers language-undefined"><code class="language-undefined">conda install -n my_py_env package_nameconda uninstall -n my_py_env package_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只需要在conda命令中通过 -n 显示指定python环境即可</p><h2 id="6-删除环境"><a href="#6-删除环境" class="headerlink" title="6 删除环境"></a>6 删除环境</h2><pre class="line-numbers language-csharp"><code class="language-csharp">conda <span class="token keyword">remove</span> <span class="token operator">-</span>n my_py_env <span class="token operator">--</span>all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的itertools的使用详解</title>
      <link href="year/05/03/python-zhong-de-itertools-de-shi-yong-xiang-jie/"/>
      <url>year/05/03/python-zhong-de-itertools-de-shi-yong-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Python中的itertools的使用详解"><a href="#Python中的itertools的使用详解" class="headerlink" title="Python中的itertools的使用详解"></a>Python中的itertools的使用详解</h1><p><strong>1.无穷的迭代器</strong></p><p>1.1 count(start,[step])</p><p>count()接受两个参数</p><ul><li> start:循环开始的数字</li><li> step:循环中的间隔</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> count <span class="token triple-quoted-string string">"""无穷的迭代器 count()"""</span>c <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>v <span class="token operator">=</span> next<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">while</span> v <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>  v <span class="token operator">=</span> next<span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.2 cycle()</p><p>cycle就是一while True，无限循环里面的数字。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""无穷迭代器 cycle()"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> cycle c <span class="token operator">=</span> cycle<span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.3 repeat(elem,[n])</p><p>重复迭代elem，n次</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""无穷迭代器 repeat()"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> repeat r <span class="token operator">=</span> repeat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 迭代器</strong></p><p>2.1 accumulate(p,[func])</p><p>使用func的函数对迭代对象p进行累积。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""迭代器 accumulate()"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> accumulate test_list <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> accumulate<span class="token punctuation">(</span>test_list<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 默认是operator.add</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> accumulate<span class="token punctuation">(</span>test_list<span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># operator.mul</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 chain()</p><p>chain()中可以放多个迭代对象，然后一一迭代出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""迭代器 chain()"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain ch <span class="token operator">=</span> chain<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ch<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.3 chain.from_iterable()</p><p>跟chain不同的地方在于:</p><ul><li> chain: 可以接受多个迭代对象</li><li> chain.from_iterable():可以接受一个可以产生迭代对象的迭代器</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""迭代器 chain.from_iterable()"""</span><span class="token keyword">def</span> <span class="token function">gen_iterables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> chain<span class="token punctuation">.</span>from_iterable<span class="token punctuation">(</span>gen_iterables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.4 compress(data,selectors)</p><p>这是就是看下这个就知道了s是selectors中的元素。<br>(d[0] if s[0]), (d[1] if s[1]), …</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""迭代器 compress"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> compress <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>compress<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.5 dropwhile(pred,seq)</p><p>循环开始的条件是，直到遇到第一次不满足pred条件的情况，才开始遍历。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""迭代器 dropwhile()"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> dropwhile l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>dropwhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.6 groupby</p><p>这个感觉挺有意思的，有点像sql中的group_by。可以对字符串，列表等进行分组。</p><p>返回键和，组里的内容</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> groupby <span class="token comment" spellcheck="true"># 对字符串进行分组</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> g <span class="token keyword">in</span> groupby<span class="token punctuation">(</span><span class="token string">'11111234567'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> list<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 按照字典value来进行分组</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> g <span class="token keyword">in</span> groupby<span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> list<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.7 islice<br>这个就是对迭代对象进行切割，不支持负数，有点像range(1,10,2)这种</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> islice<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>islice<span class="token punctuation">(</span><span class="token string">'ABCDEFG'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.8 zip_longest</p><p>这个和zip很像，不同地方在于:</p><ul><li> zip结束取决于里面最短的迭代对象</li><li> zip_longest结束取决于里面最长的迭代对象</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> zip_longest <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> zip_longest<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> zip<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>排列组合迭代器</strong></p><p>3.1 product</p><p>相当于 嵌套的for</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""排列组合迭代器 product 嵌套的for"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> product<span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> product<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.2 permutations</p><p>全排列，比如输出123的全部情况。(1,2,3),(1,3,2)…</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> permutations<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>permutations<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.3 combinations(p,r)</p><p>从p中找出所有长度为r的排列情况… 有顺序</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> combinations<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>combinations<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.4 combinations_with_replacement()</p><p>从p中找出所有长度为r的排列情况，有顺序，但包括自身就是会重复的意思。</p><ul><li> combinations_with_replacement(‘ABCD’, 2)</li><li> AA AB AC AD BB BC BD CC CD DD</li></ul><p>了解是了解了，就是用的时候不知道能不能想起来…</p><p>以上就是本文的全部内容，希望对大家的学习有所帮助，也希望大家多多支持服务器之家。</p><p>原文链接：<a href="https://blog.csdn.net/qq_36659627/article/details/103926495">https://blog.csdn.net/qq_36659627/article/details/103926495</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git仓库小记</title>
      <link href="year/04/29/git-cang-ku-xiao-ji/"/>
      <url>year/04/29/git-cang-ku-xiao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Git仓库小记"><a href="#Git仓库小记" class="headerlink" title="Git仓库小记"></a>Git仓库小记</h1><h2 id="1-关联远程仓库"><a href="#1-关联远程仓库" class="headerlink" title="1.关联远程仓库"></a>1.关联远程仓库</h2><ul><li><p>打开Git bush输入：</p><pre class="line-numbers language-Git"><code class="language-Git">git remote add origin git@github.com:zhaotaogit/images.git  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>​    origin为仓库地址的重命名，后面的链接为仓库链接。</li></ul><blockquote><p>如果git remote add时出现fatal:remote origin already exists,表示origin这个名字已经有了。</p><p>可以用Git remote -v 查看远程仓库信息。</p><p>然后 git remote remove origin删除这个远程仓库</p><p>origin职业仓库链接的别名，可以随便起</p></blockquote></li></ul><h2 id="2-创建版本库并提交文件"><a href="#2-创建版本库并提交文件" class="headerlink" title="2.创建版本库并提交文件"></a>2.创建版本库并提交文件</h2><ul><li>初始化git本地仓库    <ul><li>通过执行git init命令在本地初始化一个本地仓库，会在文件夹中生成一个.git的隐藏文件</li></ul></li><li>通过git status命令查看暂存区情况</li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/20210620140151.png"><ul><li><p>创建完文件查看再暂存区，会提示你用git add将文件添加到暂存区</p></li><li><p>通过git add path 命令添加文件到暂存区,path是文件路径</p><ul><li>git add . 是将所有文件添加到暂存区</li></ul></li><li><p>执行git commit命令将暂存区里的改动给提交到本地的版本库，一般使用时会加-m：</p><ul><li>git commit -m “描述”,简单描述这次调教的语句。</li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/git%E6%8E%A8%E9%80%81%E5%92%8C%E4%B8%8A%E4%BC%A0.png"></li></ul><h2 id="3-把本地仓库推送到远程仓库"><a href="#3-把本地仓库推送到远程仓库" class="headerlink" title="3.把本地仓库推送到远程仓库"></a>3.把本地仓库推送到远程仓库</h2><ul><li><p>第一次推送,把本地的main和远程的main分支关联起来：</p><pre><code>git push -u origin main</code></pre><ul><li>第一次推送要加-u</li></ul></li></ul><ul><li><p>若在网页版创建了一个仓库，第一次提交不上去的话，需要先合并远程仓库的内容,然后再重新提交</p><pre class="line-numbers language-python"><code class="language-python">git pull <span class="token operator">-</span><span class="token operator">-</span>rebase origin main    <span class="token comment" spellcheck="true"># 合并远程内容到本地</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>非第一次推送</p><pre class="line-numbers language-Git"><code class="language-Git">git push origin main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/%E6%95%88%E6%9E%9C.png"><h2 id="4-克隆远程仓库"><a href="#4-克隆远程仓库" class="headerlink" title="4.克隆远程仓库"></a>4.克隆远程仓库</h2><ul><li><p>在你想要克隆到的位置打开Git bash</p><pre class="line-numbers language-Git"><code class="language-Git">git clone 链接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>链接写自己仓库的链接，然后回到文件夹就看到远程仓库的文件已经下载到本地了。</li></ul></li></ul><h2 id="5-把服务器仓库的更新拉到本地仓库中"><a href="#5-把服务器仓库的更新拉到本地仓库中" class="headerlink" title="5.把服务器仓库的更新拉到本地仓库中"></a>5.把服务器仓库的更新拉到本地仓库中</h2><pre class="line-numbers language-Git"><code class="language-Git">git pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-创建分支并进入"><a href="#6-创建分支并进入" class="headerlink" title="6.创建分支并进入"></a>6.创建分支并进入</h2><ul><li>创建main分支，其实仓库里默认就有main分支，可以创建其他分支。</li></ul><pre class="line-numbers language-Git"><code class="language-Git">git checkout -b main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="7-删除本地分支"><a href="#7-删除本地分支" class="headerlink" title="7.删除本地分支"></a>7.删除本地分支</h1><ul><li><p>删除本地的master分支</p><pre class="line-numbers language-Git"><code class="language-Git">git branch -D master <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="8-删除Github项目上的分支"><a href="#8-删除Github项目上的分支" class="headerlink" title="8.删除Github项目上的分支"></a>8.删除Github项目上的分支</h2><ul><li>删除Github项目上的mster分支</li></ul><pre class="line-numbers language-Git"><code class="language-Git">git push origin --delete master <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-删除仓库"><a href="#9-删除仓库" class="headerlink" title="9.删除仓库"></a>9.删除仓库</h2><ol><li><p>进入要删除的仓库：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/20210620135848.png"></li><li><p>点击Settings：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/20210620135914.png"></li><li><p>拉倒页面最下面：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/20210620135937.png"></li><li><p>按照提示输入：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/20210620140006.png"></li></ol><p>即可删除！</p><h1 id="10参考链接"><a href="#10参考链接" class="headerlink" title="10参考链接"></a>10参考链接</h1><h2 id="1-远程分支—-git-pull和git-push命令用法介绍"><a href="#1-远程分支—-git-pull和git-push命令用法介绍" class="headerlink" title="1.远程分支—-git pull和git push命令用法介绍"></a><a href="https://blog.csdn.net/qq_42780289/article/details/97804091?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&amp;dist_request_id=1619705520604_31908&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">1.远程分支—-git pull和git push命令用法介绍</a></h2>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Pandas一些命令笔记-持续更新</title>
      <link href="year/04/27/python-pandas-yi-xie-ming-ling-bi-ji-chi-xu-geng-xin/"/>
      <url>year/04/27/python-pandas-yi-xie-ming-ling-bi-ji-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-一些命令笔记-持续更新"><a href="#Python-一些命令笔记-持续更新" class="headerlink" title="Python-一些命令笔记-持续更新"></a>Python-一些命令笔记-持续更新</h1><h2 id="1-python的u-r-b分别什么意思？"><a href="#1-python的u-r-b分别什么意思？" class="headerlink" title="1.python的u,r,b分别什么意思？"></a>1.<a href="https://www.cnblogs.com/young233/p/11195577.html">python的u,r,b分别什么意思？</a></h2><p>我们经常在python当中看到以下内容：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在其他语言里没见过类似的，所以特此记录：</p><h3 id="u-表示unicode字符串，默认模式，里边的特殊字符会被识别。"><a href="#u-表示unicode字符串，默认模式，里边的特殊字符会被识别。" class="headerlink" title="u: 表示unicode字符串，默认模式，里边的特殊字符会被识别。"></a>u: 表示unicode字符串，默认模式，里边的特殊字符会被识别。</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行之后：<br><strong>hi hi hi</strong></p><h3 id="b-表示二进制字符串，括号内的内容原样输出。"><a href="#b-表示二进制字符串，括号内的内容原样输出。" class="headerlink" title="b: 表示二进制字符串，括号内的内容原样输出。"></a>b: 表示二进制字符串，括号内的内容原样输出。</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行之后：<br><strong>b’hi\thi\thi’</strong></p><h3 id="r：不转义字符串，要输出的内容原样输出。"><a href="#r：不转义字符串，要输出的内容原样输出。" class="headerlink" title="r：不转义字符串，要输出的内容原样输出。"></a>r：不转义字符串，要输出的内容原样输出。</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行之后：<br><strong>hi\thi\thi</strong></p><h2 id="2-Pandas时间序列——date-range方法"><a href="#2-Pandas时间序列——date-range方法" class="headerlink" title="2.Pandas时间序列——date_range方法"></a>2.<a href="https://blog.csdn.net/wzyaiwl/article/details/90693214?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161952249816780271560229%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161952249816780271560229&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-90693214.first_rank_v2_pc_rank_v29&amp;utm_term=date_range">Pandas时间序列——date_range方法</a></h2><ul><li><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>date_range()方法主要用于生成一系列特定的时间，我们可以自己设定开始、结束、周期数、时间间隔、时区等等。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandaspandas<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span>None<span class="token punctuation">,</span> end<span class="token operator">=</span>None<span class="token punctuation">,</span> periods<span class="token operator">=</span>None<span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">,</span> tz<span class="token operator">=</span>None<span class="token punctuation">,</span> normalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">,</span> closed<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><p>start、end</p><p>开始时间、结束时间，可以是str格式，也可以是datetime对象或None。</p></li><li><p>periods</p><p>生成的周期数，可以是整数或None。</p></li></ul><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'1/08/2018'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-06'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-07'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-08'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-06'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-07'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-08'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>end<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-12-25'</span><span class="token punctuation">,</span> <span class="token string">'2017-12-26'</span><span class="token punctuation">,</span> <span class="token string">'2017-12-27'</span><span class="token punctuation">,</span> <span class="token string">'2017-12-28'</span><span class="token punctuation">,</span>               <span class="token string">'2017-12-29'</span><span class="token punctuation">,</span> <span class="token string">'2017-12-30'</span><span class="token punctuation">,</span> <span class="token string">'2017-12-31'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-01'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2018-04-27'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-04-24 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-25 12:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-04-27 00:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span>None<span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2018-04-27'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-25'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-26'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-27'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span>None<span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2018-04-27'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-27'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span>None<span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2018-04-27'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-04-24 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-24 18:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-04-25 12:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-26 06:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-04-27 00:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>freq</p><p>日期偏移量，即相邻时间的间隔，可以是str形式或DateOffset，默认为’D‘。</p></li></ul><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'5D'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-06'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-11'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-16'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-21'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'5D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-31'</span><span class="token punctuation">,</span> <span class="token string">'2018-02-28'</span><span class="token punctuation">,</span> <span class="token string">'2018-03-31'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-30'</span><span class="token punctuation">,</span>               <span class="token string">'2018-05-31'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-01 01:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-01 02:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-01 03:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-01 04:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> freq<span class="token operator">=</span>pd<span class="token punctuation">.</span>offsets<span class="token punctuation">.</span>MonthEnd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-31'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-30'</span><span class="token punctuation">,</span> <span class="token string">'2018-07-31'</span><span class="token punctuation">,</span> <span class="token string">'2018-10-31'</span><span class="token punctuation">,</span>               <span class="token string">'2019-01-31'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'3M'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>tz</p><p>设定时区，可以为str格式或tz fo。</p></li></ul><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token constant">In</span> <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span><span class="token function">date_range</span><span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> tz<span class="token operator">=</span><span class="token string">'Asia/Tokyo'</span><span class="token punctuation">)</span><span class="token constant">Out</span><span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token function">DatetimeIndex</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01 00:00:00+09:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02 00:00:00+09:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-03 00:00:00+09:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04 00:00:00+09:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05 00:00:00+09:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns, Asia/Tokyo]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token constant">In</span> <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span><span class="token function">date_range</span><span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> tz<span class="token operator">=</span><span class="token string">'Asia/Shanghai'</span><span class="token punctuation">)</span><span class="token constant">Out</span><span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token function">DatetimeIndex</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01 00:00:00+08:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02 00:00:00+08:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-03 00:00:00+08:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04 00:00:00+08:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05 00:00:00+08:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns, Asia/Shanghai]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>normalize</p><p>布尔值，默认为False，若参数为True表示将start、end参数值正则化到午夜时间戳；</p></li></ul><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018 14:00:00'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>normalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01 14:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02 14:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-03 14:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04 14:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05 14:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018 14:00:00'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>name</p><p>生成时间索引对象的名称，取值为str g或None；</p></li></ul><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span>None<span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'xiaowoniu'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> name<span class="token operator">=</span>u<span class="token string">'xiaowoniu'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>closed</p><p>若closed=’left’表示在返回的结果基础上，再取左闭右开的结果，若closed=’right’表示在返回的结果基础上，再取左开右闭的结果。当freq参数不为‘D’时，始终去掉的是为‘D‘时最左或最有的日期。</p></li></ul><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span>None<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-04'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-04'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span>None<span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Python-数据清洗之缺失数据填充fillna"><a href="#3-Python-数据清洗之缺失数据填充fillna" class="headerlink" title="3.Python 数据清洗之缺失数据填充fillna()"></a>3.<a href="https://blog.csdn.net/qq_21840201/article/details/81008566?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161960912416780261984422%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161960912416780261984422&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81008566.first_rank_v2_pc_rank_v29&amp;utm_term=fillna">Python 数据清洗之缺失数据填充fillna()</a></h2><ul><li><p>缺失数据比较多的情况下，可以直接滤除，缺失数据比较少时，对数据进行填充就很有必要了。</p></li><li><p>数据填充函数fillna（）默认参数如下：</p></li><li><p>- </p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> numpy <span class="token keyword">import</span> nan<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>nan<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>   <span class="token number">3</span>a   NaN   NaN   NaN   <span class="token number">6</span>b   NaN   NaN   NaN  <span class="token number">10</span>c  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">### 用0填充缺失数据</span>     <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>   <span class="token number">3</span>a  <span class="token number">13.0</span>  <span class="token number">14.0</span>  <span class="token number">15.0</span>   <span class="token number">6</span>b  <span class="token number">13.0</span>  <span class="token number">14.0</span>  <span class="token number">15.0</span>  <span class="token number">10</span>c  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'bfill'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">### 用相邻后面（back）特征填充前面空值</span>      <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>   <span class="token number">3</span>a  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>   <span class="token number">6</span>b  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">10</span>c  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span>nan<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>a   <span class="token number">3.0</span>   <span class="token number">4.0</span>   <span class="token number">5.0</span>   <span class="token number">6.0</span>b   NaN   NaN   NaN   NaNc  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14.0</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'bfill'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">### 用相邻前面（before）特征填充后面空值 </span>      <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>a   <span class="token number">3.0</span>   <span class="token number">4.0</span>   <span class="token number">5.0</span>   <span class="token number">6.0</span>b   <span class="token number">3.0</span>   <span class="token number">4.0</span>   <span class="token number">5.0</span>   <span class="token number">6.0</span>c  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14.0</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">values<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">### 用字典对不同的列填充不同的缺失数据</span>      <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>   <span class="token number">3</span>a  <span class="token number">10.0</span>  <span class="token number">20.0</span>  <span class="token number">30.0</span>   <span class="token number">6</span>b  <span class="token number">10.0</span>  <span class="token number">20.0</span>  <span class="token number">30.0</span>  <span class="token number">10</span>c  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java一些内置方法-持续更新</title>
      <link href="year/04/27/java-yi-xie-nei-zhi-fang-fa-chi-xu-geng-xin/"/>
      <url>year/04/27/java-yi-xie-nei-zhi-fang-fa-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-一些内置方法-持续更新"><a href="#Java-一些内置方法-持续更新" class="headerlink" title="Java 一些内置方法-持续更新"></a>Java 一些内置方法-持续更新</h1><h3 id="1-Java-split-用法方法"><a href="#1-Java-split-用法方法" class="headerlink" title="1. Java split()用法方法"></a>1. <a href="https://www.cnblogs.com/xiaoxiaohui2015/p/5838674.html">Java split()用法方法</a></h3><ul><li><p>例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>String address<span class="token operator">=</span><span class="token string">"上海\\上海市|闵行区\\吴中路"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> splitAddress<span class="token operator">=</span>address<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>splitAddress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Java%E4%B8%80%E4%BA%9B%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/image-20210531174727105.png"><blockquote><p>实现按字符切分</p></blockquote><h3 id="2-Java-substring-方法"><a href="#2-Java-substring-方法" class="headerlink" title="2.Java substring()方法"></a>2.Java substring()方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//提取下标为0-2(不包括2)的下标</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//提取最后一个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Java%E4%B8%80%E4%BA%9B%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/image-20210531174818062.png"><blockquote><p>实现根据下标取字符</p></blockquote><h3 id="3-Arrays-toString-方法"><a href="#3-Arrays-toString-方法" class="headerlink" title="3.Arrays.toString()方法"></a>3.Arrays.toString()方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>String string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">"igh"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Java%E4%B8%80%E4%BA%9B%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/image-20210531172051448.png"><blockquote><p>如果想要把数组中的内容打印出来,直接调用toString()方法只会打印出数组的地址,因此需要使用Arrays的toString()方法。这个方法是是用来将数组转换成String类型输出的，入参可以是long，float，double，int，boolean，byte，object型的数组。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
