<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flask入门</title>
      <link href="year/05/31/flask-ru-men/"/>
      <url>year/05/31/flask-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Flask入门-基于Ubuntu-Py3-85环境"><a href="#Flask入门-基于Ubuntu-Py3-85环境" class="headerlink" title="Flask入门-基于Ubuntu+Py3.85环境"></a>Flask入门-基于Ubuntu+Py3.85环境</h1><ul><li><p>调试命令</p><blockquote><p>export FLASK_ENV=development        # 打开调试模式</p><p>flask run –host=0.0.0.0        # 设置运行后，所有主机可见</p></blockquote></li><li><p>pycharm设置调试</p><blockquote><p>app.run(debug=True)</p></blockquote></li></ul><h2 id="一、创建虚拟环境-amp-激活虚拟环境-amp-安装Flask"><a href="#一、创建虚拟环境-amp-激活虚拟环境-amp-安装Flask" class="headerlink" title="一、创建虚拟环境&amp;激活虚拟环境&amp;安装Flask"></a>一、创建虚拟环境&amp;激活虚拟环境&amp;安装Flask</h2><blockquote><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>建议在开发环境和生产环境下都使用虚拟环境来管理项目的依赖。</p><p>为什么要使用虚拟环境？随着你的 Python 项目越来越多，你会发现不同的项目会需要 不同的版本的 Python 库。同一个 Python 库的不同版本可能不兼容。</p><p>虚拟环境可以为每一个项目安装独立的 Python 库，这样就可以隔离不同项目之间的 Python 库，也可以隔离项目与操作系统之间的 Python 库。</p><p>Python 3 内置了用于创建虚拟环境的 <a href="https://docs.python.org/3/library/venv.html#module-venv"><code>venv</code></a> 模块。如果你使用的是较新的 Python 版本，那么请接着阅读本文下面的内容。</p><p>如果你使用 Python 2 ，请首先参阅 <a href="https://dormousehole.readthedocs.io/en/latest/installation.html#install-install-virtualenv">安装 virtualenv</a> 。</p></blockquote><h3 id="1-创建虚拟环境"><a href="#1-创建虚拟环境" class="headerlink" title="1.创建虚拟环境"></a>1.创建虚拟环境</h3><pre class="line-numbers language-she"><code class="language-she">mkdir myproject            # 创建一个文件cd myproject            # 进入这个文件python3 -m venv venv            # 创建一个名叫venv的虚拟环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-激活虚拟环境"><a href="#2-激活虚拟环境" class="headerlink" title="2.激活虚拟环境"></a>2.激活虚拟环境</h3><p>在myproject文件夹下执行:</p><pre class="line-numbers language-shell"><code class="language-shell">. venv/bin/activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>激活后，你的终端提示符会显示虚拟环境的名称。</p><h3 id="3-安装Flask"><a href="#3-安装Flask" class="headerlink" title="3.安装Flask"></a>3.安装Flask</h3><p>在已激活的虚拟环境中可以使用如下命令安装 Flask：</p><pre class="line-numbers language-shell"><code class="language-shell">pip install Flask<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、requirements文件的使用"><a href="#二、requirements文件的使用" class="headerlink" title="二、requirements文件的使用"></a>二、requirements文件的使用</h2><h3 id="1-导出环境所使用的所有模块名和版本号"><a href="#1-导出环境所使用的所有模块名和版本号" class="headerlink" title="1.导出环境所使用的所有模块名和版本号"></a>1.导出环境所使用的所有模块名和版本号</h3><pre class="line-numbers language-she"><code class="language-she">pip freeze > requirements.txt        # requirements.txt这个文件名可以自定义。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>创建一个Flask项目，选好虚拟环境，随便创建一个程序，然后在终端执行代码</p></li><li><p>即可导出这个虚拟环境所使用的所有模块和版本号。</p></li></ul><h3 id="2-查看虚拟环境安装了那些模块"><a href="#2-查看虚拟环境安装了那些模块" class="headerlink" title="2.查看虚拟环境安装了那些模块"></a>2.查看虚拟环境安装了那些模块</h3><pre class="line-numbers language-she"><code class="language-she">pip list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521215350134.png"><h3 id="3-批量导入别的虚拟环境中的所有模块"><a href="#3-批量导入别的虚拟环境中的所有模块" class="headerlink" title="3.批量导入别的虚拟环境中的所有模块"></a>3.批量导入别的虚拟环境中的所有模块</h3><ul><li>即将一个虚拟环境里所有安装的模块安装到指定的环境中。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">pip install -r requirements.txt            # requirements.txt    这个代表包含模块和版本号的文本文件。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令之后，会将requirements.txt中所有的模块依次安装。</p><h2 id="三、创建第一个Flask程序"><a href="#三、创建第一个Flask程序" class="headerlink" title="三、创建第一个Flask程序"></a>三、创建第一个Flask程序</h2><h3 id="1-Flask第一个程序"><a href="#1-Flask第一个程序" class="headerlink" title="1.Flask第一个程序"></a>1.Flask第一个程序</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask            <span class="token comment" spellcheck="true"># 导入Flask模块</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-python"><code class="language-python">FLASK_APP <span class="token operator">=</span> app<span class="token punctuation">.</span>pyFLASK_ENV <span class="token operator">=</span> developmentFLASK_DEBUG <span class="token operator">=</span> <span class="token number">0</span>In folder <span class="token operator">/</span>Python<span class="token operator">/</span>Flask<span class="token operator">/</span>Python<span class="token operator">/</span>myproject<span class="token operator">/</span>venv<span class="token operator">/</span>bin<span class="token operator">/</span>python3 <span class="token operator">-</span>m flask run <span class="token operator">*</span> Serving Flask app <span class="token string">'app.py'</span> <span class="token punctuation">(</span>lazy loading<span class="token punctuation">)</span> <span class="token operator">*</span> Environment<span class="token punctuation">:</span> development <span class="token operator">*</span> Debug mode<span class="token punctuation">:</span> off <span class="token operator">*</span> Running on http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span> <span class="token punctuation">(</span>Press CTRL<span class="token operator">+</span>C to quit<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521211157142.png"><p>此时点击Running on <a href="http://127.0.0.1:5000会跳转到浏览器，浏览器显示即：">http://127.0.0.1:5000会跳转到浏览器，浏览器显示即：</a></p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521211507137.png"><p>和函数hello_world的返回结果是一样的。</p><h3 id="2-代码详解"><a href="#2-代码详解" class="headerlink" title="2.代码详解"></a>2.代码详解</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask            <span class="token comment" spellcheck="true"># 导入Flask模块</span><span class="token comment" spellcheck="true"># 创建Flask应用程序实例</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 需要传入__name__,为了确定资源所在的路径。--后面会有具体解释</span><span class="token comment" spellcheck="true"># 定义路由及视图函数</span><span class="token comment" spellcheck="true"># Flask中定义路由是通过装饰器实现的。</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># '/'代表根目录，即打开链接的第一界面。访问根路由会直接执行下面的函数。</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, World!'</span><span class="token comment" spellcheck="true"># 启动程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 判断__name__是否等于__main__</span>      <span class="token comment" spellcheck="true"># 执行了app.run,就会将Flask程序运行在一个简易的服务器(Flask提供的，由于测试的。)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 运行程序，</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-函数返回的形式"><a href="#3-函数返回的形式" class="headerlink" title="3.函数返回的形式"></a>3.函数返回的形式</h3><p>函数返回有2中形式：</p><ul><li>一是上面代码中的return ‘Hello World’，即返回的是<strong>字符串</strong>。</li><li>二是返回一个<strong>网页</strong>。</li></ul><p><strong>返回网页的方法</strong>：</p><ol><li><p>在项目文件夹下的templates创建一个index.html的文件，里面的内容为你想在网页里显示出来的内容。</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521214247102.png"><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello HTML5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--用一级标题显示'Hello HTML5'--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将from flask import Flask更改为from flask import Flask,render_template，其实就是多导入了一个templates。</p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>然后将函数的返回代码改为return render_template(‘index.html’)，括号里的内容为要显示的网页的文件名。</li></ol><pre class="line-numbers language-HTML"><code class="language-HTML">def hello_world():    # return 'Hello World!'    return render_template('index.html')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整程序代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># return 'Hello World!'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521214541098.png"><h2 id="四-路由请求方式设置"><a href="#四-路由请求方式设置" class="headerlink" title="四.路由请求方式设置"></a>四.路由请求方式设置</h2><h3 id="1-postman软件"><a href="#1-postman软件" class="headerlink" title="1.postman软件"></a>1.postman软件</h3><ul><li>直接官网下载然后打开，打开软件直接跳过，登录的下方有skip字样，点击就可以进入下图界面。</li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521221146651.png"><ul><li>试用软件发送get请求，查看返回结果。</li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521221926274.png"><p>发现结果是正确的。</p><ul><li>再用软件选择Post发送请求，查看返回结果。</li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521221812412.png"><p>发现报了一个405的错误，即方法不允许，服务不支持post请求。</p><h3 id="2-创建post请求"><a href="#2-创建post请求" class="headerlink" title="2.创建post请求"></a>2.创建post请求</h3><p>默认是Get请求,如果需要增加，需要自行指定。</p><p>将装饰器语句改成：</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Get'</span><span class="token punctuation">,</span><span class="token string">'Post'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即加上请求方式参数，多个请求方式要用列表。</p><p>修改完成之后，再次发送post请求：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210521222629321.png"><p>发现并没有报错，和Get请求返回的结果是相同的，说明网页支持了Post请求了。</p><h2 id="五、路由参数处理"><a href="#五、路由参数处理" class="headerlink" title="五、路由参数处理"></a>五、路由参数处理</h2><h3 id="1-同一个视图函数来显示不同用户的订单信息。"><a href="#1-同一个视图函数来显示不同用户的订单信息。" class="headerlink" title="1.同一个视图函数来显示不同用户的订单信息。"></a>1.同一个视图函数来显示不同用户的订单信息。</h3><p>有时需要将同一类URL映射到同一个视图函数处理，比如:使用同一个视图函数来显示不同用户的订单信息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Get'</span><span class="token punctuation">,</span><span class="token string">'Post'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># return 'Hello World!'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用同一个视图函数来显示不同用户的订单信息。</span><span class="token comment" spellcheck="true"># &lt;>定义路由的参数。&lt;>内需要起个名字,那么后面的代码才能使用。</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/orders/&lt;order_id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_order_id</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 需要在视图的()内填入参数名，那么后面的代码才能去使用。</span>    <span class="token keyword">return</span> <span class="token string">'order_id %s'</span> <span class="token operator">%</span> order_id<span class="token comment" spellcheck="true"># 启动程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码是在之前代码的基础上又定义了一个路由，目录为’/orders/<order_id>‘，&lt;&gt;定义一个路由参数，&lt;&gt;内需要有个名字,代表动态目录。</order_id></p><p>上面代码运行后跟之前运行结果没有区别，但是在地址栏后面加上/orders/xxx,例如<a href="http://127.0.0.1:5000/orders/666">http://127.0.0.1:5000/orders/666</a></p><p>按F5刷新后的效果为:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522113029492-1624169288185.png"><p>可以发现显示内容为order_id 666,即get_order_id(order_id)函数的返回结果一致。</p><p>在get_order_id(order_id)函数中增加:print(order_id),然后运行程序，执行结果为：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Get'</span><span class="token punctuation">,</span><span class="token string">'Post'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># return 'Hello World!'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用同一个视图函数来显示不同用户的订单信息。</span><span class="token comment" spellcheck="true"># &lt;>定义路由的参数。&lt;>内需要起个名字,那么后面的代码才能使用。</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/orders/&lt;order_id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_order_id</span><span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 需要在视图的()内填入参数名，那么后面的代码才能去使用。</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>order_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'order_id %s'</span> <span class="token operator">%</span> order_id<span class="token comment" spellcheck="true"># 启动程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522113621709.png"><p>可以看到打印出了&lt;class ‘str’&gt;，说明函数的参数order_id默认是一个字符串形式。</p><h3 id="2-对路由做访问优化"><a href="#2-对路由做访问优化" class="headerlink" title="2.对路由做访问优化"></a>2.对路由做访问优化</h3><p>有的时候，需要对路由做访问优化，订单ID应该是一个int类型。</p><p>所以我们将**@app.route(‘/orders/<order_id>‘)<strong>修改为</strong>@app.route(‘/orders/&lt; int:order_id &gt;’)**,</order_id></p><p>即将order_id转化为int类型。当order_id可以转化为int类型时，就进行匹配，反之。此时，只有在<a href="http://127.0.0.1:5000/orders/xxx%E7%9A%84xxx%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%8F%82%E6%95%B0%E6%98%AF**%E5%8F%AF%E4%BB%A5%E8%BD%AC%E5%8C%96%E4%B8%BAint%E7%B1%BB%E5%9E%8B**%E6%97%B6%EF%BC%8C%E6%89%8D%E4%BC%9A%E6%9C%89%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%EF%BC%8C%E5%90%A6%E5%88%99%E5%B0%B1%E6%98%AF**Note">http://127.0.0.1:5000/orders/xxx的xxx位置的参数是**可以转化为int类型**时，才会有返回结果，否则就是**Note</a> Found**</p><p>举一反三:int也可以改成float等等</p><table><thead><tr><th><code>string</code></th><th>（缺省值） 接受任何不包含斜杠的文本</th></tr></thead><tbody><tr><td><code>int</code></td><td>接受正整数</td></tr><tr><td><code>float</code></td><td>接受正浮点数</td></tr><tr><td><code>path</code></td><td>类似 <code>string</code> ，但可以包含斜杠</td></tr><tr><td><code>uuid</code></td><td>接受 UUID 字符串</td></tr></tbody></table><h2 id="六、Jinja2模块引擎"><a href="#六、Jinja2模块引擎" class="headerlink" title="六、Jinja2模块引擎"></a>六、Jinja2模块引擎</h2><blockquote><h1>模板</h1><p>视图函数的主要作用是生成请求的响应，这是最简单的请求。实际上，视图函数有两个作用：<strong>处理业务逻辑</strong>和<strong>返回响应内容</strong>。在大型应用中，把业务逻辑和表现内容放在一起，会增加代码的复杂度和维护成本。本节学到的模板，它的作用即是承担视图函数的另一个作用，即返回响应内容。</p><ul><li>模板其实是一个包含响应文本的文件，其中用占位符(变量)表示动态部分，告诉模板引擎其具体的值需要从使用的数据中获取</li><li>使用真实值替换变量，再返回最终得到的字符串，这个过程称为“渲染”</li><li>Flask是使用 <strong>Jinja2</strong> 这个模板引擎来渲染模板</li></ul><p>使用模板的好处：</p><ul><li>视图函数只负责业务逻辑和数据处理(业务逻辑方面)</li><li>而模板则取到视图函数的数据结果进行展示(视图展示方面)</li><li>代码结构清晰，耦合度低</li></ul></blockquote><blockquote><h1>Jinja2</h1><h3 id="两个概念："><a href="#两个概念：" class="headerlink" title="两个概念："></a>两个概念：</h3><ul><li>Jinja2：是 Python 下一个被广泛应用的模板引擎，是由Python实现的模板语言，他的设计思想来源于 Django 的模板引擎，并扩展了其语法和一系列强大的功能，其是Flask内置的模板语言。</li><li>模板语言：是一种被设计来自动生成文档的简单文本格式，在模板语言中，一般都会把一些变量传给模板，替换模板的特定位置上预先定义好的占位变量名。</li></ul><h3 id="渲染模版函数"><a href="#渲染模版函数" class="headerlink" title="渲染模版函数"></a>渲染模版函数</h3><ul><li>Flask提供的 <strong>render_template</strong> 函数封装了该模板引擎</li><li><strong>render_template</strong> 函数的第一个参数是模板的文件名，后面的参数都是键值对，表示模板中变量对应的真实值。</li></ul></blockquote><h3 id="1-如何返回一个网页-模板"><a href="#1-如何返回一个网页-模板" class="headerlink" title="1.如何返回一个网页(模板)"></a>1.如何返回一个网页(模板)</h3><ul><li><strong>这一部分在目录 三–3提过一次，但不详细</strong></li></ul><blockquote><p>创建完Flask项目后会生成2个文件夹static和templates,其中static可以将图片或者一些其他东西放进去，而templates就是用来放模板的。</p></blockquote><ol><li><p>右键templates目录，新建一个HTML文件，随便写一些内容。</p></li><li><p>然后导入模块from flask import Flask,render_template</p></li><li><p>将函数返回结果设置为：<strong>return render_template(‘index.html’)<strong>，其中</strong>‘index.html’</strong>为需要显示网页名,可自行修改。</p></li></ol><p>Python代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.如何返回一个网页(模板)</span><span class="token comment" spellcheck="true"># 2.如何给模板填充数据</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTML代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>这个是模板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>这个是首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522120929878.png"><p>可以看到显示的是网页的内容。</p><h3 id="2-传入一个可变的东西"><a href="#2-传入一个可变的东西" class="headerlink" title="2.传入一个可变的东西"></a>2.传入一个可变的东西</h3><p>即在模板中不直接写死的东西：</p><pre class="line-numbers language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 比如需要传入网址</span>    url_str <span class="token operator">=</span> <span class="token string">'www.baidu.com'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span>url_str<span class="token operator">=</span>url_str<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 后面的参数为键值对的形式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==========================================================================</p><pre class="line-numbers language-htm"><code class="language-htm">​```html<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title></head>这个是模板<br>这个是首页{{ url_str }}<br>            # 加入了{{url_str}}</body></html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==========================================================================<br><strong>{# 注释内容 #}是注释</strong></p>{{}}是变量代码块==========================================================================<br>运行结果：<img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522121806802.png">- 当我们修改代码中的url_str的值时，网页内容也会发生改变。<br>## 七、变量代码块的基本使用### 1.数据的传递 代码 return render_template('index.html',url_str=url_str)中，前面一个url_str的意思是变量代码块要引用的名称，后面的url_str是py文件中的一个变量。通常模板中的变量名和传递数据的变量名保持一致。python文件：```pythonfrom flask import Flask,render_templateapp = Flask(__name__)# 1.如何返回一个网页(模板)# 2.如何给模板填充数据@app.route('/')def hello_world():    # 比如需要传入网址    url_str = 'www.baidu.com'    my_list = [1,3,5,7,9]    return render_template('index.html', url_str = url_str,my_list=my_list)if __name__ == '__main__':    app.run(Debug=True)```在html文件中：```python​```html    <meta charset="UTF-8">    <title>Title</title>这个是模板<br>这个是首页<br>```<p>运行结果:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522123039086.png"><p>可以看到在py文件中定义的my_list变量被传到了模板中并显示了出来。</p><h3 id="2-列表数据传递"><a href="#2-列表数据传递" class="headerlink" title="2.列表数据传递"></a>2.列表数据传递</h3><p>my_list是一个列表变量，同样，在模板中也可以使用切片</p><p>html代码：</p><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>这个是模板<span class="token operator">&lt;</span>br<span class="token operator">></span>这个是首页<span class="token punctuation">{</span><span class="token comment" spellcheck="true"># 下面是一个变量代码快的使用#}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> url_str <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_list <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_list<span class="token number">.2</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 增加了这个</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522123248935.png"><p>发现多了一个5</p><p>除了用点的方式，也可以使用同python切片[]的方式，有同样的效果。</p><h3 id="3-字典数据的传递"><a href="#3-字典数据的传递" class="headerlink" title="3.字典数据的传递"></a>3.字典数据的传递</h3><p>除了列表，字典也可以</p><p>python：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1.如何返回一个网页(模板)</span><span class="token comment" spellcheck="true"># 2.如何给模板填充数据</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 比如需要传入网址</span>    url_str <span class="token operator">=</span> <span class="token string">'www.baidu.com'</span>    my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>    my_dict <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'赵涛涛'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> url_str <span class="token operator">=</span> url_str<span class="token punctuation">,</span>my_list<span class="token operator">=</span>my_list<span class="token punctuation">,</span>my_dict<span class="token operator">=</span>my_dict<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>Debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html:</p><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>!DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>这个是模板<span class="token operator">&lt;</span>br<span class="token operator">></span>这个是首页<span class="token punctuation">{</span><span class="token comment" spellcheck="true"># 下面是一个变量代码快的使用#}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> url_str <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_list <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_list<span class="token number">.2</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_dict <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> my_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522123853400.png"><p>发现字典也可以被正确的传递进来，还可以利用键取出值的方式。</p><p><strong>其他可以传递的数据不再赘述，自行探索</strong>。</p><h2 id="八、控制代码块"><a href="#八、控制代码块" class="headerlink" title="八、控制代码块"></a>八、控制代码块</h2><ul><li>用{ %%}定义控制代码块，可以实现一些语言层次的功能，比如循环或者if语句。</li></ul><pre class="line-numbers language-python"><code class="language-python">​```python<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> user <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">}</span>    hello!<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> index <span class="token keyword">in</span> indexs <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> index <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>```<span class="token operator">-</span> <span class="token operator">**</span>快速补全技巧<span class="token operator">**</span>  先输入<span class="token keyword">for</span>然后按TAB键，即可快速补全。  先输入<span class="token keyword">if</span>然后按TAB键，即可快速补全。<span class="token comment" spellcheck="true">### 1.for语句</span>在html文件中增加：```python​```html<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> my <span class="token keyword">in</span> my_list <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> my <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>```再运行程序，发现网页依次打印出了my_list中的元素<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522125242127.png"</span><span class="token operator">></span><span class="token comment" spellcheck="true">### 2.if语句</span>​在刚刚的<span class="token keyword">for</span>语句修改为<span class="token punctuation">:</span>```python​```html<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> my <span class="token keyword">in</span> my_list <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> my <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span> my <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再运行程序，发现网页中只打印出了my_list中大于3的元素</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522125226237.png"><h2 id="九、过滤器-gt-叫转换器更好理解"><a href="#九、过滤器-gt-叫转换器更好理解" class="headerlink" title="九、过滤器->叫转换器更好理解"></a>九、过滤器-&gt;叫转换器更好理解</h2><h3 id="1-概念及语法"><a href="#1-概念及语法" class="headerlink" title="1.概念及语法"></a>1.概念及语法</h3><p>过滤器的本质就是函数。有时候我们不仅仅只是需要输出变量的值，我们还需要修改变量的显示，甚至格式化、运算等等，而在模板中是不能直接调用 Python 中的某些方法，那么这就用到了过滤器。</p><p>使用方式：</p><ul><li>过滤器的使用方式为：变量名 | 过滤器。</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token punctuation">{</span><span class="token punctuation">{</span>variable <span class="token operator">|</span> filter_name<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果没有任何参数传给过滤器,则可以把括号省略掉</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token punctuation">{</span><span class="token punctuation">{</span>variable <span class="token operator">|</span> filter_name<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>如，这个过滤器的作用：把变量url_str 的值的所有小写字母转换为大写字母</p><p>​     将字符串反转。</p></li></ul><h3 id="2-链式调用"><a href="#2-链式调用" class="headerlink" title="2.链式调用"></a>2.链式调用</h3><p>在 jinja2 中，过滤器是可以支持链式调用的，示例如下：</p><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">"hello world"</span> <span class="token operator">|</span> reverse <span class="token operator">|</span> upper <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>先反转再大写</strong></p><h3 id="常见内建过滤器"><a href="#常见内建过滤器" class="headerlink" title="常见内建过滤器"></a>常见内建过滤器</h3><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><ul><li>safe：禁用转义</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'&lt;em>hello&lt;/em>'</span> <span class="token operator">|</span> safe <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用了safe之后，<em></em>会直接应用到hello中，即把hello变成倾斜。</p><ul><li>capitalize：把变量值的首字母转成大写，其余字母转小写</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'hello'</span> <span class="token operator">|</span> capitalize <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>lower：把值转成小写</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'HELLO'</span> <span class="token operator">|</span> lower <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>upper：把值转成大写</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'hello'</span> <span class="token operator">|</span> upper <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>title：把值中的每个单词的首字母都转成大写</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'hello'</span> <span class="token operator">|</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>reverse：字符串反转</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'olleh'</span> <span class="token operator">|</span> reverse <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>format：格式化输出</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'%s is %d'</span> <span class="token operator">|</span> format<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>striptags：渲染之前把值中所有的HTML标签都删掉</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'&lt;em>hello&lt;/em>'</span> <span class="token operator">|</span> striptags <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>truncate: 字符串截断</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">'hello every one'</span> <span class="token operator">|</span> truncate<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="列表操作"><a href="#列表操作" class="headerlink" title="列表操作"></a>列表操作</h3><ul><li>first：取第一个元素</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> first <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>last：取最后一个元素</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> last <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>length：获取列表长度</p><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> length <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>sum：列表求和</p></li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">|</span> sum <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>sort：列表排序</li></ul><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">|</span> sort <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="语句块过滤"><a href="#语句块过滤" class="headerlink" title="语句块过滤"></a>语句块过滤</h3><pre class="line-numbers language-python"><code class="language-python">​```html<span class="token punctuation">{</span><span class="token operator">%</span> filter upper <span class="token operator">%</span><span class="token punctuation">}</span>    一大堆文字<span class="token punctuation">{</span><span class="token operator">%</span> endfilter <span class="token operator">%</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、Web表单"><a href="#十、Web表单" class="headerlink" title="十、Web表单"></a>十、Web表单</h2><p>web表单是web应用程序的基本功能。</p><p>它是HTML页面中负责数据采集的部件。表单有三个部分组成：表单标签、表单域、表单按钮。表单允许用户输入数据，负责HTML页面数据采集，通过表单将用户输入的数据提交给服务器。</p><p>在Flask中，为了处理web表单，我们一般使用Flask-WTF扩展，它封装了WTForms，并且它有验证表单数据的功能</p><h2 id="WTForms支持的HTML标准字段"><a href="#WTForms支持的HTML标准字段" class="headerlink" title="WTForms支持的HTML标准字段"></a>WTForms支持的HTML标准字段</h2><table><thead><tr><th align="left">字段对象</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">StringField</td><td align="left">文本字段</td></tr><tr><td align="left">TextAreaField</td><td align="left">多行文本字段</td></tr><tr><td align="left">PasswordField</td><td align="left">密码文本字段</td></tr><tr><td align="left">HiddenField</td><td align="left">隐藏文件字段</td></tr><tr><td align="left">DateField</td><td align="left">文本字段，值为 datetime.date 文本格式</td></tr><tr><td align="left">DateTimeField</td><td align="left">文本字段，值为 datetime.datetime 文本格式</td></tr><tr><td align="left">IntegerField</td><td align="left">文本字段，值为整数</td></tr><tr><td align="left">DecimalField</td><td align="left">文本字段，值为decimal.Decimal</td></tr><tr><td align="left">FloatField</td><td align="left">文本字段，值为浮点数</td></tr><tr><td align="left">BooleanField</td><td align="left">复选框，值为True 和 False</td></tr><tr><td align="left">RadioField</td><td align="left">一组单选框</td></tr><tr><td align="left">SelectField</td><td align="left">下拉列表</td></tr><tr><td align="left">SelectMutipleField</td><td align="left">下拉列表，可选择多个值</td></tr><tr><td align="left">FileField</td><td align="left">文件上传字段</td></tr><tr><td align="left">SubmitField</td><td align="left">表单提交按钮</td></tr><tr><td align="left">FormField</td><td align="left">把表单作为字段嵌入另一个表单</td></tr><tr><td align="left">FieldList</td><td align="left">一组指定类型的字段</td></tr></tbody></table><h2 id="WTForms常用验证函数"><a href="#WTForms常用验证函数" class="headerlink" title="WTForms常用验证函数"></a>WTForms常用验证函数</h2><table><thead><tr><th align="left">验证函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">DataRequired</td><td align="left">确保字段中有数据</td></tr><tr><td align="left">EqualTo</td><td align="left">比较两个字段的值，常用于比较两次密码输入</td></tr><tr><td align="left">Length</td><td align="left">验证输入的字符串长度</td></tr><tr><td align="left">NumberRange</td><td align="left">验证输入的值在数字范围内</td></tr><tr><td align="left">URL</td><td align="left">验证URL</td></tr><tr><td align="left">AnyOf</td><td align="left">验证输入值在可选列表中</td></tr><tr><td align="left">NoneOf</td><td align="left">验证输入值不在可选列表中</td></tr></tbody></table><p>使用Flask-WTF需要配置参数SECRET_KEY。</p><p>CSRF_ENABLED是为了CSRF（跨站请求伪造）保护。 SECRET_KEY用来生成加密令牌，当CSRF激活的时候，该设置会根据设置的密匙生成加密令牌。在HTML页面中直接写form表单：</p><h3 id="1-使用普通方式实现表单"><a href="#1-使用普通方式实现表单" class="headerlink" title="1.使用普通方式实现表单"></a>1.使用普通方式实现表单</h3><p>Python:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''实现一个简单的登录的逻辑处理1.路由需要有get和post两种请求方式 --> 需要判断请求方式2.获取请求参数3.判断参数是否填写，以及密码是否相同4.如果判断都没有问题，就返回一个succes'''</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># request:请求对象--> 获取请求方式、数据</span>    <span class="token comment" spellcheck="true"># 1.需要判断请求方式</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span><span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 2.获取请求参数</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        passwprd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        password2 <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3.判断参数是否填写 &amp; 密码是否相同</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span>passwprd<span class="token punctuation">,</span>password2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'参数不完整'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> passwprd <span class="token operator">!=</span>password2<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码不一致'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'succes'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML:"></a>HTML:</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>确认密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当程序运行时，出现了一个表单，需要输入用户名、密码、确认密码，只有三者都不是空且密码和确认密码相同时才会返回succes，否则会打印错误。</p><h3 id="2-提示优化"><a href="#2-提示优化" class="headerlink" title="2.提示优化"></a>2.提示优化</h3><p>上面的程序运行后，当输入不正确的时候会提示错误，但是错误只显示在控制台，并没有在网页中提示，为了解决这个问题需要进行改进。</p><ol><li>导入flash：from flask import Flask,render_template,request,flash，并设置secret-key </li><li>将上放的print输出都改成flash输出</li><li>在html文件表单中加入循环语句遍历消息</li></ol><p>python代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>request<span class="token punctuation">,</span>flashapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'taotao'</span>            <span class="token comment" spellcheck="true"># 设置secret_key</span><span class="token triple-quoted-string string">'''实现一个简单的登录的逻辑处理1.路由需要有get和post两种请求方式 --> 需要判断请求方式2.获取请求参数3.判断参数是否填写，以及密码是否相同4.如果判断都没有问题，就返回一个succes'''</span><span class="token triple-quoted-string string">'''给模板传递消息flash --> 需要对内容加密，因此需要设置secret_key,做一个加密消息的混淆模板中需要遍历消息'''</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># request:请求对象--> 获取请求方式、数据</span>    <span class="token comment" spellcheck="true"># 1.需要判断请求方式</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span><span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 2.获取请求参数</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        passwprd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        password2 <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3.判断参数是否填写 &amp; 密码是否相同</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span>passwprd<span class="token punctuation">,</span>password2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('参数不完整')</span>            flash<span class="token punctuation">(</span><span class="token string">'参数不完整！'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> passwprd <span class="token operator">!=</span>password2<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('密码不一致')</span>            flash<span class="token punctuation">(</span><span class="token string">'密码不一致'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'succes'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html代码</p><pre class="line-numbers language-Html"><code class="language-Html"><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <title>Title</title></head><body><form method="post"><form method="post">    <label>用户名:</label><input type="text" name="username"><br>    <label>密码:</label><input type="password" name="password"><br>    <label>确认密码:</label><input type="password" name="password2"><br>    <input type="submit" value="提交"><br>    {#使用遍历获取闪现的消息#}    {% for message in get_flashed_messages() %}         {{ message }}    {% endfor %}</form></form></body></html><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>get_flashed_messages()是一个函数，用于捕捉消息。    </p><p>程序运行后当输入参数不正确会在网页给予提示，如图：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210522153138471.png"><h3 id="3-使用Flask-WTF实现表单"><a href="#3-使用Flask-WTF实现表单" class="headerlink" title="3.使用Flask_WTF实现表单"></a>3.使用Flask_WTF实现表单</h3><p>Python代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>request<span class="token punctuation">,</span>flash<span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm        <span class="token comment" spellcheck="true"># 导入模块</span><span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span>PasswordField<span class="token punctuation">,</span>SubmitFieldapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'taotao'</span><span class="token triple-quoted-string string">'''实现一个简单的登录的逻辑处理1.路由需要有get和post两种请求方式 --> 需要判断请求方式2.获取请求参数3.判断参数是否填写，以及密码是否相同4.如果判断都没有问题，就返回一个succes'''</span><span class="token triple-quoted-string string">'''给模板传递消息flash --> 需要对内容加密，因此需要设置secret_key,做一个加密消息的混淆模板中需要遍历消息'''</span><span class="token triple-quoted-string string">'''使用WTF实现表单自定义表单类'''</span><span class="token keyword">class</span> <span class="token class-name">LoginForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 继承FlaskFrom</span>    <span class="token comment" spellcheck="true"># 创建需要用到的对象</span>    username <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'用户名:'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span><span class="token string">'密码:'</span><span class="token punctuation">)</span>    password2 <span class="token operator">=</span> PasswordField<span class="token punctuation">(</span><span class="token string">'确认密码:'</span><span class="token punctuation">)</span>    submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'提交'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个路由，目录为‘/from’</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/form'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    login_form <span class="token operator">=</span> LoginForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span>form <span class="token operator">=</span> login_form<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># request:请求对象--> 获取请求方式、数据</span>    <span class="token comment" spellcheck="true"># 1.需要判断请求方式</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span><span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 2.获取请求参数</span>        username <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        passwprd <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        password2 <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3.判断参数是否填写 &amp; 密码是否相同</span>        <span class="token comment" spellcheck="true"># validate_on_submit()需要CSRF token</span>        <span class="token keyword">if</span> <span class="token operator">not</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span>username<span class="token punctuation">,</span>passwprd<span class="token punctuation">,</span>password2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('参数不完整')</span>            flash<span class="token punctuation">(</span><span class="token string">'参数不完整！'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> passwprd <span class="token operator">!=</span>password2<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print('密码不一致')</span>            flash<span class="token punctuation">(</span><span class="token string">'密码不一致'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'succes'</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html代码:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>确认密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    {#使用遍历获取闪现的消息#}    {% for message in get_flashed_messages() %}        {{ message }}    {% endfor %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ form.csrf_token() }}    {{ form.username.label }}{{ form.username }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    {{ form.password.label }}{{ form.password }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    {{ form.password2.label }}{{ form.password2 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    {{ form.submit }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、Flask中使用数据库"><a href="#十一、Flask中使用数据库" class="headerlink" title="十一、Flask中使用数据库"></a>十一、Flask中使用数据库</h2><h3 id="Flask-SQLAlchemy扩展"><a href="#Flask-SQLAlchemy扩展" class="headerlink" title="Flask-SQLAlchemy扩展"></a>Flask-SQLAlchemy扩展</h3><ul><li>SQLALchemy 实际上是对数据库的抽象，让开发者不用直接和 SQL 语句打交道，而是通过 Python 对象来操作数据库，在舍弃一些性能开销的同时，换来的是开发效率的较大提升</li><li>SQLAlchemy是一个关系型数据库框架，它提供了高层的ORM和底层的原生数据库的操作。flask-sqlalchemy是一个简化了SQLAlchemy操作的flask扩展。</li></ul><h3 id="1-安装-flask-sqlalchemy"><a href="#1-安装-flask-sqlalchemy" class="headerlink" title="1.安装 flask-sqlalchemy"></a>1.安装 flask-sqlalchemy</h3><pre><code>pip install flask-sqlalchemy</code></pre><p>如果连接的是mysql数据库,需要安装mysqldb</p><pre><code>pip install flask-mysqldb</code></pre><h4 id="使用Flask-SQLAlchemy管理数据库"><a href="#使用Flask-SQLAlchemy管理数据库" class="headerlink" title="#使用Flask-SQLAlchemy管理数据库"></a>#使用Flask-SQLAlchemy管理数据库</h4><p>在Flask-SQLAlchemy中，数据库使用URL指定，而且程序使用的数据库必须保存到Flask配置对象的SQLALCHEMY_DATABASE_URI键中。</p><h4 id="Flask的数据库设置："><a href="#Flask的数据库设置：" class="headerlink" title="Flask的数据库设置："></a>Flask的数据库设置：</h4><pre class="line-numbers language-python"><code class="language-python">app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql://root:mysql@127.0.0.1:3306/test'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他设置：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 动态追踪修改设置，如未设置只会提示警告, 不建议开启</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 查询时会显示原始SQL语句</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_ECHO'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-一些参数"><a href="#3-一些参数" class="headerlink" title="3.一些参数"></a>3.一些参数</h2><table><thead><tr><th align="left">名字</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">SQLALCHEMY_DATABASE_URI</td><td align="left">用于连接的数据库 URI 。例如:sqlite:////tmp/test.dbmysql://username:password@server/db</td></tr><tr><td align="left">SQLALCHEMY_BINDS</td><td align="left">一个映射 binds 到连接 URI 的字典。更多 binds 的信息见<a href="http://docs.jinkan.org/docs/flask-sqlalchemy/binds.html#binds"><em>用 Binds 操作多个数据库</em></a>。</td></tr><tr><td align="left">SQLALCHEMY_ECHO</td><td align="left">如果设置为Ture， SQLAlchemy 会记录所有 发给 stderr 的语句，这对调试有用。(打印sql语句)</td></tr><tr><td align="left">SQLALCHEMY_RECORD_QUERIES</td><td align="left">可以用于显式地禁用或启用查询记录。查询记录 在调试或测试模式自动启用。更多信息见get_debug_queries()。</td></tr><tr><td align="left">SQLALCHEMY_NATIVE_UNICODE</td><td align="left">可以用于显式禁用原生 unicode 支持。当使用 不合适的指定无编码的数据库默认值时，这对于 一些数据库适配器是必须的（比如 Ubuntu 上 某些版本的 PostgreSQL ）。</td></tr><tr><td align="left">SQLALCHEMY_POOL_SIZE</td><td align="left">数据库连接池的大小。默认是引擎默认值（通常 是 5 ）</td></tr><tr><td align="left">SQLALCHEMY_POOL_TIMEOUT</td><td align="left">设定连接池的连接超时时间。默认是 10 。</td></tr><tr><td align="left">SQLALCHEMY_POOL_RECYCLE</td><td align="left">多少秒后自动回收连接。这对 MySQL 是必要的， 它默认移除闲置多于 8 小时的连接。注意如果 使用了 MySQL ， Flask-SQLALchemy 自动设定 这个值为 2 小时。</td></tr></tbody></table><h3 id="常用的SQLAlchemy字段类型"><a href="#常用的SQLAlchemy字段类型" class="headerlink" title="常用的SQLAlchemy字段类型"></a>常用的SQLAlchemy字段类型</h3><table><thead><tr><th align="left">类型名</th><th align="left">python中类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Integer</td><td align="left">int</td><td align="left">普通整数，一般是32位</td></tr><tr><td align="left">SmallInteger</td><td align="left">int</td><td align="left">取值范围小的整数，一般是16位</td></tr><tr><td align="left">BigInteger</td><td align="left">int或long</td><td align="left">不限制精度的整数</td></tr><tr><td align="left">Float</td><td align="left">float</td><td align="left">浮点数</td></tr><tr><td align="left">Numeric</td><td align="left">decimal.Decimal</td><td align="left">普通整数，一般是32位</td></tr><tr><td align="left">String</td><td align="left">str</td><td align="left">变长字符串</td></tr><tr><td align="left">Text</td><td align="left">str</td><td align="left">变长字符串，对较长或不限长度的字符串做了优化</td></tr><tr><td align="left">Unicode</td><td align="left">unicode</td><td align="left">变长Unicode字符串</td></tr><tr><td align="left">UnicodeText</td><td align="left">unicode</td><td align="left">变长Unicode字符串，对较长或不限长度的字符串做了优化</td></tr><tr><td align="left">Boolean</td><td align="left">bool</td><td align="left">布尔值</td></tr><tr><td align="left">Date</td><td align="left">datetime.date</td><td align="left">时间</td></tr><tr><td align="left">Time</td><td align="left">datetime.datetime</td><td align="left">日期和时间</td></tr><tr><td align="left">LargeBinary</td><td align="left">str</td><td align="left">二进制文件</td></tr></tbody></table><h3 id="常用的SQLAlchemy列选项"><a href="#常用的SQLAlchemy列选项" class="headerlink" title="常用的SQLAlchemy列选项"></a>常用的SQLAlchemy列选项</h3><table><thead><tr><th align="left">选项名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">primary_key</td><td align="left">如果为True，代表表的主键</td></tr><tr><td align="left">unique</td><td align="left">如果为True，代表这列不允许出现重复的值</td></tr><tr><td align="left">index</td><td align="left">如果为True，为这列创建索引，提高查询效率</td></tr><tr><td align="left">nullable</td><td align="left">如果为True，允许有空值，如果为False，不允许有空值</td></tr><tr><td align="left">default</td><td align="left">为这列定义默认值</td></tr></tbody></table><h3 id="常用的SQLAlchemy关系选项"><a href="#常用的SQLAlchemy关系选项" class="headerlink" title="常用的SQLAlchemy关系选项"></a>常用的SQLAlchemy关系选项</h3><table><thead><tr><th align="left">选项名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">backref</td><td align="left">在关系的另一模型中添加反向引用</td></tr><tr><td align="left">primary join</td><td align="left">明确指定两个模型之间使用的联结条件</td></tr><tr><td align="left">uselist</td><td align="left">如果为False，不使用列表，而使用标量值</td></tr><tr><td align="left">order_by</td><td align="left">指定关系中记录的排序方式</td></tr><tr><td align="left">secondary</td><td align="left">指定多对多中记录的排序方式</td></tr><tr><td align="left">secondary join</td><td align="left">在SQLAlchemy中无法自行决定时，指定多对多关系中的二级联结条件</td></tr></tbody></table><h2 id="十二、数据库的基本操作-环境改成了windows，因为遇到了问题，ubuntu环境折腾不好"><a href="#十二、数据库的基本操作-环境改成了windows，因为遇到了问题，ubuntu环境折腾不好" class="headerlink" title="十二、数据库的基本操作-环境改成了windows，因为遇到了问题，ubuntu环境折腾不好"></a>十二、数据库的基本操作-环境改成了windows，因为遇到了问题，ubuntu环境折腾不好</h2><ul><li>将已经写好的python项目复制黏贴到windows上就好了，用pycharm以打开项目的方式打开文件夹。</li></ul><h2 id="一-增删改操作"><a href="#一-增删改操作" class="headerlink" title="一. 增删改操作"></a>一. 增删改操作</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><ul><li>在Flask-SQLAlchemy中，插入、修改、删除操作，均由数据库会话管理。<ul><li>会话用db.session表示。在准备把数据写入数据库前，要先将数据添加到会话中然后调用 commit() 方法提交会话。</li></ul></li><li>在Flask-SQLAlchemy中，查询操作是通过query对象操作数据。<ul><li>最基本的查询是返回表中所有数据，可以通过过滤器进行更精确的数据库查询。</li></ul></li></ul><h3 id="2-在数据表中添加数据"><a href="#2-在数据表中添加数据" class="headerlink" title="2.在数据表中添加数据"></a>2.在数据表中添加数据</h3><p><strong>代码中有些生僻的参数，可以查询上一节的参数表。</strong></p><p>Python代码:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置数据的地址</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql://root:mysql@127.0.0.1/flask'</span><span class="token comment" spellcheck="true"># 配置数据库是否动态追踪修改设置，如未设置只会提示警告, 不建议开启</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''两张表(管理员/普通用户)角色(角色ID)'''</span><span class="token comment" spellcheck="true"># 数据库的模型，需要继承db.Model</span><span class="token keyword">class</span> <span class="token class-name">Role</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义表名</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'roles'</span>            <span class="token comment" spellcheck="true"># 表名</span>    <span class="token comment" spellcheck="true"># 定义字段</span>    <span class="token comment" spellcheck="true"># db.Column表示一个字段</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 主键</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>            <span class="token comment" spellcheck="true"># 表名</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    role_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'roles.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 表示是表roles的外键</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 删除表</span>    db<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建表</span>    db<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行这个程序，就可以在mysql中的flask这个库创建指定的两个数据表。在这个文件里创建了两个类，我们可以利用这两个类进行数据表的增加。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><pre class="line-numbers language-python"><code class="language-python">app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql://root:mysql@127.0.0.1:3306/flask'</span> 这句代码是用来链接数据库，其中最前面的mysql是指定数据库类型，root是数据库的用户名，紧接着的mysql是数据库密码，@后面的是自己的地址，可以是<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>也可以是localhost，后面的端口号可以写也可以不写，最后flask是我们在mysql中创建的数据库。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行最上面的代码前，需要在mysql中运行下列代码：</p><pre class="line-numbers language-mysql"><code class="language-mysql">create database flask         # 创建flaks数据库use flask        # 进入flask数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="一些后面要用到的代码"><a href="#一些后面要用到的代码" class="headerlink" title="一些后面要用到的代码"></a>一些后面要用到的代码</h4><pre class="line-numbers language-mysql"><code class="language-mysql">show database;        # 查看有哪些数据库show tables;        # 查看数据库下有哪些表desc roles;        # 查看表中有哪些字段名及数据类型select * from roles;        # 查询某个表中所有数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：在mysql中写代码，每句代码结尾都要跟上‘；’分号。</p><p>然后再运行python代码，在mysql中执行show tables;代码效果如图：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210524171951262.png"><p>可以发现mysql中成功创建了两个表。</p><p>为了在表中添加数据，我们用pycharm自带终端/python控制台来添加数据:</p><p>推荐使用Python控制台，因为如果使用的是虚拟环境，终端输入ipython之后用的是base环境，不是虚拟环境，会导致报错，而python控制台本身就是虚拟环境下的ipython。</p><p>执行下列代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> app <span class="token keyword">from</span> <span class="token operator">*</span>            <span class="token comment" spellcheck="true"># 导入一个模块，其中app为py文件的名字</span>role  <span class="token operator">=</span> Role<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 调用类，传入一个name参数</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>role<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加到数据库的session中</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#提交数据库的修改(包括增/删/改)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后再mysql中执行select * from roles*,结果如图:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210524173231779.png"><p>可以发现在roles表中已经添加了一条数据。</p><p>接着我们在users表中添加如下数据：</p><pre class="line-numbers language-mysql"><code class="language-mysql">user = User(name = 'heima',role_id = role.id)        # 因为User中的role_id是Role中id的外键，role.id是取role对象的id，role的id默认生成了一个1。db.session.add(user)        # 添加修改db.session.commit()            # 提交修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在mysql中执行:</p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from users        # 查询users表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210524174008843.png"><p>成功添加了一条数据；</p><p><strong>方法汇总:</strong></p><pre><code>db.session.add(role)    添加到数据库的session中db.session.add_all([user1, user2]) 添加多个信息到session中db.session.commit()     提交数据库的修改(包括增/删/改)db.session.rollback()   数据库的回滚操作db.session.delete(user) 删除数据库(需跟上commit)</code></pre><h3 id="3-修改数据表中的数据"><a href="#3-修改数据表中的数据" class="headerlink" title="3 修改数据表中的数据"></a>3 修改数据表中的数据</h3><ul><li>以下步骤都是在上面步骤完成的情况下追加的。</li></ul><pre class="line-numbers language-python"><code class="language-python">user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'chengxuyuan'</span>        <span class="token comment" spellcheck="true"># 将user对象的name改成‘chengxuyuan'db.session.commit()            # 直接提交，不需要add</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210524174812523.png"><h3 id="4-删除数据表的中数据"><a href="#4-删除数据表的中数据" class="headerlink" title="4.删除数据表的中数据"></a>4.删除数据表的中数据</h3><pre class="line-numbers language-python"><code class="language-python">db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>user<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 将user对象的name从数据表中删除db.session.commit()            # 直接提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210524174847453.png"><h4 id="5-汇总"><a href="#5-汇总" class="headerlink" title="5.汇总"></a>5.<strong>汇总</strong></h4><pre><code>#### 2.2 数据的增删改​```python# 进入ipython一次执行In [1]: from demo3_sqlalchemy import *# 添加一条Role数据In [2]: role = Role(name='admin')In [3]: db.session.add(role)In [4]: db.session.commit()# 添加一条User数据, 数据有误可以使用回滚, 将add的对象从session移除In [5]: user = User(name='zhangsan')In [6]: db.session.add(user)In [7]: db.session.rollback()In [9]: user.role_id = 1In [6]: db.session.add(user)In [4]: db.session.commit()# 修改数据In [13]: user.name = 'lisi'In [14]: db.session.commit()# 删除数据In [16]: db.session.delete(user)In [17]: db.session.commit()</code></pre><h2 id="二、模型之间的关联"><a href="#二、模型之间的关联" class="headerlink" title="二、模型之间的关联"></a>二、模型之间的关联</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemyapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置数据的地址</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql://root:mysql@127.0.0.1/flask'</span><span class="token comment" spellcheck="true"># 配置数据库是否动态追踪修改设置，如未设置只会提示警告, 不建议开启</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''两张表(管理员/普通用户)角色(角色ID)'''</span><span class="token comment" spellcheck="true"># 数据库的模型，需要继承db.Model</span><span class="token keyword">class</span> <span class="token class-name">Role</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义表名</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'roles'</span>    <span class="token comment" spellcheck="true"># 定义字段</span>    <span class="token comment" spellcheck="true"># db.Column表示一个字段</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 主键</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在一的一方，写关联。</span>    <span class="token comment" spellcheck="true"># users = db.relattionship('User'):表示和User模型发生了关联，增加了一个user属性</span>    <span class="token comment" spellcheck="true"># backref = 'role'：表示role是User要用的属性</span>    users <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">'role'</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\n&lt;Role: %s %s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    role_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'roles.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 表示是表roles的外键</span>    <span class="token comment" spellcheck="true"># User希望有role属性，但是这个属性的定义，需要在另一个模型中定义。</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'\n&lt;User: %s %s %s %s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>id<span class="token punctuation">,</span> self<span class="token punctuation">.</span>email<span class="token punctuation">,</span> self<span class="token punctuation">.</span>password<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World!'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 删除表</span>    db<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建表</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python控制台</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> app <span class="token keyword">import</span> <span class="token operator">*</span>role <span class="token operator">=</span> Role<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>role<span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>user1 <span class="token operator">=</span> User<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>role_id <span class="token operator">=</span> role<span class="token punctuation">.</span>id<span class="token punctuation">)</span>user2 <span class="token operator">=</span> User<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'ls'</span><span class="token punctuation">,</span>role_id <span class="token operator">=</span> role<span class="token punctuation">.</span>id<span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>user1<span class="token punctuation">,</span>user2<span class="token punctuation">]</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>role<span class="token punctuation">.</span>users            <span class="token comment" spellcheck="true"># 通过role.users可以查到User中的数据信息</span><span class="token operator">></span> <span class="token punctuation">[</span>User<span class="token punctuation">:</span> <span class="token number">1</span> zs <span class="token number">1</span> <span class="token punctuation">,</span> User<span class="token punctuation">:</span> <span class="token number">2</span> ls <span class="token number">1</span> <span class="token punctuation">]</span>user1<span class="token punctuation">.</span>role            <span class="token comment" spellcheck="true"># 通过user1.role可以查询出user1的Role信息</span><span class="token operator">></span> Role<span class="token punctuation">:</span> <span class="token number">1</span> admin user2<span class="token punctuation">.</span>role<span class="token operator">></span> Role<span class="token punctuation">:</span> <span class="token number">1</span> admin <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、查询操作"><a href="#三、查询操作" class="headerlink" title="三、查询操作"></a>三、查询操作</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><h3 id="1-1-常用的SQLAlchemy查询过滤器"><a href="#1-1-常用的SQLAlchemy查询过滤器" class="headerlink" title="1.1 常用的SQLAlchemy查询过滤器"></a>1.1 常用的SQLAlchemy查询过滤器</h3><table><thead><tr><th align="left">过滤器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">filter()</td><td align="left">把过滤器添加到原查询上，返回一个新查询</td></tr><tr><td align="left">filter_by()</td><td align="left">把等值过滤器添加到原查询上，返回一个新查询</td></tr><tr><td align="left">limit</td><td align="left">使用指定的值限定原查询返回的结果</td></tr><tr><td align="left">offset()</td><td align="left">偏移原查询返回的结果，返回一个新查询</td></tr><tr><td align="left">order_by()</td><td align="left">根据指定条件对原查询结果进行排序，返回一个新查询</td></tr><tr><td align="left">group_by()</td><td align="left">根据指定条件对原查询结果进行分组，返回一个新查询</td></tr></tbody></table><h3 id="1-2-常用的SQLAlchemy查询执行器"><a href="#1-2-常用的SQLAlchemy查询执行器" class="headerlink" title="1.2 常用的SQLAlchemy查询执行器"></a>1.2 常用的SQLAlchemy查询执行器</h3><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">all()</td><td align="left">以列表形式返回查询的所有结果</td></tr><tr><td align="left">first()</td><td align="left">返回查询的第一个结果，如果未查到，返回None</td></tr><tr><td align="left">first_or_404()</td><td align="left">返回查询的第一个结果，如果未查到，返回404</td></tr><tr><td align="left">get()</td><td align="left">返回指定主键对应的行，如不存在，返回None</td></tr><tr><td align="left">get_or_404()</td><td align="left">返回指定主键对应的行，如不存在，返回404</td></tr><tr><td align="left">count()</td><td align="left">返回查询结果的数量</td></tr><tr><td align="left">paginate()</td><td align="left">返回一个Paginate对象，它包含指定范围内的结果</td></tr></tbody></table><p>先在python中直接创建好数据，创建数据的代码写在创建数据库的后面，代码如下:</p><pre class="line-numbers language-python"><code class="language-python">    ro1 <span class="token operator">=</span> Role<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'admin'</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>ro1<span class="token punctuation">)</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 再次插入一条数据    ro2 = Role(name='user')    db.session.add(ro2)    db.session.commit()    us1 = User(name='wang', email='wang@163.com', password='123456', role_id=ro1.id)    us2 = User(name='zhang', email='zhang@189.com', password='201512', role_id=ro2.id)    us3 = User(name='chen', email='chen@126.com', password='987654', role_id=ro2.id)    us4 = User(name='zhou', email='zhou@163.com', password='456789', role_id=ro1.id)    us5 = User(name='tang', email='tang@itheima.com', password='158104', role_id=ro2.id)    us6 = User(name='wu', email='wu@gmail.com', password='5623514', role_id=ro2.id)    us7 = User(name='qian', email='qian@gmail.com', password='1543567', role_id=ro1.id)    us8 = User(name='liu', email='liu@itheima.com', password='867322', role_id=ro1.id)    us9 = User(name='li', email='li@163.com', password='4526342', role_id=ro2.id)    us10 = User(name='sun', email='sun@163.com', password='235523', role_id=ro2.id)    db.session.add_all([us1, us2, us3, us4, us5, us6, us7, us8, us9, us10])    db.session.commit()</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新运行程序，查看数据表中有没有新增数据:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210525172150895.png"><p>正确运行后的结果如上图。</p><p>在上面的基础上进行查询如下：</p><p>进入pycharm内置的Python控制台:</p><pre class="line-numbers language-Python"><code class="language-Python">from app import *User.query.all()        # 查询users表中有哪些数据User.query.count()        # 查询表中有多少条数据User.query.first()            # 查询表中的第一条数据User.query.get(4)            # 查询id为4的数据User.query.filter_by(id=4).first()            # 同上 注意写法User.query.filter(User.id==4).first()            # 同上 注意写法'''filter_by:属性=filter:对象.属性==filter功能更强大，可以实现更多的一些查询，支持比较运算符'''<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>上述结果如下图:</strong></p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210525175554685-1624169534725.png"><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210525174147252.png"><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210525175615214.png"><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210525180057263.png"><h2 id="十三、综合案例-图书管理-完结篇"><a href="#十三、综合案例-图书管理-完结篇" class="headerlink" title="十三、综合案例-图书管理-完结篇"></a>十三、综合案例-图书管理-完结篇</h2><p>代码:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>flash<span class="token punctuation">,</span>request<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>redirect<span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy<span class="token keyword">from</span> flask_wtf <span class="token keyword">import</span> FlaskForm<span class="token keyword">from</span> wtforms <span class="token keyword">import</span> StringField<span class="token punctuation">,</span>SubmitField<span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators <span class="token keyword">import</span> DataRequiredapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#数据库配置：连接数据库/自动跟踪修改关闭</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_DATABASE_URI'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'mysql://root:mysql@127.0.0.1/flask_books'</span><span class="token triple-quoted-string string">'''务必将数据库创建好,记得指定数据库编码为UTF-8，即create database flask_books charset=utf8;不然会报错'''</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>app<span class="token punctuation">.</span>secret_key<span class="token operator">=</span><span class="token string">'heima'</span>      <span class="token comment" spellcheck="true"># 设置secret_key，不设置会报错</span>db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span>app<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建对象</span><span class="token triple-quoted-string string">'''实例步骤描述:1.配置数据库    # 导入模块    # 创建app实例并配置参数    # mysql里创建好数据库2.添加书和作者模型    # 模型继承db.Model    # __tablename__定义表名    # db.Column定义字段    # 关系引用3.添加数据4.使用模板显示数据库查询数据 # 查询所有作者信息，让信息传递给模板    # 模板中按照格式，依次for循环作者和书籍即可(作者获取书籍，用的是关系引用)5.使用WTF使用表单    # 自定义表单类    # 模板中显示    # secret_key 解决编码问题，csrf_token问题6.实现相关的增删逻辑    # 增加数据    # 删除书籍  -- 网页中删除 -- 点击需要发送书籍的ID给删除书籍的路由 -- 路由需要接受参数    '''</span><span class="token comment" spellcheck="true"># 作者模型</span><span class="token keyword">class</span> <span class="token class-name">Author</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 创建作者类</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'authors'</span>       <span class="token comment" spellcheck="true"># 创建的表名</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 创建作者id字段</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 创建作者名称字段</span>    <span class="token comment" spellcheck="true"># 关系引用，即通过作者表中的作者id可以查询到与书表中作者id相同的数据</span>    <span class="token comment" spellcheck="true"># books是给自己（Author模型)用的，auther是给Book模型用的</span>    books <span class="token operator">=</span> db<span class="token punctuation">.</span>relationship<span class="token punctuation">(</span><span class="token string">'Book'</span><span class="token punctuation">,</span>backref<span class="token operator">=</span><span class="token string">'author'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 返回结果格式化</span>        <span class="token keyword">return</span> <span class="token string">'Author: %s '</span> <span class="token operator">%</span>self<span class="token punctuation">.</span>name<span class="token comment" spellcheck="true"># 书籍模型</span><span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 创建书类</span>    <span class="token comment" spellcheck="true"># 表名</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'books'</span>     <span class="token comment" spellcheck="true"># 创建的表名</span>    <span class="token comment" spellcheck="true"># 定义字段</span>    id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    author_id <span class="token operator">=</span> db<span class="token punctuation">.</span>Column<span class="token punctuation">(</span>db<span class="token punctuation">.</span>Integer<span class="token punctuation">,</span>db<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span><span class="token string">'authors.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># authors表的外键,表名.id</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 返回结果格式化</span>        <span class="token keyword">return</span> <span class="token string">'Book: %s %s '</span> <span class="token operator">%</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span>self<span class="token punctuation">.</span>author_id<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 自定义表单类</span><span class="token keyword">class</span> <span class="token class-name">AuthorForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建表单类，用于在网页中显示表单时会用到</span>    author <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'作者'</span><span class="token punctuation">,</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#创建作者输入框</span>    book <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'书籍'</span><span class="token punctuation">,</span>validators<span class="token operator">=</span><span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建书名输入框</span>    submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'提交'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 创建提交按钮</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/delete_author/&lt;author_id>'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建删除作者路由</span><span class="token keyword">def</span> <span class="token function">delete_author</span><span class="token punctuation">(</span>author_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 查询数据库，是否有该ID的作者，如果有就删除，没有提示错误。</span>    author <span class="token operator">=</span> Author<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span>author_id<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 查询传入的作者的id，若查询到即author有值，反之无值</span>    <span class="token comment" spellcheck="true"># 如果有就删除</span>    <span class="token keyword">if</span> author<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 根据author判断，若数据库中存在这个作者</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            Book<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>author_id<span class="token operator">=</span>author<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 根据作者id将书删除</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 提交数据</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印错误信息</span>            flash<span class="token punctuation">(</span><span class="token string">'删除作者出错'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 在网页显示删除作者出错</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 数据库回滚，即撤销操作</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 若不存在</span>        <span class="token comment" spellcheck="true"># 没有提示错误</span>        flash<span class="token punctuation">(</span><span class="token string">'作者找不到'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># return redirect('/')</span>    <span class="token comment" spellcheck="true"># redirect:重定向，需要传入域名/路由地址</span>    <span class="token comment" spellcheck="true"># url_for（’index‘）:需要传入视图函数名，返回视图函数对应的路由地址</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># url_for('index')的返回结果为'/'即根目录，相当于redirect('/')重定向到根目录</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/delete_book/&lt;book_id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_book</span><span class="token punctuation">(</span>book_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 查询数据库，是否有该ID的书，如果有就删除，没有提示错误。</span>    book <span class="token operator">=</span> Book<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span>book_id<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果有就删除</span>    <span class="token keyword">if</span> book<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>book<span class="token punctuation">)</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            flash<span class="token punctuation">(</span><span class="token string">'删除书籍出错'</span><span class="token punctuation">)</span>            db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 没有提示错误</span>        flash<span class="token punctuation">(</span><span class="token string">'书籍找不到'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># return redirect('/')</span>    <span class="token comment" spellcheck="true"># redirect:重定向，需要传入域名/路由地址</span>    <span class="token comment" spellcheck="true"># url_for（’index‘）:需要传入视图函数名，返回视图函数对应的路由地址</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># url_for('index')的返回结果为'/'即根目录，相当于redirect('/')重定向到根目录</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建自定义表单类</span>    author_form <span class="token operator">=</span>AuthorForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    验证逻辑:    1.调用WTF的验证函数实现验证    2.验证通过获取数据    3.判断作者是否存在    4.如果作者存在，判断书籍是否存在，没有重复书籍就添加书籍，重复就提示错误    5.如果作者不存在，直接添加作者和书籍    6.验证不通过就提示错误        '''</span>    <span class="token keyword">if</span> author_form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 验证通过获取数据</span>        author_name <span class="token operator">=</span> author_form<span class="token punctuation">.</span>author<span class="token punctuation">.</span>data      <span class="token comment" spellcheck="true">#获取输入的作者数据</span>        book_name <span class="token operator">=</span> author_form<span class="token punctuation">.</span>book<span class="token punctuation">.</span>data         <span class="token comment" spellcheck="true"># 获取输入的书名数据</span>        <span class="token comment" spellcheck="true"># 判断作者是否存在</span>        author <span class="token operator">=</span> Author<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name <span class="token operator">=</span> author_name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 查询输入的作者名称是否在数据库中存在</span>        <span class="token keyword">if</span> author<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 进行判断语句</span>            book <span class="token operator">=</span> Book<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>name <span class="token operator">=</span> book_name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> book<span class="token punctuation">:</span>                flash<span class="token punctuation">(</span><span class="token string">'已存在同名书籍'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    new_book <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span>book_name<span class="token punctuation">,</span>author_id<span class="token operator">=</span>author<span class="token punctuation">.</span>id<span class="token punctuation">)</span>                    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_book<span class="token punctuation">)</span>                    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                    flash<span class="token punctuation">(</span><span class="token string">'添加书籍失败'</span><span class="token punctuation">)</span>                    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                new_author <span class="token operator">=</span> Author<span class="token punctuation">(</span>name <span class="token operator">=</span> author_name<span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_author<span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                new_book <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span>book_name<span class="token punctuation">,</span> author_id<span class="token operator">=</span>new_author<span class="token punctuation">.</span>id<span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>new_book<span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                flash<span class="token punctuation">(</span><span class="token string">'添加作者和书籍失败'</span><span class="token punctuation">)</span>                db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 验证不通过就提示错误</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'参数不全'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查询所有的作者信息，让信息传递给模板</span>    authors <span class="token operator">=</span> Author<span class="token punctuation">.</span>query<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''    验证逻辑:    1.调用WTF的函数实现验证    2.验证通过获取数据    3.判断作者是否存在    4.如果作者存在，判断书记是否存在，没有重复书籍就可以添加书籍，若重复，则提示错误    5.如果作者不存在，添加作者和书籍。    6.验证不通过就提示错误    '''</span>    <span class="token comment" spellcheck="true"># 1.调用WTF的函数实现验证</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'books.html'</span><span class="token punctuation">,</span>authors<span class="token operator">=</span>authors<span class="token punctuation">,</span>form <span class="token operator">=</span> author_form<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    db<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 生成数据</span>    au1 <span class="token operator">=</span> Author<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'老王'</span><span class="token punctuation">)</span>    au2 <span class="token operator">=</span> Author<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'老惠'</span><span class="token punctuation">)</span>    au3 <span class="token operator">=</span> Author<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'老刘'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把数据提交给用户会话</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>au1<span class="token punctuation">,</span> au2<span class="token punctuation">,</span> au3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 提交会话</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    bk1 <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'老王回忆录'</span><span class="token punctuation">,</span> author_id<span class="token operator">=</span>au1<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    bk2 <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'我读书少，你别骗我'</span><span class="token punctuation">,</span> author_id<span class="token operator">=</span>au1<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    bk3 <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'如何才能让自己更骚'</span><span class="token punctuation">,</span> author_id<span class="token operator">=</span>au2<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    bk4 <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'怎样征服美丽少女'</span><span class="token punctuation">,</span> author_id<span class="token operator">=</span>au3<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    bk5 <span class="token operator">=</span> Book<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'如何征服英俊少男'</span><span class="token punctuation">,</span> author_id<span class="token operator">=</span>au3<span class="token punctuation">.</span>id<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把数据提交给用户会话</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>add_all<span class="token punctuation">(</span><span class="token punctuation">[</span>bk1<span class="token punctuation">,</span> bk2<span class="token punctuation">,</span> bk3<span class="token punctuation">,</span> bk4<span class="token punctuation">,</span> bk5<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 提交会话</span>    db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>html:</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form method="post"&gt;    {{ form.csrf_token() }}    {{ form.author.label }}{{ form.author }}&lt;br&gt;    {{ form.book.label }}{{ form.book }}&lt;br&gt;    {{ form.submit}}&lt;br&gt;    {# 显示消息闪现内容 #}    {% for message in get_flashed_messages()%}        {{ message }}    {% endfor%}&lt;/form&gt;&lt;hr&gt;&lt;ul&gt;    {% for author in authors %}        <li>{{ author.name }}<a href="{{" url_for("delete_author",author_id="author.id)" &#125;&#125;="">删除</a></li>    </code><ul><code class="html">        {% for book in author.books %}            <li>{{ book.name }}<a href="{{" url_for("delete_book",book_id="book.id)" &#125;&#125;="">删除</a></li>            {% else %}                <li>无</li>        {% endfor%}    &lt;/ul&gt;    {% endfor %}&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;</code></ul></pre><p>运行结果：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Flask%E5%85%A5%E9%97%A8/image-20210526203705733.png"><p>功能描述：</p><p>输入了作者和书籍，点击提交，会判断作者是否存在，存在就添加书籍，还会判断书是否存在，如果存在会提示书籍已存在，如果作者和书籍都不存在就都添加。点击删除可以实现删除，当作者没有书时会只显示一个无。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux安装Anaconda3环境配置指南</title>
      <link href="year/05/16/linux-an-zhuang-anaconda3-huan-jing-pei-zhi-zhi-nan/"/>
      <url>year/05/16/linux-an-zhuang-anaconda3-huan-jing-pei-zhi-zhi-nan/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装Anaconda3环境配置指南"><a href="#Linux安装Anaconda3环境配置指南" class="headerlink" title="Linux安装Anaconda3环境配置指南"></a>Linux安装Anaconda3环境配置指南</h1><h2 id="1-添加jupyter环境变量"><a href="#1-添加jupyter环境变量" class="headerlink" title="1.添加jupyter环境变量"></a>1.添加jupyter环境变量</h2><pre class="line-numbers language-linux"><code class="language-linux">find -name jupyter        找jupyter的位置vim /etc/profile        编辑文件根据找到的位置,在最后一行添加,PATH后面跟的路径自行改变：export PATH=$PATH:/root/anaconda3/bin source  /etc/profile/         执行配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h2><pre class="line-numbers language-linux"><code class="language-linux">jupyter notebook --generate-config        生成配置文件vim  /root/.jupyter/jupyter_notebook_config.py         编辑配置文件添加代码：c.NotebookApp.ip = '*'        配置可以访问的ip为所有ipc.NotebookApp.open_browser = False        配置不自动打开浏览器c.NotebookApp.port = 8888        配置服务端口为888jupyter notebook --allow-root&  开启服务，root用户需要加--allow-root，&代表在后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Anaconda </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda创建python环境</title>
      <link href="year/05/11/conda-chuang-jian-python-huan-jing/"/>
      <url>year/05/11/conda-chuang-jian-python-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="Cnda创建python环境"><a href="#Cnda创建python环境" class="headerlink" title="Cnda创建python环境"></a>Cnda创建python环境</h1><h2 id="1-列出当前存在的环境"><a href="#1-列出当前存在的环境" class="headerlink" title="1 列出当前存在的环境"></a>1 列出当前存在的环境</h2><p>可以用以下命令罗列出当前已经创建的python虚拟环境</p><pre class="line-numbers language-cpp"><code class="language-cpp">conda env list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>罗列结果如下所示:</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Album_Src/Conda_list.jpg"><p>左边是虚拟环境的名称，右边是其所在路径，带星号的表示是默认环境。</p><h2 id="2-创建虚拟环境"><a href="#2-创建虚拟环境" class="headerlink" title="2 创建虚拟环境"></a>2 创建虚拟环境</h2><p>可以用如下命令创建一个名字为my_py_env，python版本为3.6.2的虚拟环境。</p><pre class="line-numbers language-undefined"><code class="language-undefined">conda create -n my_py_env python=3.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该方式创建的环境在默认路径下，可以通过以下方式指定路径：</p><pre class="line-numbers language-swift"><code class="language-swift">conda create <span class="token operator">--</span><span class="token keyword">prefix</span><span class="token operator">=</span><span class="token string">"D:\\my_python\\envs\\my_py_env"</span>  python<span class="token operator">=</span><span class="token number">3.6</span><span class="token punctuation">.</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中”D:\my_python\envs"是路径名，”my_py_env” 是环境名.</p><h2 id="3-进入环境"><a href="#3-进入环境" class="headerlink" title="3 进入环境"></a>3 进入环境</h2><pre class="line-numbers language-undefined"><code class="language-undefined">activate my_py_env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在windows系统cmd下通过以上命令即可进入my_py_env环境，如果在linux系统下，需要使用：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> activate my_py_env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-退出环境"><a href="#4-退出环境" class="headerlink" title="4 退出环境"></a>4 退出环境</h2><p>windows:</p><pre class="line-numbers language-undefined"><code class="language-undefined">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>linux：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-使用conda管理包"><a href="#5-使用conda管理包" class="headerlink" title="5 使用conda管理包"></a>5 使用conda管理包</h2><pre class="line-numbers language-undefined"><code class="language-undefined">conda install -n my_py_env package_nameconda uninstall -n my_py_env package_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只需要在conda命令中通过 -n 显示指定python环境即可</p><h2 id="6-删除环境"><a href="#6-删除环境" class="headerlink" title="6 删除环境"></a>6 删除环境</h2><pre class="line-numbers language-csharp"><code class="language-csharp">conda <span class="token keyword">remove</span> <span class="token operator">-</span>n my_py_env <span class="token operator">--</span>all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Conda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的itertools的使用详解</title>
      <link href="year/05/03/python-zhong-de-itertools-de-shi-yong-xiang-jie/"/>
      <url>year/05/03/python-zhong-de-itertools-de-shi-yong-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Python中的itertools的使用详解"><a href="#Python中的itertools的使用详解" class="headerlink" title="Python中的itertools的使用详解"></a>Python中的itertools的使用详解</h1><p><strong>1.无穷的迭代器</strong></p><p>1.1 count(start,[step])</p><p>count()接受两个参数</p><ul><li> start:循环开始的数字</li><li> step:循环中的间隔</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> count <span class="token triple-quoted-string string">"""无穷的迭代器 count()"""</span>c <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>v <span class="token operator">=</span> next<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">while</span> v <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>  v <span class="token operator">=</span> next<span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.2 cycle()</p><p>cycle就是一while True，无限循环里面的数字。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""无穷迭代器 cycle()"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> cycle c <span class="token operator">=</span> cycle<span class="token punctuation">(</span><span class="token string">'ABCD'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.3 repeat(elem,[n])</p><p>重复迭代elem，n次</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""无穷迭代器 repeat()"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> repeat r <span class="token operator">=</span> repeat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 迭代器</strong></p><p>2.1 accumulate(p,[func])</p><p>使用func的函数对迭代对象p进行累积。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""迭代器 accumulate()"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> accumulate test_list <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> accumulate<span class="token punctuation">(</span>test_list<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 默认是operator.add</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> accumulate<span class="token punctuation">(</span>test_list<span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># operator.mul</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 chain()</p><p>chain()中可以放多个迭代对象，然后一一迭代出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""迭代器 chain()"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain ch <span class="token operator">=</span> chain<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ch<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.3 chain.from_iterable()</p><p>跟chain不同的地方在于:</p><ul><li> chain: 可以接受多个迭代对象</li><li> chain.from_iterable():可以接受一个可以产生迭代对象的迭代器</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""迭代器 chain.from_iterable()"""</span><span class="token keyword">def</span> <span class="token function">gen_iterables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> chain<span class="token punctuation">.</span>from_iterable<span class="token punctuation">(</span>gen_iterables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.4 compress(data,selectors)</p><p>这是就是看下这个就知道了s是selectors中的元素。<br>(d[0] if s[0]), (d[1] if s[1]), …</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""迭代器 compress"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> compress <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>compress<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.5 dropwhile(pred,seq)</p><p>循环开始的条件是，直到遇到第一次不满足pred条件的情况，才开始遍历。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""迭代器 dropwhile()"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> dropwhile l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>dropwhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.6 groupby</p><p>这个感觉挺有意思的，有点像sql中的group_by。可以对字符串，列表等进行分组。</p><p>返回键和，组里的内容</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> groupby <span class="token comment" spellcheck="true"># 对字符串进行分组</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> g <span class="token keyword">in</span> groupby<span class="token punctuation">(</span><span class="token string">'11111234567'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> list<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 按照字典value来进行分组</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> g <span class="token keyword">in</span> groupby<span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> list<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.7 islice<br>这个就是对迭代对象进行切割，不支持负数，有点像range(1,10,2)这种</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> islice<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>islice<span class="token punctuation">(</span><span class="token string">'ABCDEFG'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.8 zip_longest</p><p>这个和zip很像，不同地方在于:</p><ul><li> zip结束取决于里面最短的迭代对象</li><li> zip_longest结束取决于里面最长的迭代对象</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> zip_longest <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> zip_longest<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> zip<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>排列组合迭代器</strong></p><p>3.1 product</p><p>相当于 嵌套的for</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">"""排列组合迭代器 product 嵌套的for"""</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> product<span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> product<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.2 permutations</p><p>全排列，比如输出123的全部情况。(1,2,3),(1,3,2)…</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> permutations<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>permutations<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.3 combinations(p,r)</p><p>从p中找出所有长度为r的排列情况… 有顺序</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> itertools <span class="token keyword">import</span> combinations<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>combinations<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.4 combinations_with_replacement()</p><p>从p中找出所有长度为r的排列情况，有顺序，但包括自身就是会重复的意思。</p><ul><li> combinations_with_replacement(‘ABCD’, 2)</li><li> AA AB AC AD BB BC BD CC CD DD</li></ul><p>了解是了解了，就是用的时候不知道能不能想起来…</p><p>以上就是本文的全部内容，希望对大家的学习有所帮助，也希望大家多多支持服务器之家。</p><p>原文链接：<a href="https://blog.csdn.net/qq_36659627/article/details/103926495">https://blog.csdn.net/qq_36659627/article/details/103926495</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git仓库小记</title>
      <link href="year/04/29/git-cang-ku-xiao-ji/"/>
      <url>year/04/29/git-cang-ku-xiao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Git仓库小记"><a href="#Git仓库小记" class="headerlink" title="Git仓库小记"></a>Git仓库小记</h1><h2 id="1-关联远程仓库"><a href="#1-关联远程仓库" class="headerlink" title="1.关联远程仓库"></a>1.关联远程仓库</h2><ul><li><p>打开Git bush输入：</p><pre class="line-numbers language-Git"><code class="language-Git">git remote add origin git@github.com:zhaotaogit/images.git  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>​    origin为仓库地址的重命名，后面的链接为仓库链接。</li></ul><blockquote><p>如果git remote add时出现fatal:remote origin already exists,表示origin这个名字已经有了。</p><p>可以用Git remote -v 查看远程仓库信息。</p><p>然后 git remote remove origin删除这个远程仓库</p><p>origin职业仓库链接的别名，可以随便起</p></blockquote></li></ul><h2 id="2-创建版本库并提交文件"><a href="#2-创建版本库并提交文件" class="headerlink" title="2.创建版本库并提交文件"></a>2.创建版本库并提交文件</h2><ul><li>初始化git本地仓库    <ul><li>通过执行git init命令在本地初始化一个本地仓库，会在文件夹中生成一个.git的隐藏文件</li></ul></li><li>通过git status命令查看暂存区情况</li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/20210620140151.png"><ul><li><p>创建完文件查看再暂存区，会提示你用git add将文件添加到暂存区</p></li><li><p>通过git add path 命令添加文件到暂存区,path是文件路径</p><ul><li>git add . 是将所有文件添加到暂存区</li></ul></li><li><p>执行git commit命令将暂存区里的改动给提交到本地的版本库，一般使用时会加-m：</p><ul><li>git commit -m “描述”,简单描述这次调教的语句。</li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/git%E6%8E%A8%E9%80%81%E5%92%8C%E4%B8%8A%E4%BC%A0.png"></li></ul><h2 id="3-把本地仓库推送到远程仓库"><a href="#3-把本地仓库推送到远程仓库" class="headerlink" title="3.把本地仓库推送到远程仓库"></a>3.把本地仓库推送到远程仓库</h2><ul><li><p>第一次推送,把本地的main和远程的main分支关联起来：</p><pre><code>git push -u origin main</code></pre><ul><li>第一次推送要加-u</li></ul></li></ul><ul><li><p>若在网页版创建了一个仓库，第一次提交不上去的话，需要先合并远程仓库的内容,然后再重新提交</p><pre class="line-numbers language-python"><code class="language-python">git pull <span class="token operator">-</span><span class="token operator">-</span>rebase origin main    <span class="token comment" spellcheck="true"># 合并远程内容到本地</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>非第一次推送</p><pre class="line-numbers language-Git"><code class="language-Git">git push origin main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/%E6%95%88%E6%9E%9C.png"><h2 id="4-克隆远程仓库"><a href="#4-克隆远程仓库" class="headerlink" title="4.克隆远程仓库"></a>4.克隆远程仓库</h2><ul><li><p>在你想要克隆到的位置打开Git bash</p><pre class="line-numbers language-Git"><code class="language-Git">git clone 链接<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>链接写自己仓库的链接，然后回到文件夹就看到远程仓库的文件已经下载到本地了。</li></ul></li></ul><h2 id="5-把服务器仓库的更新拉到本地仓库中"><a href="#5-把服务器仓库的更新拉到本地仓库中" class="headerlink" title="5.把服务器仓库的更新拉到本地仓库中"></a>5.把服务器仓库的更新拉到本地仓库中</h2><pre class="line-numbers language-Git"><code class="language-Git">git pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-创建分支并进入"><a href="#6-创建分支并进入" class="headerlink" title="6.创建分支并进入"></a>6.创建分支并进入</h2><ul><li>创建main分支，其实仓库里默认就有main分支，可以创建其他分支。</li></ul><pre class="line-numbers language-Git"><code class="language-Git">git checkout -b main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="7-删除本地分支"><a href="#7-删除本地分支" class="headerlink" title="7.删除本地分支"></a>7.删除本地分支</h1><ul><li><p>删除本地的master分支</p><pre class="line-numbers language-Git"><code class="language-Git">git branch -D master <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="8-删除Github项目上的分支"><a href="#8-删除Github项目上的分支" class="headerlink" title="8.删除Github项目上的分支"></a>8.删除Github项目上的分支</h2><ul><li>删除Github项目上的mster分支</li></ul><pre class="line-numbers language-Git"><code class="language-Git">git push origin --delete master <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-删除仓库"><a href="#9-删除仓库" class="headerlink" title="9.删除仓库"></a>9.删除仓库</h2><ol><li><p>进入要删除的仓库：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/20210620135848.png"></li><li><p>点击Settings：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/20210620135914.png"></li><li><p>拉倒页面最下面：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/20210620135937.png"></li><li><p>按照提示输入：</p><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Git%E7%AE%A1%E7%90%86/20210620140006.png"></li></ol><p>即可删除！</p><h1 id="10参考链接"><a href="#10参考链接" class="headerlink" title="10参考链接"></a>10参考链接</h1><h2 id="1-远程分支—-git-pull和git-push命令用法介绍"><a href="#1-远程分支—-git-pull和git-push命令用法介绍" class="headerlink" title="1.远程分支—-git pull和git push命令用法介绍"></a><a href="https://blog.csdn.net/qq_42780289/article/details/97804091?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control&amp;dist_request_id=1619705520604_31908&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-1.control">1.远程分支—-git pull和git push命令用法介绍</a></h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Pandas一些命令笔记-持续更新</title>
      <link href="year/04/27/python-pandas-yi-xie-ming-ling-bi-ji-chi-xu-geng-xin/"/>
      <url>year/04/27/python-pandas-yi-xie-ming-ling-bi-ji-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-一些命令笔记-持续更新"><a href="#Python-一些命令笔记-持续更新" class="headerlink" title="Python-一些命令笔记-持续更新"></a>Python-一些命令笔记-持续更新</h1><h2 id="1-python的u-r-b分别什么意思？"><a href="#1-python的u-r-b分别什么意思？" class="headerlink" title="1.python的u,r,b分别什么意思？"></a>1.<a href="https://www.cnblogs.com/young233/p/11195577.html">python的u,r,b分别什么意思？</a></h2><p>我们经常在python当中看到以下内容：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在其他语言里没见过类似的，所以特此记录：</p><h3 id="u-表示unicode字符串，默认模式，里边的特殊字符会被识别。"><a href="#u-表示unicode字符串，默认模式，里边的特殊字符会被识别。" class="headerlink" title="u: 表示unicode字符串，默认模式，里边的特殊字符会被识别。"></a>u: 表示unicode字符串，默认模式，里边的特殊字符会被识别。</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>u<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行之后：<br><strong>hi hi hi</strong></p><h3 id="b-表示二进制字符串，括号内的内容原样输出。"><a href="#b-表示二进制字符串，括号内的内容原样输出。" class="headerlink" title="b: 表示二进制字符串，括号内的内容原样输出。"></a>b: 表示二进制字符串，括号内的内容原样输出。</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行之后：<br><strong>b’hi\thi\thi’</strong></p><h3 id="r：不转义字符串，要输出的内容原样输出。"><a href="#r：不转义字符串，要输出的内容原样输出。" class="headerlink" title="r：不转义字符串，要输出的内容原样输出。"></a>r：不转义字符串，要输出的内容原样输出。</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'hi\thi\thi'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行之后：<br><strong>hi\thi\thi</strong></p><h2 id="2-Pandas时间序列——date-range方法"><a href="#2-Pandas时间序列——date-range方法" class="headerlink" title="2.Pandas时间序列——date_range方法"></a>2.<a href="https://blog.csdn.net/wzyaiwl/article/details/90693214?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161952249816780271560229%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161952249816780271560229&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-90693214.first_rank_v2_pc_rank_v29&amp;utm_term=date_range">Pandas时间序列——date_range方法</a></h2><ul><li><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>date_range()方法主要用于生成一系列特定的时间，我们可以自己设定开始、结束、周期数、时间间隔、时区等等。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandaspandas<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span>None<span class="token punctuation">,</span> end<span class="token operator">=</span>None<span class="token punctuation">,</span> periods<span class="token operator">=</span>None<span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">,</span> tz<span class="token operator">=</span>None<span class="token punctuation">,</span> normalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">,</span> closed<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li><p>start、end</p><p>开始时间、结束时间，可以是str格式，也可以是datetime对象或None。</p></li><li><p>periods</p><p>生成的周期数，可以是整数或None。</p></li></ul><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'1/08/2018'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">54</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-06'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-07'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-08'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-06'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-07'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-08'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>end<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-12-25'</span><span class="token punctuation">,</span> <span class="token string">'2017-12-26'</span><span class="token punctuation">,</span> <span class="token string">'2017-12-27'</span><span class="token punctuation">,</span> <span class="token string">'2017-12-28'</span><span class="token punctuation">,</span>               <span class="token string">'2017-12-29'</span><span class="token punctuation">,</span> <span class="token string">'2017-12-30'</span><span class="token punctuation">,</span> <span class="token string">'2017-12-31'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-01'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2018-04-27'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-04-24 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-25 12:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-04-27 00:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span>None<span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2018-04-27'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-25'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-26'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-27'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span>None<span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2018-04-27'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-27'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span>None<span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2018-04-24'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2018-04-27'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-04-24 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-24 18:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-04-25 12:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-26 06:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-04-27 00:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>freq</p><p>日期偏移量，即相邻时间的间隔，可以是str形式或DateOffset，默认为’D‘。</p></li></ul><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'5D'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-06'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-11'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-16'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-21'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'5D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-31'</span><span class="token punctuation">,</span> <span class="token string">'2018-02-28'</span><span class="token punctuation">,</span> <span class="token string">'2018-03-31'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-30'</span><span class="token punctuation">,</span>               <span class="token string">'2018-05-31'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'M'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01 00:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-01 01:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-01 02:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-01 03:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-01 04:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> freq<span class="token operator">=</span>pd<span class="token punctuation">.</span>offsets<span class="token punctuation">.</span>MonthEnd<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">69</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-31'</span><span class="token punctuation">,</span> <span class="token string">'2018-04-30'</span><span class="token punctuation">,</span> <span class="token string">'2018-07-31'</span><span class="token punctuation">,</span> <span class="token string">'2018-10-31'</span><span class="token punctuation">,</span>               <span class="token string">'2019-01-31'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'3M'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>tz</p><p>设定时区，可以为str格式或tz fo。</p></li></ul><pre class="line-numbers language-ruby"><code class="language-ruby"><span class="token constant">In</span> <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span><span class="token function">date_range</span><span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> tz<span class="token operator">=</span><span class="token string">'Asia/Tokyo'</span><span class="token punctuation">)</span><span class="token constant">Out</span><span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token function">DatetimeIndex</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01 00:00:00+09:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02 00:00:00+09:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-03 00:00:00+09:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04 00:00:00+09:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05 00:00:00+09:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns, Asia/Tokyo]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> <span class="token constant">In</span> <span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span><span class="token function">date_range</span><span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> tz<span class="token operator">=</span><span class="token string">'Asia/Shanghai'</span><span class="token punctuation">)</span><span class="token constant">Out</span><span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token function">DatetimeIndex</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01 00:00:00+08:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02 00:00:00+08:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-03 00:00:00+08:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04 00:00:00+08:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05 00:00:00+08:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns, Asia/Shanghai]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>normalize</p><p>布尔值，默认为False，若参数为True表示将start、end参数值正则化到午夜时间戳；</p></li></ul><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018 14:00:00'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>normalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">83</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01 14:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02 14:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-03 14:00:00'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04 14:00:00'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05 14:00:00'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'1/1/2018 14:00:00'</span><span class="token punctuation">,</span> periods<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">:</span>DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2018-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2018-01-04'</span><span class="token punctuation">,</span>               <span class="token string">'2018-01-05'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>name</p><p>生成时间索引对象的名称，取值为str g或None；</p></li></ul><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span>None<span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'xiaowoniu'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">79</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> name<span class="token operator">=</span>u<span class="token string">'xiaowoniu'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>closed</p><p>若closed=’left’表示在返回的结果基础上，再取左闭右开的结果，若closed=’right’表示在返回的结果基础上，再取左开右闭的结果。当freq参数不为‘D’时，始终去掉的是为‘D‘时最左或最有的日期。</p></li></ul><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span>None<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-04'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">73</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-02'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-04'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span> In <span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'2017-01-04'</span><span class="token punctuation">,</span> closed<span class="token operator">=</span>None<span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">:</span> DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'2017-01-01'</span><span class="token punctuation">,</span> <span class="token string">'2017-01-03'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">'datetime64[ns]'</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">'2D'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Python-数据清洗之缺失数据填充fillna"><a href="#3-Python-数据清洗之缺失数据填充fillna" class="headerlink" title="3.Python 数据清洗之缺失数据填充fillna()"></a>3.<a href="https://blog.csdn.net/qq_21840201/article/details/81008566?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161960912416780261984422%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161960912416780261984422&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81008566.first_rank_v2_pc_rank_v29&amp;utm_term=fillna">Python 数据清洗之缺失数据填充fillna()</a></h2><ul><li><p>缺失数据比较多的情况下，可以直接滤除，缺失数据比较少时，对数据进行填充就很有必要了。</p></li><li><p>数据填充函数fillna（）默认参数如下：</p></li><li><p>- </p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> numpy <span class="token keyword">import</span> nan<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>nan<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>   <span class="token number">3</span>a   NaN   NaN   NaN   <span class="token number">6</span>b   NaN   NaN   NaN  <span class="token number">10</span>c  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">### 用0填充缺失数据</span>     <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>   <span class="token number">3</span>a  <span class="token number">13.0</span>  <span class="token number">14.0</span>  <span class="token number">15.0</span>   <span class="token number">6</span>b  <span class="token number">13.0</span>  <span class="token number">14.0</span>  <span class="token number">15.0</span>  <span class="token number">10</span>c  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'bfill'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">### 用相邻后面（back）特征填充前面空值</span>      <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>   <span class="token number">3</span>a  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>   <span class="token number">6</span>b  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">10</span>c  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">data<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>index<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">=</span>nan<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>a   <span class="token number">3.0</span>   <span class="token number">4.0</span>   <span class="token number">5.0</span>   <span class="token number">6.0</span>b   NaN   NaN   NaN   NaNc  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14.0</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'bfill'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">### 用相邻前面（before）特征填充后面空值 </span>      <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>     <span class="token number">3</span>a   <span class="token number">3.0</span>   <span class="token number">4.0</span>   <span class="token number">5.0</span>   <span class="token number">6.0</span>b   <span class="token number">3.0</span>   <span class="token number">4.0</span>   <span class="token number">5.0</span>   <span class="token number">6.0</span>c  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14.0</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">values<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">### 用字典对不同的列填充不同的缺失数据</span>      <span class="token number">0</span>     <span class="token number">1</span>     <span class="token number">2</span>   <span class="token number">3</span>a  <span class="token number">10.0</span>  <span class="token number">20.0</span>  <span class="token number">30.0</span>   <span class="token number">6</span>b  <span class="token number">10.0</span>  <span class="token number">20.0</span>  <span class="token number">30.0</span>  <span class="token number">10</span>c  <span class="token number">11.0</span>  <span class="token number">12.0</span>  <span class="token number">13.0</span>  <span class="token number">14</span>d  <span class="token number">15.0</span>  <span class="token number">16.0</span>  <span class="token number">17.0</span>  <span class="token number">18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java一些内置方法-持续更新</title>
      <link href="year/04/27/java-yi-xie-nei-zhi-fang-fa-chi-xu-geng-xin/"/>
      <url>year/04/27/java-yi-xie-nei-zhi-fang-fa-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-一些内置方法-持续更新"><a href="#Java-一些内置方法-持续更新" class="headerlink" title="Java 一些内置方法-持续更新"></a>Java 一些内置方法-持续更新</h1><h3 id="1-Java-split-用法方法"><a href="#1-Java-split-用法方法" class="headerlink" title="1. Java split()用法方法"></a>1. <a href="https://www.cnblogs.com/xiaoxiaohui2015/p/5838674.html">Java split()用法方法</a></h3><ul><li><p>例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>String address<span class="token operator">=</span><span class="token string">"上海\\上海市|闵行区\\吴中路"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> splitAddress<span class="token operator">=</span>address<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>splitAddress<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Java%E4%B8%80%E4%BA%9B%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/image-20210531174727105.png"><blockquote><p>实现按字符切分</p></blockquote><h3 id="2-Java-substring-方法"><a href="#2-Java-substring-方法" class="headerlink" title="2.Java substring()方法"></a>2.Java substring()方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//提取下标为0-2(不包括2)的下标</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//提取最后一个字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Java%E4%B8%80%E4%BA%9B%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/image-20210531174818062.png"><blockquote><p>实现根据下标取字符</p></blockquote><h3 id="3-Arrays-toString-方法"><a href="#3-Arrays-toString-方法" class="headerlink" title="3.Arrays.toString()方法"></a>3.Arrays.toString()方法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>String string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">"igh"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/zhaotaogit/images/Java%E4%B8%80%E4%BA%9B%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95/image-20210531172051448.png"><blockquote><p>如果想要把数组中的内容打印出来,直接调用toString()方法只会打印出数组的地址,因此需要使用Arrays的toString()方法。这个方法是是用来将数组转换成String类型输出的，入参可以是long，float，double，int，boolean，byte，object型的数组。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
